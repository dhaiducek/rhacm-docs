{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes",
    "version": "v1.28.7+6e2789b"
  },
  "paths": {
    "/apis/action.open-cluster-management.io/v1beta1/managedclusteractions": {
      "get": {
        "description": "list objects of kind ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listActionOpenClusterManagementIoV1beta1ManagedClusterActionForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterActionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/action.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusteractions": {
      "get": {
        "description": "list objects of kind ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterActionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteActionOpenClusterManagementIoV1beta1CollectionNamespacedManagedClusterAction",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/action.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusteractions/{name}": {
      "get": {
        "description": "read the specified ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterAction",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchActionOpenClusterManagementIoV1beta1NamespacedManagedClusterAction",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterAction",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/action.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusteractions/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readActionOpenClusterManagementIoV1beta1NamespacedManagedClusterActionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterAction",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceActionOpenClusterManagementIoV1beta1NamespacedManagedClusterActionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterAction",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "actionOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchActionOpenClusterManagementIoV1beta1NamespacedManagedClusterActionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterAction",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/addondeploymentconfigs": {
      "get": {
        "description": "list objects of kind AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1AddOnDeploymentConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/addontemplates": {
      "get": {
        "description": "list objects of kind AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create an AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1CollectionAddOnTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/addontemplates/{name}": {
      "get": {
        "description": "read the specified AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete an AddOnTemplate",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified AddOnTemplate",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1AddOnTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AddOnTemplate",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/clustermanagementaddons": {
      "get": {
        "description": "list objects of kind ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOnList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1CollectionClusterManagementAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/clustermanagementaddons/{name}": {
      "get": {
        "description": "read the specified ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterManagementAddOn",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterManagementAddOn",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/clustermanagementaddons/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOnStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterManagementAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOnStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterManagementAddOn",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1ClusterManagementAddOnStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterManagementAddOn",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/managedclusteraddons": {
      "get": {
        "description": "list objects of kind ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1ManagedClusterAddOnForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOnList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/addondeploymentconfigs": {
      "get": {
        "description": "list objects of kind AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create an AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1CollectionNamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/addondeploymentconfigs/{name}": {
      "get": {
        "description": "read the specified AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete an AddOnDeploymentConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified AddOnDeploymentConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1NamespacedAddOnDeploymentConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AddOnDeploymentConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusteraddons": {
      "get": {
        "description": "list objects of kind ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOnList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1CollectionNamespacedManagedClusterAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusteraddons/{name}": {
      "get": {
        "description": "read the specified ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterAddOn",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOn",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterAddOn",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/addon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusteraddons/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOnStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterAddOn",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOnStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterAddOn",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "addonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAddonOpenClusterManagementIoV1alpha1NamespacedManagedClusterAddOnStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterAddOn",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/agent.open-cluster-management.io/v1/klusterletaddonconfigs": {
      "get": {
        "description": "list objects of kind KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "listAgentOpenClusterManagementIoV1KlusterletAddonConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/agent.open-cluster-management.io/v1/namespaces/{namespace}/klusterletaddonconfigs": {
      "get": {
        "description": "list objects of kind KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "listAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "createAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAgentOpenClusterManagementIoV1CollectionNamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/agent.open-cluster-management.io/v1/namespaces/{namespace}/klusterletaddonconfigs/{name}": {
      "get": {
        "description": "read the specified KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "readAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified KlusterletAddonConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the KlusterletAddonConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/agent.open-cluster-management.io/v1/namespaces/{namespace}/klusterletaddonconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "readAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified KlusterletAddonConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified KlusterletAddonConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "agentOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAgentOpenClusterManagementIoV1NamespacedKlusterletAddonConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the KlusterletAddonConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/channels": {
      "get": {
        "description": "list objects of kind Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1ChannelForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.ChannelList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/deployables": {
      "get": {
        "description": "list objects of kind Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1DeployableForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.DeployableList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/helmreleases": {
      "get": {
        "description": "list objects of kind HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1HelmReleaseForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmReleaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/channels": {
      "get": {
        "description": "list objects of kind Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.ChannelList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1CollectionNamespacedChannel",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/channels/{name}": {
      "get": {
        "description": "read the specified Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a Channel",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Channel",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedChannel",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Channel",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/deployables": {
      "get": {
        "description": "list objects of kind Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.DeployableList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1CollectionNamespacedDeployable",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/deployables/{name}": {
      "get": {
        "description": "read the specified Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Deployable",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedDeployable",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Deployable",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/deployables/{name}/status": {
      "get": {
        "description": "read status of the specified Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedDeployableStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified Deployable",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedDeployableStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Deployable",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedDeployableStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Deployable",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/helmreleases": {
      "get": {
        "description": "list objects of kind HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmReleaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1CollectionNamespacedHelmRelease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/helmreleases/{name}": {
      "get": {
        "description": "read the specified HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified HelmRelease",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedHelmRelease",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the HelmRelease",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/helmreleases/{name}/status": {
      "get": {
        "description": "read status of the specified HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedHelmReleaseStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified HelmRelease",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedHelmReleaseStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified HelmRelease",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedHelmReleaseStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the HelmRelease",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/placementrules": {
      "get": {
        "description": "list objects of kind PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRuleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1CollectionNamespacedPlacementRule",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/placementrules/{name}": {
      "get": {
        "description": "read the specified PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified PlacementRule",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedPlacementRule",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementRule",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/placementrules/{name}/status": {
      "get": {
        "description": "read status of the specified PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedPlacementRuleStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedPlacementRuleStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified PlacementRule",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedPlacementRuleStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementRule",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/subscriptions": {
      "get": {
        "description": "list objects of kind Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1CollectionNamespacedSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/subscriptions/{name}": {
      "get": {
        "description": "read the specified Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Subscription",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Subscription",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/namespaces/{namespace}/subscriptions/{name}/status": {
      "get": {
        "description": "read status of the specified Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Subscription",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Subscription",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/placementrules": {
      "get": {
        "description": "list objects of kind PlacementRule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1PlacementRuleForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRuleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1/subscriptions": {
      "get": {
        "description": "list objects of kind Subscription",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1SubscriptionForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/multiclusterapplicationsetreports": {
      "get": {
        "description": "list objects of kind MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1MulticlusterApplicationSetReportForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReportList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/multiclusterapplicationsetreports": {
      "get": {
        "description": "list objects of kind MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReportList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1CollectionNamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/multiclusterapplicationsetreports/{name}": {
      "get": {
        "description": "read the specified MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a MulticlusterApplicationSetReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified MulticlusterApplicationSetReport",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1alpha1NamespacedMulticlusterApplicationSetReport",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MulticlusterApplicationSetReport",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/subscriptionreports": {
      "get": {
        "description": "list objects of kind SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReportList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1CollectionNamespacedSubscriptionReport",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/subscriptionreports/{name}": {
      "get": {
        "description": "read the specified SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified SubscriptionReport",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionReport",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubscriptionReport",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/subscriptionstatuses": {
      "get": {
        "description": "list objects of kind SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatusList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1CollectionNamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/subscriptionstatuses/{name}": {
      "get": {
        "description": "read the specified SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified SubscriptionStatus",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubscriptionStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/namespaces/{namespace}/subscriptionstatuses/{name}/status": {
      "get": {
        "description": "read status of the specified SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatusStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatusStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified SubscriptionStatus",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1alpha1NamespacedSubscriptionStatusStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubscriptionStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/subscriptionreports": {
      "get": {
        "description": "list objects of kind SubscriptionReport",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1SubscriptionReportForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReportList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1alpha1/subscriptionstatuses": {
      "get": {
        "description": "list objects of kind SubscriptionStatus",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1alpha1SubscriptionStatusForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatusList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1beta1/gitopsclusters": {
      "get": {
        "description": "list objects of kind GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1beta1GitOpsClusterForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1beta1/namespaces/{namespace}/gitopsclusters": {
      "get": {
        "description": "list objects of kind GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1beta1CollectionNamespacedGitOpsCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1beta1/namespaces/{namespace}/gitopsclusters/{name}": {
      "get": {
        "description": "read the specified GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified GitOpsCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1beta1NamespacedGitOpsCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the GitOpsCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/apps.open-cluster-management.io/v1beta1/namespaces/{namespace}/gitopsclusters/{name}/status": {
      "get": {
        "description": "read status of the specified GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readAppsOpenClusterManagementIoV1beta1NamespacedGitOpsClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified GitOpsCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceAppsOpenClusterManagementIoV1beta1NamespacedGitOpsClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified GitOpsCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchAppsOpenClusterManagementIoV1beta1NamespacedGitOpsClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the GitOpsCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1alpha1/managedserviceaccounts": {
      "get": {
        "description": "list objects of kind ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAuthenticationOpenClusterManagementIoV1alpha1ManagedServiceAccountForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedserviceaccounts": {
      "get": {
        "description": "list objects of kind ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAuthenticationOpenClusterManagementIoV1alpha1CollectionNamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedserviceaccounts/{name}": {
      "get": {
        "description": "read the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedServiceAccount",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedServiceAccount",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedserviceaccounts/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchAuthenticationOpenClusterManagementIoV1alpha1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedServiceAccount",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1beta1/managedserviceaccounts": {
      "get": {
        "description": "list objects of kind ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listAuthenticationOpenClusterManagementIoV1beta1ManagedServiceAccountForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedserviceaccounts": {
      "get": {
        "description": "list objects of kind ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteAuthenticationOpenClusterManagementIoV1beta1CollectionNamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedserviceaccounts/{name}": {
      "get": {
        "description": "read the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedServiceAccount",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedServiceAccount",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/authentication.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedserviceaccounts/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedServiceAccount",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authenticationOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchAuthenticationOpenClusterManagementIoV1beta1NamespacedManagedServiceAccountStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedServiceAccount",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1/managedclusters": {
      "get": {
        "description": "list objects of kind ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1CollectionManagedCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1/managedclusters/{name}": {
      "get": {
        "description": "read the specified ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1ManagedCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1/managedclusters/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1ManagedClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1ManagedClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1ManagedClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/addonplacementscores": {
      "get": {
        "description": "list objects of kind AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1alpha1AddOnPlacementScoreForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/clusterclaims": {
      "get": {
        "description": "list objects of kind ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1alpha1CollectionClusterClaim",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/clusterclaims/{name}": {
      "get": {
        "description": "read the specified ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ClusterClaim",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterClaim",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1alpha1ClusterClaim",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterClaim",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/namespaces/{namespace}/addonplacementscores": {
      "get": {
        "description": "list objects of kind AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create an AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1alpha1CollectionNamespacedAddOnPlacementScore",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/namespaces/{namespace}/addonplacementscores/{name}": {
      "get": {
        "description": "read the specified AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete an AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified AddOnPlacementScore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScore",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AddOnPlacementScore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1alpha1/namespaces/{namespace}/addonplacementscores/{name}/status": {
      "get": {
        "description": "read status of the specified AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScoreStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified AddOnPlacementScore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScoreStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified AddOnPlacementScore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1alpha1NamespacedAddOnPlacementScoreStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AddOnPlacementScore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/backupschedules": {
      "get": {
        "description": "list objects of kind BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1BackupScheduleForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupScheduleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/clustercurators": {
      "get": {
        "description": "list objects of kind ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1ClusterCuratorForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCuratorList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/backupschedules": {
      "get": {
        "description": "list objects of kind BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupScheduleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1CollectionNamespacedBackupSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/backupschedules/{name}": {
      "get": {
        "description": "read the specified BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified BackupSchedule",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedBackupSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the BackupSchedule",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/backupschedules/{name}/status": {
      "get": {
        "description": "read status of the specified BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedBackupScheduleStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified BackupSchedule",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedBackupScheduleStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified BackupSchedule",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedBackupScheduleStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the BackupSchedule",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/clustercurators": {
      "get": {
        "description": "list objects of kind ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCuratorList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1CollectionNamespacedClusterCurator",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/clustercurators/{name}": {
      "get": {
        "description": "read the specified ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a ClusterCurator",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterCurator",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedClusterCurator",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterCurator",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placementdecisions": {
      "get": {
        "description": "list objects of kind PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1CollectionNamespacedPlacementDecision",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placementdecisions/{name}": {
      "get": {
        "description": "read the specified PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified PlacementDecision",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecision",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementDecision",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placementdecisions/{name}/status": {
      "get": {
        "description": "read status of the specified PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecisionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecisionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified PlacementDecision",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedPlacementDecisionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementDecision",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placements": {
      "get": {
        "description": "list objects of kind Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1CollectionNamespacedPlacement",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placements/{name}": {
      "get": {
        "description": "read the specified Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified Placement",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedPlacement",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Placement",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/placements/{name}/status": {
      "get": {
        "description": "read status of the specified Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedPlacementStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedPlacementStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Placement",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedPlacementStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Placement",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/restores": {
      "get": {
        "description": "list objects of kind Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.RestoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1CollectionNamespacedRestore",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/restores/{name}": {
      "get": {
        "description": "read the specified Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified Restore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedRestore",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Restore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/namespaces/{namespace}/restores/{name}/status": {
      "get": {
        "description": "read status of the specified Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta1NamespacedRestoreStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta1NamespacedRestoreStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Restore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta1NamespacedRestoreStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Restore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/placementdecisions": {
      "get": {
        "description": "list objects of kind PlacementDecision",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1PlacementDecisionForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/placements": {
      "get": {
        "description": "list objects of kind Placement",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1PlacementForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta1/restores": {
      "get": {
        "description": "list objects of kind Restore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta1RestoreForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.RestoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/managedclustersetbindings": {
      "get": {
        "description": "list objects of kind ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta2ManagedClusterSetBindingForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/managedclustersets": {
      "get": {
        "description": "list objects of kind ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "post": {
        "description": "create a ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta2CollectionManagedClusterSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/managedclustersets/{name}": {
      "get": {
        "description": "read the specified ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta2ManagedClusterSet",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/managedclustersets/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta2ManagedClusterSetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta2ManagedClusterSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta2ManagedClusterSetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/namespaces/{namespace}/managedclustersetbindings": {
      "get": {
        "description": "list objects of kind ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "listClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "post": {
        "description": "create a ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "createClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta2CollectionNamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/namespaces/{namespace}/managedclustersetbindings/{name}": {
      "get": {
        "description": "read the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSetBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.open-cluster-management.io/v1beta2/namespaces/{namespace}/managedclustersetbindings/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBindingStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterSetBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchClusterOpenClusterManagementIoV1beta2NamespacedManagedClusterSetBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSetBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo"
        ],
        "operationId": "getClusterviewOpenClusterManagementIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/clusterview.open-cluster-management.io/v1": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1"
        ],
        "operationId": "getClusterviewOpenClusterManagementIoV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/clusterview.open-cluster-management.io/v1/managedclusters": {
      "get": {
        "description": "list or watch objects of kind ManagedCluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1"
        ],
        "operationId": "listClusterviewOpenClusterManagementIoV1ManagedCluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedClusterList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1/managedclusters/{name}": {
      "get": {
        "description": "read the specified ManagedCluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1"
        ],
        "operationId": "readClusterviewOpenClusterManagementIoV1ManagedCluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedCluster"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1/watch/managedclusters": {
      "get": {
        "description": "watch individual changes to a list of ManagedCluster. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1"
        ],
        "operationId": "watchClusterviewOpenClusterManagementIoV1ManagedClusterList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1/watch/managedclusters/{name}": {
      "get": {
        "description": "watch changes to an object of kind ManagedCluster. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1"
        ],
        "operationId": "watchClusterviewOpenClusterManagementIoV1ManagedCluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1alpha1": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "getClusterviewOpenClusterManagementIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/clusterview.open-cluster-management.io/v1alpha1/managedclustersets": {
      "get": {
        "description": "list or watch objects of kind ManagedClusterSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listClusterviewOpenClusterManagementIoV1alpha1ManagedClusterSet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1alpha1/managedclustersets/{name}": {
      "get": {
        "description": "read the specified ManagedClusterSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readClusterviewOpenClusterManagementIoV1alpha1ManagedClusterSet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSet"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1alpha1/watch/managedclustersets": {
      "get": {
        "description": "watch individual changes to a list of ManagedClusterSet. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "watchClusterviewOpenClusterManagementIoV1alpha1ManagedClusterSetList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/clusterview.open-cluster-management.io/v1alpha1/watch/managedclustersets/{name}": {
      "get": {
        "description": "watch changes to an object of kind ManagedClusterSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterviewOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "watchClusterviewOpenClusterManagementIoV1alpha1ManagedClusterSet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/config.open-cluster-management.io/v1alpha1/klusterletconfigs": {
      "get": {
        "description": "list objects of kind KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteConfigOpenClusterManagementIoV1alpha1CollectionKlusterletConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.open-cluster-management.io/v1alpha1/klusterletconfigs/{name}": {
      "get": {
        "description": "read the specified KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified KlusterletConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchConfigOpenClusterManagementIoV1alpha1KlusterletConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the KlusterletConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.open-cluster-management.io/v1alpha1/klusterletconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readConfigOpenClusterManagementIoV1alpha1KlusterletConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified KlusterletConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceConfigOpenClusterManagementIoV1alpha1KlusterletConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified KlusterletConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchConfigOpenClusterManagementIoV1alpha1KlusterletConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the KlusterletConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/console.open-cluster-management.io/v1/userpreferences": {
      "get": {
        "description": "list objects of kind UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "listConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreferenceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "post": {
        "description": "create an UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "createConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteConsoleOpenClusterManagementIoV1CollectionUserPreference",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/console.open-cluster-management.io/v1/userpreferences/{name}": {
      "get": {
        "description": "read the specified UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "readConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete an UserPreference",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified UserPreference",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "consoleOpenClusterManagementIo_v1"
        ],
        "operationId": "patchConsoleOpenClusterManagementIoV1UserPreference",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the UserPreference",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/discoveredclusters": {
      "get": {
        "description": "list objects of kind DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1DiscoveredClusterForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/discoveryconfigs": {
      "get": {
        "description": "list objects of kind DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1DiscoveryConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveredclusters": {
      "get": {
        "description": "list objects of kind DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "createDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1CollectionNamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveredclusters/{name}": {
      "get": {
        "description": "read the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified DiscoveredCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveredCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveredclusters/{name}/status": {
      "get": {
        "description": "read status of the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified DiscoveredCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveredCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveryconfigs": {
      "get": {
        "description": "list objects of kind DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "createDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1CollectionNamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveryconfigs/{name}": {
      "get": {
        "description": "read the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified DiscoveryConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveryConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1/namespaces/{namespace}/discoveryconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified DiscoveryConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveryConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/discoveredclusters": {
      "get": {
        "description": "list objects of kind DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1alpha1DiscoveredClusterForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/discoveryconfigs": {
      "get": {
        "description": "list objects of kind DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1alpha1DiscoveryConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveredclusters": {
      "get": {
        "description": "list objects of kind DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1alpha1CollectionNamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveredclusters/{name}": {
      "get": {
        "description": "read the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified DiscoveredCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveredCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveredclusters/{name}/status": {
      "get": {
        "description": "read status of the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified DiscoveredCluster",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified DiscoveredCluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveredClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveredCluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveryconfigs": {
      "get": {
        "description": "list objects of kind DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1alpha1CollectionNamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveryconfigs/{name}": {
      "get": {
        "description": "read the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified DiscoveryConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveryConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/discovery.open-cluster-management.io/v1alpha1/namespaces/{namespace}/discoveryconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified DiscoveryConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified DiscoveryConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "discoveryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchDiscoveryOpenClusterManagementIoV1alpha1NamespacedDiscoveryConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DiscoveryConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/imageregistry.open-cluster-management.io/v1alpha1/managedclusterimageregistries": {
      "get": {
        "description": "list objects of kind ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listImageregistryOpenClusterManagementIoV1alpha1ManagedClusterImageRegistryForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/imageregistry.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusterimageregistries": {
      "get": {
        "description": "list objects of kind ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteImageregistryOpenClusterManagementIoV1alpha1CollectionNamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/imageregistry.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusterimageregistries/{name}": {
      "get": {
        "description": "read the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterImageRegistry",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/imageregistry.open-cluster-management.io/v1alpha1/namespaces/{namespace}/managedclusterimageregistries/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistryStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistryStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterImageRegistry",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "imageregistryOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchImageregistryOpenClusterManagementIoV1alpha1NamespacedManagedClusterImageRegistryStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterImageRegistry",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/internal.open-cluster-management.io/v1beta1/managedclusterinfos": {
      "get": {
        "description": "list objects of kind ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listInternalOpenClusterManagementIoV1beta1ManagedClusterInfoForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfoList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/internal.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterinfos": {
      "get": {
        "description": "list objects of kind ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfoList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteInternalOpenClusterManagementIoV1beta1CollectionNamespacedManagedClusterInfo",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/internal.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterinfos/{name}": {
      "get": {
        "description": "read the specified ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterInfo",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfo",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterInfo",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/internal.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterinfos/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfoStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterInfo",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfoStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterInfo",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "internalOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchInternalOpenClusterManagementIoV1beta1NamespacedManagedClusterInfoStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterInfo",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/multiclusterobservabilities": {
      "get": {
        "description": "list objects of kind MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservabilityList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta1CollectionMultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/multiclusterobservabilities/{name}": {
      "get": {
        "description": "read the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified MultiClusterObservability",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta1MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterObservability",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/multiclusterobservabilities/{name}/status": {
      "get": {
        "description": "read status of the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta1MultiClusterObservabilityStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta1MultiClusterObservabilityStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified MultiClusterObservability",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta1MultiClusterObservabilityStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterObservability",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/namespaces/{namespace}/observabilityaddons": {
      "get": {
        "description": "list objects of kind ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddonList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create an ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta1CollectionNamespacedObservabilityAddon",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/namespaces/{namespace}/observabilityaddons/{name}": {
      "get": {
        "description": "read the specified ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete an ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ObservabilityAddon",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddon",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ObservabilityAddon",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/namespaces/{namespace}/observabilityaddons/{name}/status": {
      "get": {
        "description": "read status of the specified ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddonStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddonStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ObservabilityAddon",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta1NamespacedObservabilityAddonStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ObservabilityAddon",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta1/observabilityaddons": {
      "get": {
        "description": "list objects of kind ObservabilityAddon",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listObservabilityOpenClusterManagementIoV1beta1ObservabilityAddonForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddonList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta2/multiclusterobservabilities": {
      "get": {
        "description": "list objects of kind MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "listObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservabilityList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "post": {
        "description": "create a MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "createObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete collection of MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta2CollectionMultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta2/multiclusterobservabilities/{name}": {
      "get": {
        "description": "read the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "delete": {
        "description": "delete a MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "deleteObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update the specified MultiClusterObservability",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta2MultiClusterObservability",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterObservability",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/observability.open-cluster-management.io/v1beta2/multiclusterobservabilities/{name}/status": {
      "get": {
        "description": "read status of the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "readObservabilityOpenClusterManagementIoV1beta2MultiClusterObservabilityStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "put": {
        "description": "replace status of the specified MultiClusterObservability",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "replaceObservabilityOpenClusterManagementIoV1beta2MultiClusterObservabilityStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "patch": {
        "description": "partially update status of the specified MultiClusterObservability",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "observabilityOpenClusterManagementIo_v1beta2"
        ],
        "operationId": "patchObservabilityOpenClusterManagementIoV1beta2MultiClusterObservabilityStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterObservability",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/clustermanagers": {
      "get": {
        "description": "list objects of kind ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "listOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManagerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "createOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1CollectionClusterManager",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/clustermanagers/{name}": {
      "get": {
        "description": "read the specified ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterManager",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1ClusterManager",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterManager",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/clustermanagers/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1ClusterManagerStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterManager",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1ClusterManagerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterManager",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1ClusterManagerStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterManager",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/klusterlets": {
      "get": {
        "description": "list objects of kind Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "listOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.KlusterletList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "createOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1CollectionKlusterlet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/klusterlets/{name}": {
      "get": {
        "description": "read the specified Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Klusterlet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1Klusterlet",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Klusterlet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/klusterlets/{name}/status": {
      "get": {
        "description": "read status of the specified Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1KlusterletStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified Klusterlet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1KlusterletStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Klusterlet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1KlusterletStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Klusterlet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/multiclusterhubs": {
      "get": {
        "description": "list objects of kind MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "listOperatorOpenClusterManagementIoV1MultiClusterHubForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHubList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/namespaces/{namespace}/multiclusterhubs": {
      "get": {
        "description": "list objects of kind MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "listOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHubList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "createOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1CollectionNamespacedMultiClusterHub",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/namespaces/{namespace}/multiclusterhubs/{name}": {
      "get": {
        "description": "read the specified MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified MultiClusterHub",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1NamespacedMultiClusterHub",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterHub",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/operator.open-cluster-management.io/v1/namespaces/{namespace}/multiclusterhubs/{name}/status": {
      "get": {
        "description": "read status of the specified MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "readOperatorOpenClusterManagementIoV1NamespacedMultiClusterHubStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified MultiClusterHub",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceOperatorOpenClusterManagementIoV1NamespacedMultiClusterHubStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified MultiClusterHub",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "operatorOpenClusterManagementIo_v1"
        ],
        "operationId": "patchOperatorOpenClusterManagementIoV1NamespacedMultiClusterHubStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterHub",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/certificatepolicies": {
      "get": {
        "description": "list objects of kind CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1CertificatePolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/configurationpolicies": {
      "get": {
        "description": "list objects of kind ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1ConfigurationPolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/iampolicies": {
      "get": {
        "description": "list objects of kind IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1IamPolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/certificatepolicies": {
      "get": {
        "description": "list objects of kind CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1CollectionNamespacedCertificatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/certificatepolicies/{name}": {
      "get": {
        "description": "read the specified CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified CertificatePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedCertificatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the CertificatePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/certificatepolicies/{name}/status": {
      "get": {
        "description": "read status of the specified CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedCertificatePolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified CertificatePolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedCertificatePolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified CertificatePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedCertificatePolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the CertificatePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/configurationpolicies": {
      "get": {
        "description": "list objects of kind ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1CollectionNamespacedConfigurationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/configurationpolicies/{name}": {
      "get": {
        "description": "read the specified ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ConfigurationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ConfigurationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/configurationpolicies/{name}/status": {
      "get": {
        "description": "read status of the specified ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified ConfigurationPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedConfigurationPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ConfigurationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedConfigurationPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ConfigurationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/iampolicies": {
      "get": {
        "description": "list objects of kind IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "post": {
        "description": "create an IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1CollectionNamespacedIamPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/iampolicies/{name}": {
      "get": {
        "description": "read the specified IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete an IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified IamPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedIamPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the IamPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/iampolicies/{name}/status": {
      "get": {
        "description": "read status of the specified IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedIamPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified IamPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedIamPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified IamPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedIamPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the IamPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/placementbindings": {
      "get": {
        "description": "list objects of kind PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1CollectionNamespacedPlacementBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/placementbindings/{name}": {
      "get": {
        "description": "read the specified PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified PlacementBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedPlacementBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/placementbindings/{name}/status": {
      "get": {
        "description": "read status of the specified PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedPlacementBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedPlacementBindingStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified PlacementBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedPlacementBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PlacementBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/policies": {
      "get": {
        "description": "list objects of kind Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1CollectionNamespacedPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/policies/{name}": {
      "get": {
        "description": "read the specified Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Policy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Policy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/namespaces/{namespace}/policies/{name}/status": {
      "get": {
        "description": "read status of the specified Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1NamespacedPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1NamespacedPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Policy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1NamespacedPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Policy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/placementbindings": {
      "get": {
        "description": "list objects of kind PlacementBinding",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1PlacementBindingForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1/policies": {
      "get": {
        "description": "list objects of kind Policy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1PolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/operatorpolicies": {
      "get": {
        "description": "list objects of kind OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create an OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1CollectionNamespacedOperatorPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/operatorpolicies/{name}": {
      "get": {
        "description": "read the specified OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete an OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified OperatorPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the OperatorPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/operatorpolicies/{name}/status": {
      "get": {
        "description": "read status of the specified OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified OperatorPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedOperatorPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the OperatorPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policyautomations": {
      "get": {
        "description": "list objects of kind PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1CollectionNamespacedPolicyAutomation",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policyautomations/{name}": {
      "get": {
        "description": "read the specified PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified PolicyAutomation",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomation",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PolicyAutomation",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policyautomations/{name}/status": {
      "get": {
        "description": "read status of the specified PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomationStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified PolicyAutomation",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedPolicyAutomationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PolicyAutomation",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policysets": {
      "get": {
        "description": "list objects of kind PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createPolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1CollectionNamespacedPolicySet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policysets/{name}": {
      "get": {
        "description": "read the specified PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deletePolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified PolicySet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedPolicySet",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PolicySet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/namespaces/{namespace}/policysets/{name}/status": {
      "get": {
        "description": "read status of the specified PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readPolicyOpenClusterManagementIoV1beta1NamespacedPolicySetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replacePolicyOpenClusterManagementIoV1beta1NamespacedPolicySetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified PolicySet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchPolicyOpenClusterManagementIoV1beta1NamespacedPolicySetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PolicySet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/operatorpolicies": {
      "get": {
        "description": "list objects of kind OperatorPolicy",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1OperatorPolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/policyautomations": {
      "get": {
        "description": "list objects of kind PolicyAutomation",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1PolicyAutomationForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.open-cluster-management.io/v1beta1/policysets": {
      "get": {
        "description": "list objects of kind PolicySet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listPolicyOpenClusterManagementIoV1beta1PolicySetForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo"
        ],
        "operationId": "getProxyOpenClusterManagementIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyconfigurations": {
      "get": {
        "description": "list objects of kind ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteProxyOpenClusterManagementIoV1alpha1CollectionManagedProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyconfigurations/{name}": {
      "get": {
        "description": "read the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchProxyOpenClusterManagementIoV1alpha1ManagedProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedProxyConfiguration",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyconfigurations/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readProxyOpenClusterManagementIoV1alpha1ManagedProxyConfigurationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceProxyOpenClusterManagementIoV1alpha1ManagedProxyConfigurationStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedProxyConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchProxyOpenClusterManagementIoV1alpha1ManagedProxyConfigurationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedProxyConfiguration",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyserviceresolvers": {
      "get": {
        "description": "list objects of kind ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolverList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteProxyOpenClusterManagementIoV1alpha1CollectionManagedProxyServiceResolver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyserviceresolvers/{name}": {
      "get": {
        "description": "read the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolver",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedProxyServiceResolver",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1alpha1/managedproxyserviceresolvers/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolverStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolverStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedProxyServiceResolver",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchProxyOpenClusterManagementIoV1alpha1ManagedProxyServiceResolverStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedProxyServiceResolver",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "getProxyOpenClusterManagementIoV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/clusterstatuses": {
      "get": {
        "description": "list objects of kind ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listProxyOpenClusterManagementIoV1beta1ClusterStatusForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.stolostron.multicloud-operators-foundation.pkg.proxyserver.apis.proxy.v1beta1.ClusterStatusList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses": {
      "get": {
        "description": "list objects of kind ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listProxyOpenClusterManagementIoV1beta1NamespacedClusterStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.stolostron.multicloud-operators-foundation.pkg.proxyserver.apis.proxy.v1beta1.ClusterStatusList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses/{name}": {
      "get": {
        "description": "read the specified ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readProxyOpenClusterManagementIoV1beta1NamespacedClusterStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.stolostron.multicloud-operators-foundation.pkg.proxyserver.apis.proxy.v1beta1.ClusterStatus"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses/{name}/aggregator": {
      "get": {
        "description": "connect GET requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1GetNamespacedClusterStatusAggregator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "connect PUT requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1PutNamespacedClusterStatusAggregator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "connect POST requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1PostNamespacedClusterStatusAggregator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1OptionsNamespacedClusterStatusAggregator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses/{name}/aggregator/{path}": {
      "get": {
        "description": "connect GET requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1GetNamespacedClusterStatusAggregatorWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "connect PUT requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1PutNamespacedClusterStatusAggregatorWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "connect POST requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1PostNamespacedClusterStatusAggregatorWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to aggregator of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1OptionsNamespacedClusterStatusAggregatorWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/path-z6Ciiujn"
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses/{name}/log": {
      "get": {
        "description": "connect GET requests to log of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1GetNamespacedClusterStatusLog",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to log of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1OptionsNamespacedClusterStatusLog",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/proxy.open-cluster-management.io/v1beta1/namespaces/{namespace}/clusterstatuses/{name}/log/{path}": {
      "get": {
        "description": "connect GET requests to log of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1GetNamespacedClusterStatusLogWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to log of ClusterStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "proxyOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "connectProxyOpenClusterManagementIoV1beta1OptionsNamespacedClusterStatusLogWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "proxy.open-cluster-management.io",
          "kind": "ClusterStatus",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterStatus",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/path-z6Ciiujn"
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/rbac.open-cluster-management.io/v1alpha1/clusterpermissions": {
      "get": {
        "description": "list objects of kind ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listRbacOpenClusterManagementIoV1alpha1ClusterPermissionForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermissionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/rbac.open-cluster-management.io/v1alpha1/namespaces/{namespace}/clusterpermissions": {
      "get": {
        "description": "list objects of kind ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermissionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteRbacOpenClusterManagementIoV1alpha1CollectionNamespacedClusterPermission",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/rbac.open-cluster-management.io/v1alpha1/namespaces/{namespace}/clusterpermissions/{name}": {
      "get": {
        "description": "read the specified ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterPermission",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermission",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterPermission",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/rbac.open-cluster-management.io/v1alpha1/namespaces/{namespace}/clusterpermissions/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermissionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterPermission",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermissionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterPermission",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchRbacOpenClusterManagementIoV1alpha1NamespacedClusterPermissionStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterPermission",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.open-cluster-management.io/v1alpha1/namespaces/{namespace}/searches": {
      "get": {
        "description": "list objects of kind Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.SearchList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSearchOpenClusterManagementIoV1alpha1CollectionNamespacedSearch",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.open-cluster-management.io/v1alpha1/namespaces/{namespace}/searches/{name}": {
      "get": {
        "description": "read the specified Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified Search",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSearchOpenClusterManagementIoV1alpha1NamespacedSearch",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Search",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.open-cluster-management.io/v1alpha1/namespaces/{namespace}/searches/{name}/status": {
      "get": {
        "description": "read status of the specified Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSearchOpenClusterManagementIoV1alpha1NamespacedSearchStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSearchOpenClusterManagementIoV1alpha1NamespacedSearchStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified Search",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSearchOpenClusterManagementIoV1alpha1NamespacedSearchStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Search",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.open-cluster-management.io/v1alpha1/searches": {
      "get": {
        "description": "list objects of kind Search",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSearchOpenClusterManagementIoV1alpha1SearchForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.SearchList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerconfigs": {
      "get": {
        "description": "list objects of kind SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSubmarineraddonOpenClusterManagementIoV1alpha1CollectionNamespacedSubmarinerConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerconfigs/{name}": {
      "get": {
        "description": "read the specified SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified SubmarinerConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubmarinerConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified SubmarinerConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubmarinerConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerdiagnoseconfigs": {
      "get": {
        "description": "list objects of kind SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSubmarineraddonOpenClusterManagementIoV1alpha1CollectionNamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerdiagnoseconfigs/{name}": {
      "get": {
        "description": "read the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfig",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubmarinerDiagnoseConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/namespaces/{namespace}/submarinerdiagnoseconfigs/{name}/status": {
      "get": {
        "description": "read status of the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfigStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchSubmarineraddonOpenClusterManagementIoV1alpha1NamespacedSubmarinerDiagnoseConfigStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the SubmarinerDiagnoseConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/submarinerconfigs": {
      "get": {
        "description": "list objects of kind SubmarinerConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSubmarineraddonOpenClusterManagementIoV1alpha1SubmarinerConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/submarineraddon.open-cluster-management.io/v1alpha1/submarinerdiagnoseconfigs": {
      "get": {
        "description": "list objects of kind SubmarinerDiagnoseConfig",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "submarineraddonOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listSubmarineraddonOpenClusterManagementIoV1alpha1SubmarinerDiagnoseConfigForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfigList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/view.open-cluster-management.io/v1beta1/managedclusterviews": {
      "get": {
        "description": "list objects of kind ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listViewOpenClusterManagementIoV1beta1ManagedClusterViewForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterViewList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/view.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterviews": {
      "get": {
        "description": "list objects of kind ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "listViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterViewList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "post": {
        "description": "create a ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "createViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete collection of ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteViewOpenClusterManagementIoV1beta1CollectionNamespacedManagedClusterView",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/view.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterviews/{name}": {
      "get": {
        "description": "read the specified ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "delete": {
        "description": "delete a ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "deleteViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ManagedClusterView",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchViewOpenClusterManagementIoV1beta1NamespacedManagedClusterView",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterView",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/view.open-cluster-management.io/v1beta1/namespaces/{namespace}/managedclusterviews/{name}/status": {
      "get": {
        "description": "read status of the specified ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "readViewOpenClusterManagementIoV1beta1NamespacedManagedClusterViewStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace status of the specified ManagedClusterView",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "replaceViewOpenClusterManagementIoV1beta1NamespacedManagedClusterViewStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManagedClusterView",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "viewOpenClusterManagementIo_v1beta1"
        ],
        "operationId": "patchViewOpenClusterManagementIoV1beta1NamespacedManagedClusterViewStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManagedClusterView",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/appliedmanifestworks": {
      "get": {
        "description": "list objects of kind AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "listWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWorkList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "post": {
        "description": "create an AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "createWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1CollectionAppliedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/appliedmanifestworks/{name}": {
      "get": {
        "description": "read the specified AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete an AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified AppliedManifestWork",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1AppliedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AppliedManifestWork",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/appliedmanifestworks/{name}/status": {
      "get": {
        "description": "read status of the specified AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1AppliedManifestWorkStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified AppliedManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1AppliedManifestWorkStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified AppliedManifestWork",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1AppliedManifestWorkStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the AppliedManifestWork",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/manifestworks": {
      "get": {
        "description": "list objects of kind ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "listWorkOpenClusterManagementIoV1ManifestWorkForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWorkList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/namespaces/{namespace}/manifestworks": {
      "get": {
        "description": "list objects of kind ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "listWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWorkList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "post": {
        "description": "create a ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "createWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete collection of ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1CollectionNamespacedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/namespaces/{namespace}/manifestworks/{name}": {
      "get": {
        "description": "read the specified ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "delete": {
        "description": "delete a ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ManifestWork",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1NamespacedManifestWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManifestWork",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1/namespaces/{namespace}/manifestworks/{name}/status": {
      "get": {
        "description": "read status of the specified ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1NamespacedManifestWorkStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified ManifestWork",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1NamespacedManifestWorkStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManifestWork",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1NamespacedManifestWorkStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManifestWork",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1alpha1/manifestworkreplicasets": {
      "get": {
        "description": "list objects of kind ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listWorkOpenClusterManagementIoV1alpha1ManifestWorkReplicaSetForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1alpha1/namespaces/{namespace}/manifestworkreplicasets": {
      "get": {
        "description": "list objects of kind ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "listWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "createWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1alpha1CollectionNamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1alpha1/namespaces/{namespace}/manifestworkreplicasets/{name}": {
      "get": {
        "description": "read the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "deleteWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManifestWorkReplicaSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.open-cluster-management.io/v1alpha1/namespaces/{namespace}/manifestworkreplicasets/{name}/status": {
      "get": {
        "description": "read status of the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "readWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "replaceWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified ManifestWorkReplicaSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workOpenClusterManagementIo_v1alpha1"
        ],
        "operationId": "patchWorkOpenClusterManagementIoV1alpha1NamespacedManifestWorkReplicaSetStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ManifestWorkReplicaSet",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    }
  },
  "definitions": {
    "io.open-cluster-management.action.v1beta1.ManagedClusterAction": {
      "description": "ManagedClusterAction is the action that will be done on a cluster",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired behavior of the action.",
          "type": "object",
          "properties": {
            "actionType": {
              "description": "ActionType is the type of the action",
              "type": "string"
            },
            "kube": {
              "description": "KubeWorkSpec is the action payload to process",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the object",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the object",
                  "type": "string"
                },
                "resource": {
                  "description": "Resource of the object",
                  "type": "string"
                },
                "template": {
                  "description": "ObjectTemplate is the template of the object",
                  "x-kubernetes-embedded-resource": true,
                  "x-kubernetes-preserve-unknown-fields": true
                }
              }
            }
          }
        },
        "status": {
          "description": "Status describes the desired status of the action",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions represents the conditions of this resource on managed cluster",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "result": {
              "description": "Result references the related result of the action",
              "x-kubernetes-embedded-resource": true,
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterAction",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.action.v1beta1.ManagedClusterActionList": {
      "description": "ManagedClusterActionList is a list of ManagedClusterAction",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusteractions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.action.v1beta1.ManagedClusterAction"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "action.open-cluster-management.io",
          "kind": "ManagedClusterActionList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig": {
      "description": "AddOnDeploymentConfig represents a configuration to customize the deployments of an add-on. For example, you can specify the NodePlacement to control the scheduling of the add-on agents.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents a desired configuration for an add-on.",
          "type": "object",
          "properties": {
            "agentInstallNamespace": {
              "description": "AgentInstallNamespace is the namespace where the add-on agent should be installed on the managed cluster.",
              "type": "string",
              "maxLength": 63,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "customizedVariables": {
              "description": "CustomizedVariables is a list of name-value variables for the current add-on deployment. The add-on implementation can use these variables to render its add-on deployment. The default is an empty list.",
              "type": "array",
              "items": {
                "description": "CustomizedVariable represents a customized variable for add-on deployment.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of this variable.",
                    "type": "string",
                    "maxLength": 255,
                    "pattern": "^[a-zA-Z_][_a-zA-Z0-9]*$"
                  },
                  "value": {
                    "description": "Value of this variable.",
                    "type": "string",
                    "maxLength": 1024
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "nodePlacement": {
              "description": "NodePlacement enables explicit control over the scheduling of the add-on agents on the managed cluster. All add-on agent pods are expected to comply with this node placement. If the placement is nil, the placement is not specified, it will be omitted. If the placement is an empty object, the placement will match all nodes and tolerate nothing.",
              "type": "object",
              "properties": {
                "nodeSelector": {
                  "description": "NodeSelector defines which Nodes the Pods are scheduled on. If the selector is an empty list, it will match all nodes. The default is an empty list.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tolerations": {
                  "description": "Tolerations is attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. If the tolerations is an empty list, it will tolerate nothing. The default is an empty list.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "proxyConfig": {
              "description": "ProxyConfig holds proxy settings for add-on agent on the managed cluster. Empty means no proxy settings is available.",
              "type": "object",
              "properties": {
                "caBundle": {
                  "description": "CABundle is a CA certificate bundle to verify the proxy server. And it's only useful when HTTPSProxy is set and a HTTPS proxy server is specified.",
                  "type": "string",
                  "format": "byte"
                },
                "httpProxy": {
                  "description": "HTTPProxy is the URL of the proxy for HTTP requests",
                  "type": "string"
                },
                "httpsProxy": {
                  "description": "HTTPSProxy is the URL of the proxy for HTTPS requests",
                  "type": "string"
                },
                "noProxy": {
                  "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs and/or IPs for which the proxy should not be used.",
                  "type": "string"
                }
              }
            },
            "registries": {
              "description": "Registries describes how to override images used by the addon agent on the managed cluster. the following example will override image \"quay.io/open-cluster-management/addon-agent\" to \"quay.io/ocm/addon-agent\" when deploying the addon agent \n registries: - source: quay.io/open-cluster-management/addon-agent mirror: quay.io/ocm/addon-agent",
              "type": "array",
              "items": {
                "description": "ImageMirror describes how to mirror images from a source",
                "type": "object",
                "required": [
                  "mirror"
                ],
                "properties": {
                  "mirror": {
                    "description": "Mirror is the mirrored registry of the Source. Will be ignored if Mirror is empty.",
                    "type": "string"
                  },
                  "source": {
                    "description": "Source is the source registry. All image registries will be replaced by Mirror if Source is empty.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfig",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfigList": {
      "description": "AddOnDeploymentConfigList is a list of AddOnDeploymentConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of addondeploymentconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnDeploymentConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnDeploymentConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.AddOnTemplate": {
      "description": "AddOnTemplate is the Custom Resource object, it is used to describe how to deploy the addon agent and how to register the addon. \n AddOnTemplate is a cluster-scoped resource, and will only be used on the hub cluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds the registration configuration for the addon and the addon agent resources yaml description.",
          "type": "object",
          "required": [
            "addonName",
            "agentSpec"
          ],
          "properties": {
            "addonName": {
              "description": "AddonName represents the name of the addon which the template belongs to",
              "type": "string"
            },
            "agentSpec": {
              "description": "AgentSpec describes what/how the kubernetes resources of the addon agent to be deployed on a managed cluster.",
              "type": "object",
              "properties": {
                "deleteOption": {
                  "description": "DeleteOption represents deletion strategy when the manifestwork is deleted. Foreground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
                  "type": "object",
                  "properties": {
                    "propagationPolicy": {
                      "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan SelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering ownership from one ManifestWork to another or another management unit. Setting this value will allow a flow like 1. create manifestwork/2 to manage foo 2. update manifestwork/1 to selectively orphan foo 3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                      "type": "string",
                      "enum": [
                        "Foreground",
                        "Orphan",
                        "SelectivelyOrphan"
                      ]
                    },
                    "selectivelyOrphans": {
                      "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                      "type": "object",
                      "properties": {
                        "orphaningRules": {
                          "description": "orphaningRules defines a slice of orphaningrule. Each orphaningrule identifies a single resource included in this manifestwork",
                          "type": "array",
                          "items": {
                            "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                            "type": "object",
                            "required": [
                              "name",
                              "resource"
                            ],
                            "properties": {
                              "group": {
                                "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the Kubernetes resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                                "type": "string"
                              },
                              "resource": {
                                "description": "Resource is the resource name of the Kubernetes resource.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "executor": {
                  "description": "Executor is the configuration that makes the work agent to perform some pre-request processing/checking. e.g. the executor identity tells the work agent to check the executor has sufficient permission to write the workloads to the local managed cluster. Note that nil executor is still supported for backward-compatibility which indicates that the work agent will not perform any additional actions before applying resources.",
                  "type": "object",
                  "properties": {
                    "subject": {
                      "description": "Subject is the subject identity which the work agent uses to talk to the local cluster when applying the resources.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "serviceAccount": {
                          "description": "ServiceAccount is for identifying which service account to use by the work agent. Only required if the type is \"ServiceAccount\".",
                          "type": "object",
                          "required": [
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name is the name of the service account.",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                            },
                            "namespace": {
                              "description": "Namespace is the namespace of the service account.",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                            }
                          }
                        },
                        "type": {
                          "description": "Type is the type of the subject identity. Supported types are: \"ServiceAccount\".",
                          "type": "string",
                          "enum": [
                            "ServiceAccount"
                          ]
                        }
                      }
                    }
                  }
                },
                "manifestConfigs": {
                  "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
                  "type": "array",
                  "items": {
                    "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                    "type": "object",
                    "required": [
                      "resourceIdentifier"
                    ],
                    "properties": {
                      "feedbackRules": {
                        "description": "FeedbackRules defines what resource status field should be returned. If it is not set or empty, no feedback rules will be honored.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "jsonPaths": {
                              "description": "JsonPaths defines the json path under status field to be synced.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "path"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name represents the alias name for this field",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path represents the json path of the field under status. The path must point to a field with single value in the type of integer, bool or string. If the path points to a non-existing field, no value will be returned. If the path points to a structure, map or slice, no value will be returned and the status conddition of StatusFeedBackSynced will be set as false. Ref to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                    "type": "string"
                                  },
                                  "version": {
                                    "description": "Version is the version of the Kubernetes resource. If it is not specified, the resource with the semantically latest version is used to resolve the path.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "type": {
                              "description": "Type defines the option of how status can be returned. It can be jsonPaths or wellKnownStatus. If the type is JSONPaths, user should specify the jsonPaths field If the type is WellKnownStatus, certain common fields of status defined by a rule only for types in in k8s.io/api and open-cluster-management/api will be reported, If these status fields do not exist, no values will be reported.",
                              "type": "string",
                              "enum": [
                                "WellKnownStatus",
                                "JSONPaths"
                              ]
                            }
                          }
                        }
                      },
                      "resourceIdentifier": {
                        "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure. iff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                        "type": "object",
                        "required": [
                          "name",
                          "resource"
                        ],
                        "properties": {
                          "group": {
                            "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the Kubernetes resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource is the resource name of the Kubernetes resource.",
                            "type": "string"
                          }
                        }
                      },
                      "updateStrategy": {
                        "description": "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update if it is not set.",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "serverSideApply": {
                            "description": "serverSideApply defines the configuration for server side apply. It is honored only when type of updateStrategy is ServerSideApply",
                            "type": "object",
                            "properties": {
                              "fieldManager": {
                                "description": "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent as the prefix.",
                                "type": "string",
                                "pattern": "^work-agent"
                              },
                              "force": {
                                "description": "Force represents to force apply the manifest.",
                                "type": "boolean"
                              }
                            }
                          },
                          "type": {
                            "description": "type defines the strategy to update this manifest, default value is Update. Update type means to update resource by an update call. CreateOnly type means do not update resource based on current manifest. ServerSideApply type means to update resource using server side apply with work-controller as the field manager. If there is conflict, the related Applied condition of manifest will be in the status of False with the reason of ApplyConflict.",
                            "type": "string",
                            "enum": [
                              "Update",
                              "CreateOnly",
                              "ServerSideApply"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "workload": {
                  "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                      "type": "array",
                      "items": {
                        "description": "Manifest represents a resource to be deployed on managed cluster.",
                        "x-kubernetes-embedded-resource": true,
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                }
              }
            },
            "registration": {
              "description": "Registration holds the registration configuration for the addon",
              "type": "array",
              "items": {
                "description": "RegistrationSpec describes how to register an addon agent to the hub cluster. With the registration defined, The addon agent can access to kube apiserver with kube style API or other endpoints on hub cluster with client certificate authentication. During the addon registration process, a csr will be created for each Registration on the hub cluster. The CSR will be approved automatically, After the csr is approved on the hub cluster, the klusterlet agent will create a secret in the installNamespace for the addon agent. If the RegistrationType type is KubeClient, the secret name will be \"{addon name}-hub-kubeconfig\" whose content includes key/cert and kubeconfig. Otherwise, If the RegistrationType type is CustomSigner the secret name will be \"{addon name}-{signer name}-client-cert\" whose content includes key/cert.",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "customSigner": {
                    "description": "CustomSigner holds the configuration of the CustomSigner type registration required when the Type is CustomSigner",
                    "type": "object",
                    "required": [
                      "signingCA"
                    ],
                    "properties": {
                      "signerName": {
                        "description": "signerName is the name of signer that addon agent will use to create csr.",
                        "type": "string",
                        "maxLength": 571,
                        "minLength": 5
                      },
                      "signingCA": {
                        "description": "SigningCA represents the reference of the secret on the hub cluster to sign the CSR the secret must be in the namespace where the addon-manager is located, and the secret type must be \"kubernetes.io/tls\" Note: The addon manager will not have permission to access the secret by default, so the user must grant the permission to the addon manager(by creating rolebinding for the addon-manager serviceaccount \"addon-manager-controller-sa\").",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the signing CA secret",
                            "type": "string"
                          }
                        }
                      },
                      "subject": {
                        "description": "Subject is the user subject of the addon agent to be registered to the hub. If it is not set, the addon agent will have the default subject \"subject\": { \"user\": \"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}:agent:{agentName}\", \"groups: [\"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}\", \"system:open-cluster-management:addon:{addonName}\", \"system:authenticated\"] }",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "description": "groups is the user group of the addon agent.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "organizationUnit": {
                            "description": "organizationUnit is the ou of the addon agent",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "user": {
                            "description": "user is the user name of the addon agent.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "kubeClient": {
                    "description": "KubeClient holds the configuration of the KubeClient type registration",
                    "type": "object",
                    "properties": {
                      "hubPermissions": {
                        "description": "HubPermissions represent the permission configurations of the addon agent to access the hub cluster",
                        "type": "array",
                        "items": {
                          "description": "HubPermissionConfig configures the permission of the addon agent to access the hub cluster. Will create a RoleBinding in the same namespace as the managedClusterAddon to bind the user provided ClusterRole/Role to the \"system:open-cluster-management:cluster:<cluster-name>:addon:<addon-name>\" Group.",
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "currentCluster": {
                              "description": "CurrentCluster contains the configuration of CurrentCluster type binding. It is required when the type is CurrentCluster.",
                              "type": "object",
                              "required": [
                                "clusterRoleName"
                              ],
                              "properties": {
                                "clusterRoleName": {
                                  "description": "ClusterRoleName is the name of the clusterrole the addon agent is bound. A rolebinding will be created referring to this cluster role in each cluster namespace. The user must make sure the clusterrole exists on the hub cluster.",
                                  "type": "string"
                                }
                              }
                            },
                            "singleNamespace": {
                              "description": "SingleNamespace contains the configuration of SingleNamespace type binding. It is required when the type is SingleNamespace",
                              "type": "object",
                              "required": [
                                "namespace",
                                "roleRef"
                              ],
                              "properties": {
                                "namespace": {
                                  "description": "Namespace is the namespace the addon agent has permissions to bind to. A rolebinding will be created in this namespace referring to the RoleRef.",
                                  "type": "string"
                                },
                                "roleRef": {
                                  "description": "RoleRef is an reference to the permission resource. it could be a role or a cluster role, the user must make sure it exist on the hub cluster.",
                                  "type": "object",
                                  "required": [
                                    "apiGroup",
                                    "kind",
                                    "name"
                                  ],
                                  "properties": {
                                    "apiGroup": {
                                      "description": "APIGroup is the group for the resource being referenced",
                                      "type": "string"
                                    },
                                    "kind": {
                                      "description": "Kind is the type of resource being referenced",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of resource being referenced",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              }
                            },
                            "type": {
                              "description": "Type of the permissions setting. It defines how to bind the roleRef on the hub cluster. It can be: - CurrentCluster: Bind the roleRef to the namespace with the same name as the managedCluster. - SingleNamespace: Bind the roleRef to the namespace specified by SingleNamespaceBindingConfig.",
                              "type": "string",
                              "enum": [
                                "CurrentCluster",
                                "SingleNamespace"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "type": {
                    "description": "Type of the registration configuration, it supports: - KubeClient: the addon agent can access the hub kube apiserver with kube style API. the signer name should be \"kubernetes.io/kube-apiserver-client\". When this type is used, the KubeClientRegistrationConfig can be used to define the permission of the addon agent to access the hub cluster - CustomSigner: the addon agent can access the hub cluster through user-defined endpoints. When this type is used, the CustomSignerRegistrationConfig can be used to define how to issue the client certificate for the addon agent.",
                    "type": "string",
                    "enum": [
                      "KubeClient",
                      "CustomSigner"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplate",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.AddOnTemplateList": {
      "description": "AddOnTemplateList is a list of AddOnTemplate",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of addontemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.AddOnTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "AddOnTemplateList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn": {
      "description": "ClusterManagementAddOn represents the registration of an add-on to the cluster manager. This resource allows you to discover which add-ons are available for the cluster manager and provides metadata information about the add-ons. The ClusterManagementAddOn name is used for the namespace-scoped ManagedClusterAddOn resource. ClusterManagementAddOn is a cluster-scoped resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents a desired configuration for the agent on the cluster management add-on.",
          "type": "object",
          "properties": {
            "addOnConfiguration": {
              "description": "Deprecated: Use supportedConfigs filed instead addOnConfiguration is a reference to configuration information for the add-on. In scenario where a multiple add-ons share the same add-on CRD, multiple ClusterManagementAddOn resources need to be created and reference the same AddOnConfiguration.",
              "type": "object",
              "properties": {
                "crName": {
                  "description": "crName is the name of the CR used to configure instances of the managed add-on. This field should be configured if add-on CR have a consistent name across the all of the ManagedCluster instaces.",
                  "type": "string"
                },
                "crdName": {
                  "description": "crdName is the name of the CRD used to configure instances of the managed add-on. This field should be configured if the add-on have a CRD that controls the configuration of the add-on.",
                  "type": "string"
                },
                "lastObservedGeneration": {
                  "description": "lastObservedGeneration is the observed generation of the custom resource for the configuration of the addon.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "addOnMeta": {
              "description": "addOnMeta is a reference to the metadata information for the add-on.",
              "type": "object",
              "properties": {
                "description": {
                  "description": "description represents the detailed description of the add-on.",
                  "type": "string"
                },
                "displayName": {
                  "description": "displayName represents the name of add-on that will be displayed.",
                  "type": "string"
                }
              }
            },
            "installStrategy": {
              "description": "InstallStrategy represents that related ManagedClusterAddOns should be installed on certain clusters.",
              "type": "object",
              "properties": {
                "placements": {
                  "description": "Placements is a list of placement references honored when install strategy type is Placements. All clusters selected by these placements will install the addon If one cluster belongs to multiple placements, it will only apply the strategy defined later in the order. That is to say, The latter strategy overrides the previous one.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "configs": {
                        "description": "Configs is the configuration of managedClusterAddon during installation. User can override the configuration by updating the managedClusterAddon directly.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "resource"
                          ],
                          "properties": {
                            "group": {
                              "description": "group of the add-on configuration.",
                              "type": "string"
                            },
                            "name": {
                              "description": "name of the add-on configuration.",
                              "type": "string",
                              "minLength": 1
                            },
                            "namespace": {
                              "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                              "type": "string"
                            },
                            "resource": {
                              "description": "resource of the add-on configuration.",
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the placement",
                        "type": "string",
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "Namespace is the namespace of the placement",
                        "type": "string",
                        "minLength": 1
                      },
                      "rolloutStrategy": {
                        "description": "The rollout strategy to apply addon configurations change. The rollout strategy only watches the addon configurations defined in ClusterManagementAddOn.",
                        "type": "object",
                        "properties": {
                          "all": {
                            "description": "All defines required fields for RolloutStrategy type All",
                            "type": "object",
                            "properties": {
                              "maxFailures": {
                                "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                                "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                "x-kubernetes-int-or-string": true
                              },
                              "minSuccessTime": {
                                "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string"
                              },
                              "progressDeadline": {
                                "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string",
                                "pattern": "^(([0-9])+[h|m|s])|None$"
                              }
                            }
                          },
                          "progressive": {
                            "description": "Progressive defines required fields for RolloutStrategy type Progressive",
                            "type": "object",
                            "properties": {
                              "mandatoryDecisionGroups": {
                                "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
                                "type": "array",
                                "items": {
                                  "description": "MandatoryDecisionGroup set the decision group name or group index. GroupName is considered first to select the decisionGroups then GroupIndex.",
                                  "type": "object",
                                  "properties": {
                                    "groupIndex": {
                                      "description": "GroupIndex of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-index",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "groupName": {
                                      "description": "GroupName of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-name",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "maxConcurrency": {
                                "description": "MaxConcurrency is the max number of clusters to deploy workload concurrently. The default value for MaxConcurrency is determined from the clustersPerDecisionGroup defined in the placement->DecisionStrategy.",
                                "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                "x-kubernetes-int-or-string": true
                              },
                              "maxFailures": {
                                "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                                "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                "x-kubernetes-int-or-string": true
                              },
                              "minSuccessTime": {
                                "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string"
                              },
                              "progressDeadline": {
                                "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string",
                                "pattern": "^(([0-9])+[h|m|s])|None$"
                              }
                            }
                          },
                          "progressivePerGroup": {
                            "description": "ProgressivePerGroup defines required fields for RolloutStrategy type ProgressivePerGroup",
                            "type": "object",
                            "properties": {
                              "mandatoryDecisionGroups": {
                                "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
                                "type": "array",
                                "items": {
                                  "description": "MandatoryDecisionGroup set the decision group name or group index. GroupName is considered first to select the decisionGroups then GroupIndex.",
                                  "type": "object",
                                  "properties": {
                                    "groupIndex": {
                                      "description": "GroupIndex of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-index",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "groupName": {
                                      "description": "GroupName of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-name",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "maxFailures": {
                                "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                                "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                "x-kubernetes-int-or-string": true
                              },
                              "minSuccessTime": {
                                "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string"
                              },
                              "progressDeadline": {
                                "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                "type": "string",
                                "pattern": "^(([0-9])+[h|m|s])|None$"
                              }
                            }
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "All",
                              "Progressive",
                              "ProgressivePerGroup"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "namespace",
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "type": {
                  "description": "Type is the type of the install strategy, it can be: - Manual: no automatic install - Placements: install to clusters selected by placements.",
                  "type": "string",
                  "enum": [
                    "Manual",
                    "Placements"
                  ]
                }
              }
            },
            "supportedConfigs": {
              "description": "supportedConfigs is a list of configuration types supported by add-on. An empty list means the add-on does not require configurations. The default is an empty list",
              "type": "array",
              "items": {
                "description": "ConfigMeta represents a collection of metadata information for add-on configuration.",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "defaultConfig": {
                    "description": "defaultConfig represents the namespace and name of the default add-on configuration. In scenario where all add-ons have a same configuration.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name of the add-on configuration.",
                        "type": "string",
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                        "type": "string"
                      }
                    }
                  },
                  "group": {
                    "description": "group of the add-on configuration.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "group",
                "resource"
              ],
              "x-kubernetes-list-type": "map"
            }
          }
        },
        "status": {
          "description": "status represents the current status of cluster management add-on.",
          "type": "object",
          "properties": {
            "defaultconfigReferences": {
              "description": "defaultconfigReferences is a list of current add-on default configuration references.",
              "type": "array",
              "items": {
                "description": "DefaultConfigReference is a reference to the current add-on configuration. This resource is used to record the configuration resource for the current add-on.",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "desiredConfig": {
                    "description": "desiredConfig record the desired config spec hash.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name of the add-on configuration.",
                        "type": "string",
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                        "type": "string"
                      },
                      "specHash": {
                        "description": "spec hash for an add-on configuration.",
                        "type": "string"
                      }
                    }
                  },
                  "group": {
                    "description": "group of the add-on configuration.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            },
            "installProgressions": {
              "description": "installProgression is a list of current add-on configuration references per placement.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "namespace"
                ],
                "properties": {
                  "conditions": {
                    "description": "conditions describe the state of the managed and monitored components for the operator.",
                    "type": "array",
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    }
                  },
                  "configReferences": {
                    "description": "configReferences is a list of current add-on configuration references.",
                    "type": "array",
                    "items": {
                      "description": "InstallConfigReference is a reference to the current add-on configuration. This resource is used to record the configuration resource for the current add-on.",
                      "type": "object",
                      "required": [
                        "resource"
                      ],
                      "properties": {
                        "desiredConfig": {
                          "description": "desiredConfig record the desired config name and spec hash.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name of the add-on configuration.",
                              "type": "string",
                              "minLength": 1
                            },
                            "namespace": {
                              "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                              "type": "string"
                            },
                            "specHash": {
                              "description": "spec hash for an add-on configuration.",
                              "type": "string"
                            }
                          }
                        },
                        "group": {
                          "description": "group of the add-on configuration.",
                          "type": "string"
                        },
                        "lastAppliedConfig": {
                          "description": "lastAppliedConfig records the config spec hash when the all the corresponding ManagedClusterAddOn are applied successfully.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name of the add-on configuration.",
                              "type": "string",
                              "minLength": 1
                            },
                            "namespace": {
                              "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                              "type": "string"
                            },
                            "specHash": {
                              "description": "spec hash for an add-on configuration.",
                              "type": "string"
                            }
                          }
                        },
                        "lastKnownGoodConfig": {
                          "description": "lastKnownGoodConfig records the last known good config spec hash. For fresh install or rollout with type UpdateAll or RollingUpdate, the lastKnownGoodConfig is the same as lastAppliedConfig. For rollout with type RollingUpdateWithCanary, the lastKnownGoodConfig is the last successfully applied config spec hash of the canary placement.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name of the add-on configuration.",
                              "type": "string",
                              "minLength": 1
                            },
                            "namespace": {
                              "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                              "type": "string"
                            },
                            "specHash": {
                              "description": "spec hash for an add-on configuration.",
                              "type": "string"
                            }
                          }
                        },
                        "resource": {
                          "description": "resource of the add-on configuration.",
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name is the name of the placement",
                    "type": "string",
                    "minLength": 1
                  },
                  "namespace": {
                    "description": "Namespace is the namespace of the placement",
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOn",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOnList": {
      "description": "ClusterManagementAddOnList is a list of ClusterManagementAddOn",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of clustermanagementaddons. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ClusterManagementAddOn"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "ClusterManagementAddOnList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn": {
      "description": "ManagedClusterAddOn is the Custom Resource object which holds the current state of an add-on. This object is used by add-on operators to convey their state. This resource should be created in the ManagedCluster namespace.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds configuration that could apply to any operator.",
          "type": "object",
          "properties": {
            "configs": {
              "description": "configs is a list of add-on configurations. In scenario where the current add-on has its own configurations. An empty list means there are no default configurations for add-on. The default is an empty list",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "resource"
                ],
                "properties": {
                  "group": {
                    "description": "group of the add-on configuration.",
                    "type": "string"
                  },
                  "name": {
                    "description": "name of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  },
                  "namespace": {
                    "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            },
            "installNamespace": {
              "description": "installNamespace is the namespace on the managed cluster to install the addon agent. If it is not set, open-cluster-management-agent-addon namespace is used to install the addon agent.",
              "type": "string",
              "maxLength": 63,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          }
        },
        "status": {
          "description": "status holds the information about the state of an operator.  It is consistent with status information across the Kubernetes ecosystem.",
          "type": "object",
          "properties": {
            "addOnConfiguration": {
              "description": "Deprecated: Use configReferences instead. addOnConfiguration is a reference to configuration information for the add-on. This resource is used to locate the configuration resource for the add-on.",
              "type": "object",
              "properties": {
                "crName": {
                  "description": "crName is the name of the CR used to configure instances of the managed add-on. This field should be configured if add-on CR have a consistent name across the all of the ManagedCluster instaces.",
                  "type": "string"
                },
                "crdName": {
                  "description": "crdName is the name of the CRD used to configure instances of the managed add-on. This field should be configured if the add-on have a CRD that controls the configuration of the add-on.",
                  "type": "string"
                },
                "lastObservedGeneration": {
                  "description": "lastObservedGeneration is the observed generation of the custom resource for the configuration of the addon.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "addOnMeta": {
              "description": "addOnMeta is a reference to the metadata information for the add-on. This should be same as the addOnMeta for the corresponding ClusterManagementAddOn resource.",
              "type": "object",
              "properties": {
                "description": {
                  "description": "description represents the detailed description of the add-on.",
                  "type": "string"
                },
                "displayName": {
                  "description": "displayName represents the name of add-on that will be displayed.",
                  "type": "string"
                }
              }
            },
            "conditions": {
              "description": "conditions describe the state of the managed and monitored components for the operator.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "configReferences": {
              "description": "configReferences is a list of current add-on configuration references. This will be overridden by the clustermanagementaddon configuration references.",
              "type": "array",
              "items": {
                "description": "ConfigReference is a reference to the current add-on configuration. This resource is used to locate the configuration resource for the current add-on.",
                "type": "object",
                "required": [
                  "name",
                  "resource"
                ],
                "properties": {
                  "desiredConfig": {
                    "description": "desiredConfig record the desired config spec hash.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name of the add-on configuration.",
                        "type": "string",
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                        "type": "string"
                      },
                      "specHash": {
                        "description": "spec hash for an add-on configuration.",
                        "type": "string"
                      }
                    }
                  },
                  "group": {
                    "description": "group of the add-on configuration.",
                    "type": "string"
                  },
                  "lastAppliedConfig": {
                    "description": "lastAppliedConfig record the config spec hash when the corresponding ManifestWork is applied successfully.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name of the add-on configuration.",
                        "type": "string",
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                        "type": "string"
                      },
                      "specHash": {
                        "description": "spec hash for an add-on configuration.",
                        "type": "string"
                      }
                    }
                  },
                  "lastObservedGeneration": {
                    "description": "Deprecated: Use LastAppliedConfig instead lastObservedGeneration is the observed generation of the add-on configuration.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  },
                  "namespace": {
                    "description": "namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            },
            "healthCheck": {
              "description": "healthCheck indicates how to check the healthiness status of the current addon. It should be set by each addon implementation, by default, the lease mode will be used.",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "mode indicates which mode will be used to check the healthiness status of the addon.",
                  "type": "string",
                  "enum": [
                    "Lease",
                    "Customized"
                  ]
                }
              }
            },
            "namespace": {
              "description": "namespace is the namespace on the managedcluster to put registration secret or lease for the addon. It is required when registration is set or healthcheck mode is Lease.",
              "type": "string"
            },
            "registrations": {
              "description": "registrations is the configurations for the addon agent to register to hub. It should be set by each addon controller on hub to define how the addon agent on managedcluster is registered. With the registration defined, The addon agent can access to kube apiserver with kube style API or other endpoints on hub cluster with client certificate authentication. A csr will be created per registration configuration. If more than one registrationConfig is defined, a csr will be created for each registration configuration. It is not allowed that multiple registrationConfigs have the same signer name. After the csr is approved on the hub cluster, the klusterlet agent will create a secret in the installNamespace for the registrationConfig. If the signerName is \"kubernetes.io/kube-apiserver-client\", the secret name will be \"{addon name}-hub-kubeconfig\" whose contents includes key/cert and kubeconfig. Otherwise, the secret name will be \"{addon name}-{signer name}-client-cert\" whose contents includes key/cert.",
              "type": "array",
              "items": {
                "description": "RegistrationConfig defines the configuration of the addon agent to register to hub. The Klusterlet agent will create a csr for the addon agent with the registrationConfig.",
                "type": "object",
                "properties": {
                  "signerName": {
                    "description": "signerName is the name of signer that addon agent will use to create csr.",
                    "type": "string",
                    "maxLength": 571,
                    "minLength": 5
                  },
                  "subject": {
                    "description": "subject is the user subject of the addon agent to be registered to the hub. If it is not set, the addon agent will have the default subject \"subject\": { \"user\": \"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}:agent:{agentName}\", \"groups: [\"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}\", \"system:open-cluster-management:addon:{addonName}\", \"system:authenticated\"] }",
                    "type": "object",
                    "properties": {
                      "groups": {
                        "description": "groups is the user group of the addon agent.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "organizationUnit": {
                        "description": "organizationUnit is the ou of the addon agent",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "user": {
                        "description": "user is the user name of the addon agent.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "relatedObjects": {
              "description": "relatedObjects is a list of objects that are \"interesting\" or related to this operator. Common uses are: 1. the detailed resource driving the operator 2. operator namespaces 3. operand namespaces 4. related ClusterManagementAddon resource",
              "type": "array",
              "items": {
                "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                "type": "object",
                "required": [
                  "group",
                  "name",
                  "resource"
                ],
                "properties": {
                  "group": {
                    "description": "group of the referent.",
                    "type": "string"
                  },
                  "name": {
                    "description": "name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace of the referent.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the referent.",
                    "type": "string"
                  }
                }
              }
            },
            "supportedConfigs": {
              "description": "SupportedConfigs is a list of configuration types that are allowed to override the add-on configurations defined in ClusterManagementAddOn spec. The default is an empty list, which means the add-on configurations can not be overridden.",
              "type": "array",
              "items": {
                "description": "ConfigGroupResource represents the GroupResource of the add-on configuration",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "group": {
                    "description": "group of the add-on configuration.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the add-on configuration.",
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "group",
                "resource"
              ],
              "x-kubernetes-list-type": "map"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOn",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOnList": {
      "description": "ManagedClusterAddOnList is a list of ManagedClusterAddOn",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusteraddons. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.addon.v1alpha1.ManagedClusterAddOn"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "addon.open-cluster-management.io",
          "kind": "ManagedClusterAddOnList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfig": {
      "description": "KlusterletAddonConfig is the Schema for the klusterletaddonconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "KlusterletAddonConfigSpec defines the desired state of KlusterletAddonConfig",
          "type": "object",
          "required": [
            "applicationManager",
            "certPolicyController",
            "iamPolicyController",
            "policyController",
            "searchCollector"
          ],
          "properties": {
            "applicationManager": {
              "description": "ApplicationManagerConfig defines the configurations of ApplicationManager addon agent.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled is the flag to enable/disable the addon. default is false.",
                  "type": "boolean"
                },
                "proxyPolicy": {
                  "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
                  "type": "string",
                  "enum": [
                    "Disabled",
                    "OCPGlobalProxy",
                    "CustomProxy"
                  ]
                }
              }
            },
            "certPolicyController": {
              "description": "CertPolicyControllerConfig defines the configurations of CertPolicyController addon agent.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled is the flag to enable/disable the addon. default is false.",
                  "type": "boolean"
                },
                "proxyPolicy": {
                  "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
                  "type": "string",
                  "enum": [
                    "Disabled",
                    "OCPGlobalProxy",
                    "CustomProxy"
                  ]
                }
              }
            },
            "clusterLabels": {
              "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "clusterName": {
              "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
              "type": "string",
              "minLength": 1
            },
            "clusterNamespace": {
              "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
              "type": "string",
              "minLength": 1
            },
            "iamPolicyController": {
              "description": "IAMPolicyControllerConfig defines the configurations of IamPolicyController addon agent.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled is the flag to enable/disable the addon. default is false.",
                  "type": "boolean"
                },
                "proxyPolicy": {
                  "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
                  "type": "string",
                  "enum": [
                    "Disabled",
                    "OCPGlobalProxy",
                    "CustomProxy"
                  ]
                }
              }
            },
            "policyController": {
              "description": "PolicyController defines the configurations of PolicyController addon agent.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled is the flag to enable/disable the addon. default is false.",
                  "type": "boolean"
                },
                "proxyPolicy": {
                  "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
                  "type": "string",
                  "enum": [
                    "Disabled",
                    "OCPGlobalProxy",
                    "CustomProxy"
                  ]
                }
              }
            },
            "proxyConfig": {
              "description": "ProxyConfig defines the cluster-wide proxy configuration of the OCP managed cluster.",
              "type": "object",
              "properties": {
                "httpProxy": {
                  "description": "HTTPProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
                  "type": "string"
                },
                "httpsProxy": {
                  "description": "HTTPSProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
                  "type": "string"
                },
                "noProxy": {
                  "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var. The API Server of Hub cluster should be added here. And If you scale up workers that are not included in the network defined by the networking.machineNetwork[].cidr field from the installation configuration, you must add them to this list to prevent connection issues.",
                  "type": "string"
                }
              }
            },
            "searchCollector": {
              "description": "SearchCollectorConfig defines the configurations of SearchCollector addon agent.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled is the flag to enable/disable the addon. default is false.",
                  "type": "boolean"
                },
                "proxyPolicy": {
                  "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
                  "type": "string",
                  "enum": [
                    "Disabled",
                    "OCPGlobalProxy",
                    "CustomProxy"
                  ]
                }
              }
            },
            "version": {
              "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "KlusterletAddonConfigStatus defines the observed state of KlusterletAddonConfig",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains condition information for the klusterletAddonConfig",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "ocpGlobalProxy": {
              "description": "OCPGlobalProxy is the cluster-wide proxy config of the OCP cluster provisioned by ACM",
              "type": "object",
              "properties": {
                "httpProxy": {
                  "description": "HTTPProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
                  "type": "string"
                },
                "httpsProxy": {
                  "description": "HTTPSProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
                  "type": "string"
                },
                "noProxy": {
                  "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var. The API Server of Hub cluster should be added here. And If you scale up workers that are not included in the network defined by the networking.machineNetwork[].cidr field from the installation configuration, you must add them to this list to prevent connection issues.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfig",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfigList": {
      "description": "KlusterletAddonConfigList is a list of KlusterletAddonConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of klusterletaddonconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "agent.open-cluster-management.io",
          "kind": "KlusterletAddonConfigList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.api.cluster.v1.ClientConfig": {
      "description": "ClientConfig represents the apiserver address of the managed cluster.",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
          "type": "string",
          "format": "byte"
        },
        "url": {
          "description": "URL is the URL of apiserver endpoint of the managed cluster.",
          "type": "string"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1.ManagedCluster": {
      "description": "ManagedCluster represents the desired state and current status of managed cluster. ManagedCluster is a cluster scoped resource. The name is the cluster UID.\n\nThe cluster join process follows a double opt-in process:\n\n1. Agent on managed cluster creates CSR on hub with cluster UID and agent name. 2. Agent on managed cluster creates ManagedCluster on hub. 3. Cluster admin on hub approves the CSR for UID and agent name of the ManagedCluster. 4. Cluster admin sets spec.acceptClient of ManagedCluster to true. 5. Cluster admin on managed cluster creates credential of kubeconfig to hub.\n\nOnce the hub creates the cluster namespace, the Klusterlet agent on the ManagedCluster pushes the credential to the hub to use against the kube-apiserver of the ManagedCluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
        },
        "spec": {
          "description": "Spec represents a desired configuration for the agent on the managed cluster.",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedClusterSpec"
        },
        "status": {
          "description": "Status represents the current status of joined managed cluster",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedClusterStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.api.cluster.v1.ManagedClusterClaim": {
      "description": "ManagedClusterClaim represents a ClusterClaim collected from a managed cluster.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of a ClusterClaim resource on managed cluster. It's a well known or customized name to identify the claim.",
          "type": "string"
        },
        "value": {
          "description": "Value is a claim-dependent string",
          "type": "string"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1.ManagedClusterList": {
      "description": "ManagedClusterList is a collection of managed cluster.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of managed clusters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.api.cluster.v1.ManagedClusterSpec": {
      "description": "ManagedClusterSpec provides the information to securely connect to a remote server and verify its identity.",
      "type": "object",
      "required": [
        "hubAcceptsClient"
      ],
      "properties": {
        "hubAcceptsClient": {
          "description": "hubAcceptsClient represents that hub accepts the joining of Klusterlet agent on the managed cluster with the hub. The default value is false, and can only be set true when the user on hub has an RBAC rule to UPDATE on the virtual subresource of managedclusters/accept. When the value is set true, a namespace whose name is the same as the name of ManagedCluster is created on the hub. This namespace represents the managed cluster, also role/rolebinding is created on the namespace to grant the permision of access from the agent on the managed cluster. When the value is set to false, the namespace representing the managed cluster is deleted.",
          "type": "boolean"
        },
        "leaseDurationSeconds": {
          "description": "LeaseDurationSeconds is used to coordinate the lease update time of Klusterlet agents on the managed cluster. If its value is zero, the Klusterlet agent will update its lease every 60 seconds by default",
          "type": "integer",
          "format": "int32"
        },
        "managedClusterClientConfigs": {
          "description": "ManagedClusterClientConfigs represents a list of the apiserver address of the managed cluster. If it is empty, the managed cluster has no accessible address for the hub to connect with it.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ClientConfig"
          }
        },
        "taints": {
          "description": "Taints is a property of managed cluster that allow the cluster to be repelled when scheduling. Taints, including 'ManagedClusterUnavailable' and 'ManagedClusterUnreachable', can not be added/removed by agent running on the managed cluster; while it's fine to add/remove other taints from either hub cluser or managed cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.Taint"
          }
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1.ManagedClusterStatus": {
      "description": "ManagedClusterStatus represents the current status of joined managed cluster.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "allocatable": {
          "description": "Allocatable represents the total allocatable resources on the managed cluster.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity_v2"
          }
        },
        "capacity": {
          "description": "Capacity represents the total resource capacity from all nodeStatuses on the managed cluster.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity_v2"
          }
        },
        "clusterClaims": {
          "description": "ClusterClaims represents cluster information that a managed cluster claims, for example a unique cluster identifier (id.k8s.io) and kubernetes version (kubeversion.open-cluster-management.io). They are written from the managed cluster. The set of claims is not uniform across a fleet, some claims can be vendor or version specific and may not be included from all managed clusters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedClusterClaim"
          }
        },
        "conditions": {
          "description": "Conditions contains the different condition statuses for this managed cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "version": {
          "description": "Version represents the kubernetes version of the managed cluster.",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1.ManagedClusterVersion"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1.ManagedClusterVersion": {
      "description": "ManagedClusterVersion represents version information about the managed cluster.",
      "type": "object",
      "properties": {
        "kubernetes": {
          "description": "Kubernetes is the kubernetes version of managed cluster.",
          "type": "string"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1.Taint": {
      "description": "The managed cluster this Taint is attached to has the \"effect\" on any placement that does not tolerate the Taint.",
      "type": "object",
      "required": [
        "key",
        "effect",
        "timeAdded"
      ],
      "properties": {
        "effect": {
          "description": "Effect indicates the effect of the taint on placements that do not tolerate the taint. Valid effects are NoSelect, PreferNoSelect and NoSelectIfNew.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key applied to a cluster. e.g. bar or foo.example.com/bar. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
          "type": "string"
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "value": {
          "description": "Value is the taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSelector": {
      "description": "ManagedClusterSelector represents a selector of ManagedClusters",
      "type": "object",
      "properties": {
        "labelSelector": {
          "description": "LabelSelector define the general labelSelector which clusterset will use to select target managedClusters",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "selectorType": {
          "description": "SelectorType could only be \"ExclusiveClusterSetLabel\" or \"LabelSelector\" \"ExclusiveClusterSetLabel\" means to use label \"cluster.open-cluster-management.io/clusterset:<ManagedClusterSet Name>\"\" to select target clusters. \"LabelSelector\" means use labelSelector to select target managedClusters",
          "type": "string"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSet": {
      "description": "ManagedClusterSet defines a group of ManagedClusters that user's workload can run on. A workload can be defined to deployed on a ManagedClusterSet, which mean:\n 1. The workload can run on any ManagedCluster in the ManagedClusterSet\n 2. The workload cannot run on any ManagedCluster outside the ManagedClusterSet\n 3. The service exposed by the workload can be shared in any ManagedCluster in the ManagedClusterSet\n\nIn order to assign a ManagedCluster to a certian ManagedClusterSet, add a label with name `cluster.open-cluster-management.io/clusterset` on the ManagedCluster to refers to the ManagedClusterSet. User is not allow to add/remove this label on a ManagedCluster unless they have a RBAC rule to CREATE on a virtual subresource of managedclustersets/join. In order to update this label, user must have the permission on both the old and new ManagedClusterSet.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
        },
        "spec": {
          "description": "Spec defines the attributes of the ManagedClusterSet",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetSpec"
        },
        "status": {
          "description": "Status represents the current status of the ManagedClusterSet",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetList": {
      "description": "ManagedClusterSetList is a collection of ManagedClusterSet.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ManagedClusterSet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "clusterview.open-cluster-management.io",
          "kind": "ManagedClusterSetList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetSpec": {
      "description": "ManagedClusterSetSpec describes the attributes of the ManagedClusterSet",
      "type": "object",
      "properties": {
        "clusterSelector": {
          "description": "ClusterSelector represents a selector of ManagedClusters",
          "$ref": "#/definitions/io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSelector"
        }
      }
    },
    "io.open-cluster-management.api.cluster.v1beta2.ManagedClusterSetStatus": {
      "description": "ManagedClusterSetStatus represents the current status of the ManagedClusterSet.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contains the different condition statuses for this ManagedClusterSet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        }
      }
    },
    "io.open-cluster-management.apps.v1.Channel": {
      "description": "Channel is the Schema for the channels API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ChannelSpec defines the desired state of Channel",
          "type": "object",
          "required": [
            "pathname",
            "type"
          ],
          "properties": {
            "configMapRef": {
              "description": "Reference to a ConfigMap which contains additional settings for accessing the channel. For example, the `insecureSkipVerify` option for accessing HTTPS endpoints can be set in the ConfigMap to indicate a insecure connection.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "gates": {
              "description": "Criteria for promoting a Deployable from the sourceNamespaces to Channel.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "The annotations which must present on a Deployable for it to be eligible for promotion.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labelSelector": {
                  "description": "A label selector for selecting the Deployables.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "insecureSkipVerify": {
              "description": "Skip server TLS certificate verification for Git or Helm channel.",
              "type": "boolean"
            },
            "pathname": {
              "description": "For a `namespace` channel, pathname is the name of the namespace; For a `helmrepo` or `github` channel, pathname is the remote URL for the channel contents; For a `objectbucket` channel, pathname is the URL and name of the bucket.",
              "type": "string"
            },
            "secretRef": {
              "description": "For a `github` channel or a `helmrepo` channel on github, this can be used to reference a Secret which contains the credentials for authentication, i.e. `user` and `accessToken`. For a `objectbucket` channel, this can be used to reference a Secret which contains the AWS credentials, i.e. `AccessKeyID` and `SecretAccessKey`.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "sourceNamespaces": {
              "description": "A list of namespace names from which Deployables can be promoted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "description": "ChannelType defines types of channel",
              "type": "string",
              "enum": [
                "Namespace",
                "HelmRepo",
                "ObjectBucket",
                "GitHub",
                "Git",
                "namespace",
                "helmrepo",
                "objectbucket",
                "github",
                "git"
              ]
            }
          }
        },
        "status": {
          "description": "The most recent observed status of the Channel.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "Channel",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.ChannelList": {
      "description": "ChannelList is a list of Channel",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of channels. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "ChannelList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.Deployable": {
      "description": "Deployable is the Schema for the deployables API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "DeployableSpec defines the desired state of Deployable.",
          "type": "object",
          "required": [
            "template"
          ],
          "properties": {
            "channels": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "dependencies": {
              "type": "array",
              "items": {
                "description": "Dependency of Deployable Properties field is the flexiblity for different Kind.",
                "type": "object",
                "properties": {
                  "annotations": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "labels": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                }
              }
            },
            "overrides": {
              "type": "array",
              "items": {
                "description": "Overrides field in deployable.",
                "type": "object",
                "required": [
                  "clusterName",
                  "clusterOverrides"
                ],
                "properties": {
                  "clusterName": {
                    "type": "string"
                  },
                  "clusterOverrides": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              }
            },
            "placement": {
              "description": "Placement field to be referenced in specs, align with Fedv2, add placementref",
              "type": "object",
              "properties": {
                "clusterSelector": {
                  "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "clusters": {
                  "type": "array",
                  "items": {
                    "description": "GenericClusterReference - in alignment with kubefed",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "local": {
                  "type": "boolean"
                },
                "placementRef": {
                  "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "fieldPath": {
                      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "template": {
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "DeployableStatus defines the observed state of Deployable.",
          "type": "object",
          "required": [
            "phase"
          ],
          "properties": {
            "lastUpdateTime": {
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "type": "string"
            },
            "phase": {
              "description": "DeployablePhase indicate the phase of a deployable.",
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "resourceStatus": {
              "x-kubernetes-preserve-unknown-fields": true
            },
            "targetClusters": {
              "type": "object",
              "additionalProperties": {
                "description": "ResourceUnitStatus aggregates status from target clusters.",
                "type": "object",
                "required": [
                  "phase"
                ],
                "properties": {
                  "lastUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "phase": {
                    "description": "DeployablePhase indicate the phase of a deployable.",
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "resourceStatus": {
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "Deployable",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.DeployableList": {
      "description": "DeployableList is a list of Deployable",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of deployables. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Deployable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "DeployableList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.HelmRelease": {
      "description": "HelmRelease is the Schema for the subscriptionreleases API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "repo": {
          "description": "HelmReleaseRepo defines the repository of HelmRelease",
          "type": "object",
          "properties": {
            "altSource": {
              "description": "AltSource holds the url toward the helm-chart",
              "type": "object",
              "properties": {
                "configMapRef": {
                  "description": "Configuration parameters to access the helm-repo defined in the CatalogSource",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "fieldPath": {
                      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                      "type": "string"
                    }
                  }
                },
                "git": {
                  "description": "Git provides the parameters to access the helm-chart located in a git repo",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string"
                    },
                    "chartPath": {
                      "type": "string"
                    },
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "github": {
                  "description": "GitHub provides the parameters to access the helm-chart located in a github repo",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string"
                    },
                    "chartPath": {
                      "type": "string"
                    },
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "helmRepo": {
                  "description": "HelmRepo provides the urls to retrieve the helm-chart",
                  "type": "object",
                  "properties": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "insecureSkipVerify": {
                  "description": "InsecureSkipVerify is used to skip repo server's TLS certificate verification",
                  "type": "boolean"
                },
                "secretRef": {
                  "description": "Secret to use to access the helm-repo defined in the CatalogSource.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "fieldPath": {
                      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                      "type": "string"
                    }
                  }
                },
                "type": {
                  "description": "SourceTypeEnum types of sources",
                  "type": "string"
                }
              }
            },
            "chartName": {
              "description": "ChartName is the name of the chart within the repo",
              "type": "string"
            },
            "configMapRef": {
              "description": "Configuration parameters to access the helm-repo defined in the CatalogSource",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "digest": {
              "description": "Digest is the helm repo chart digest",
              "type": "string"
            },
            "insecureSkipVerify": {
              "description": "InsecureSkipVerify is used to skip repo server's TLS certificate verification",
              "type": "boolean"
            },
            "secretRef": {
              "description": "Secret to use to access the helm-repo defined in the CatalogSource.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "source": {
              "description": "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html Source holds the url toward the helm-chart",
              "type": "object",
              "properties": {
                "git": {
                  "description": "Git provides the parameters to access the helm-chart located in a git repo",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string"
                    },
                    "chartPath": {
                      "type": "string"
                    },
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "github": {
                  "description": "GitHub provides the parameters to access the helm-chart located in a github repo",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string"
                    },
                    "chartPath": {
                      "type": "string"
                    },
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "helmRepo": {
                  "description": "HelmRepo provides the urls to retrieve the helm-chart",
                  "type": "object",
                  "properties": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "type": {
                  "description": "SourceTypeEnum types of sources",
                  "type": "string"
                }
              }
            },
            "version": {
              "description": "Version is the chart version",
              "type": "string"
            },
            "watchNamespaceScopedResources": {
              "description": "WatchNamespaceScopedResources is used to enable watching namespace scope Helm chart resources",
              "type": "boolean"
            }
          }
        },
        "spec": {
          "x-kubernetes-preserve-unknown-fields": true
        },
        "status": {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "deployedRelease": {
              "type": "object",
              "properties": {
                "manifest": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmRelease",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.HelmReleaseList": {
      "description": "HelmReleaseList is a list of HelmRelease",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.HelmRelease"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "HelmReleaseList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.PlacementRule": {
      "description": "PlacementRule is the Schema for the placementrules API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "PlacementRuleSpec defines the desired state of PlacementRule",
          "type": "object",
          "properties": {
            "clusterConditions": {
              "type": "array",
              "items": {
                "description": "ClusterConditionFilter defines filter to filter cluster condition",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "clusterReplicas": {
              "description": "number of replicas Application wants to",
              "type": "integer",
              "format": "int32"
            },
            "clusterSelector": {
              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "clusters": {
              "type": "array",
              "items": {
                "description": "GenericClusterReference - in alignment with kubefed",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "policies": {
              "description": "Set Policy Filters",
              "type": "array",
              "items": {
                "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                }
              }
            },
            "resourceHint": {
              "description": "Select Resource",
              "type": "object",
              "properties": {
                "order": {
                  "description": "SelectionOrder is the type for Nodes",
                  "type": "string"
                },
                "type": {
                  "description": "ResourceType defines types can be sorted",
                  "type": "string"
                }
              }
            },
            "schedulerName": {
              "description": "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file schedulerName, default to use mcm controller",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "PlacementRuleStatus defines the observed state of PlacementRule",
          "type": "object",
          "properties": {
            "decisions": {
              "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
              "type": "array",
              "items": {
                "description": "PlacementDecision defines the decision made by controller",
                "type": "object",
                "properties": {
                  "clusterName": {
                    "type": "string"
                  },
                  "clusterNamespace": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRule",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.PlacementRuleList": {
      "description": "PlacementRuleList is a list of PlacementRule",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of placementrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "PlacementRuleList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.Subscription": {
      "description": "Subscription is the Schema for the subscriptions API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "SubscriptionSpec defines the desired state of Subscription",
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "allow": {
              "description": "To allow deployment of listed resources",
              "type": "array",
              "items": {
                "description": "Set of kubernetes group resources allowed to be deployed",
                "type": "object",
                "required": [
                  "apiVersion",
                  "kinds"
                ],
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "kinds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "channel": {
              "type": "string"
            },
            "deny": {
              "description": "To deny deployment of listed resources",
              "type": "array",
              "items": {
                "description": "Set of kubernetes group resources not allowed to be deployed",
                "type": "object",
                "required": [
                  "apiVersion",
                  "kinds"
                ],
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "kinds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "hooksecretref": {
              "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "To specify 1 package in channel",
              "type": "string"
            },
            "overrides": {
              "description": "for hub use only to specify the overrides when apply to clusters",
              "type": "array",
              "items": {
                "description": "Overrides field in deployable",
                "type": "object",
                "required": [
                  "clusterName",
                  "clusterOverrides"
                ],
                "properties": {
                  "clusterName": {
                    "type": "string"
                  },
                  "clusterOverrides": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              }
            },
            "packageFilter": {
              "description": "To specify more than 1 package in channel",
              "type": "object",
              "properties": {
                "annotations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "filterRef": {
                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    }
                  }
                },
                "labelSelector": {
                  "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "version": {
                  "type": "string"
                }
              }
            },
            "packageOverrides": {
              "description": "To provide flexibility to override package in channel with local input",
              "type": "array",
              "items": {
                "description": "Overrides field in deployable",
                "type": "object",
                "required": [
                  "packageName"
                ],
                "properties": {
                  "packageAlias": {
                    "type": "string"
                  },
                  "packageName": {
                    "type": "string"
                  },
                  "packageOverrides": {
                    "type": "array",
                    "items": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              }
            },
            "placement": {
              "description": "For hub use only, to specify which clusters to go to",
              "type": "object",
              "properties": {
                "clusterSelector": {
                  "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "clusters": {
                  "type": "array",
                  "items": {
                    "description": "GenericClusterReference - in alignment with kubefed",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "local": {
                  "type": "boolean"
                },
                "placementRef": {
                  "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "fieldPath": {
                      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "secondaryChannel": {
              "type": "string"
            },
            "timewindow": {
              "description": "help user control when the subscription will take affect",
              "type": "object",
              "properties": {
                "daysofweek": {
                  "description": "weekdays defined the day of the week for this time window https://golang.org/pkg/time/#Weekday",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "hours": {
                  "type": "array",
                  "items": {
                    "description": "HourRange time format for each time will be Kitchen format, defined at https://golang.org/pkg/time/#pkg-constants",
                    "type": "object",
                    "properties": {
                      "end": {
                        "type": "string"
                      },
                      "start": {
                        "type": "string"
                      }
                    }
                  }
                },
                "location": {
                  "description": "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
                  "type": "string"
                },
                "windowtype": {
                  "description": "active time window or not, if timewindow is active, then deploy will only applies during these windows Note, if you want to generation crd with operator-sdk v0.10.0, then the following line should be: <+kubebuilder:validation:Enum=active,blocked,Active,Blocked>",
                  "type": "string",
                  "enum": [
                    "active",
                    "blocked",
                    "Active",
                    "Blocked"
                  ]
                }
              }
            },
            "watchHelmNamespaceScopedResources": {
              "description": "WatchHelmNamespaceScopedResources is used to enable watching namespace scope Helm chart resources",
              "type": "boolean"
            }
          }
        },
        "status": {
          "description": "SubscriptionStatus defines the observed state of Subscription Examples - status of a subscription on hub Status: \tphase: Propagated \tstatuses: \t  washdc: \t\tpackages: \t\t  nginx: \t\t\tphase: Subscribed \t\t  mongodb: \t\t\tphase: Failed \t\t\tReason: \"not authorized\" \t\t\tMessage: \"user xxx does not have permission to start pod\" \t\t\tresourceStatus: {}    toronto: \t\tpackages: \t\t  nginx: \t\t\tphase: Subscribed \t\t  mongodb: \t\t\tphase: Subscribed Status of a subscription on managed cluster will only have 1 cluster in the map.",
          "type": "object",
          "properties": {
            "ansiblejobs": {
              "type": "object",
              "properties": {
                "lastposthookjob": {
                  "type": "string"
                },
                "lastprehookjob": {
                  "type": "string"
                },
                "posthookjobshistory": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "prehookjobshistory": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "appstatusReference": {
              "type": "string"
            },
            "lastUpdateTime": {
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "type": "string"
            },
            "phase": {
              "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "statuses": {
              "description": "For endpoint, it is the status of subscription, key is packagename, For hub, it aggregates all status, key is cluster name",
              "type": "object",
              "additionalProperties": {
                "description": "SubscriptionPerClusterStatus defines status for subscription in each cluster, key is package name",
                "type": "object",
                "properties": {
                  "packages": {
                    "type": "object",
                    "additionalProperties": {
                      "description": "SubscriptionUnitStatus defines status of a unit (subscription or package)",
                      "type": "object",
                      "required": [
                        "lastUpdateTime"
                      ],
                      "properties": {
                        "lastUpdateTime": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase are Propagated if it is in hub or Subscribed if it is in endpoint",
                          "type": "string"
                        },
                        "reason": {
                          "type": "string"
                        },
                        "resourceStatus": {
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "Subscription",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1.SubscriptionList": {
      "description": "SubscriptionList is a list of Subscription",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport": {
      "description": "MulticlusterApplicationSetReport is the Schema for the MulticlusterApplicationSetReport API.",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "statuses": {
          "description": "AppConditions defines all the error/warning conditions in all clusters per application",
          "type": "object",
          "properties": {
            "clusterConditions": {
              "type": "array",
              "items": {
                "description": "ClusterCondition defines all the error/warning conditions in one cluster per application",
                "type": "object",
                "properties": {
                  "app": {
                    "type": "string"
                  },
                  "cluster": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "description": "Condition defines a type of error/warning",
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "healthStatus": {
                    "type": "string"
                  },
                  "syncStatus": {
                    "type": "string"
                  }
                }
              }
            },
            "resources": {
              "type": "array",
              "items": {
                "description": "ResourceRef defines a kind of resource",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  }
                }
              }
            },
            "summary": {
              "description": "Summary provides a summary of results",
              "type": "object",
              "properties": {
                "clusters": {
                  "description": "Clusters provides the count of all managed clusters the application is deployed to",
                  "type": "string"
                },
                "healthy": {
                  "description": "Healthy provides the count of healthy applications",
                  "type": "string"
                },
                "inProgress": {
                  "description": "InProgress provides the count of applications that are in the process of being deployed",
                  "type": "string"
                },
                "notHealthy": {
                  "description": "NotHealthy provides the count of non-healthy applications",
                  "type": "string"
                },
                "notSynced": {
                  "description": "NotSynced provides the count of the out of sync applications",
                  "type": "string"
                },
                "synced": {
                  "description": "Synced provides the count of synced applications",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReport",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReportList": {
      "description": "MulticlusterApplicationSetReportList is a list of MulticlusterApplicationSetReport",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of multiclusterapplicationsetreports. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.MulticlusterApplicationSetReport"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "MulticlusterApplicationSetReportList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.SubscriptionReport": {
      "description": "SubscriptionReport is the Schema for the subscriptionreports API",
      "type": "object",
      "required": [
        "reportType"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "reportType": {
          "description": "ReportType is the name or identifier of the type of report",
          "type": "string",
          "enum": [
            "Application",
            "Cluster"
          ]
        },
        "resources": {
          "description": "Resources is an optional reference to the subscription resources",
          "type": "array",
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": "string"
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": "string"
              }
            }
          }
        },
        "results": {
          "description": "SubscriptionReportResult provides result details",
          "type": "array",
          "items": {
            "description": "SubscriptionReportResult provides the result for an individual subscription",
            "type": "object",
            "properties": {
              "result": {
                "description": "Result indicates the outcome of the subscription deployment",
                "type": "string",
                "enum": [
                  "deployed",
                  "failed",
                  "propagationFailed"
                ]
              },
              "source": {
                "description": "Source is an identifier for the subscription",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp indicates the time the result was found",
                "type": "object",
                "required": [
                  "nanos",
                  "seconds"
                ],
                "properties": {
                  "nanos": {
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "seconds": {
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "summary": {
          "description": "SubscriptionReportSummary provides a summary of results",
          "type": "object",
          "properties": {
            "clusters": {
              "description": "Clusters provides the count of all managed clusters the subscription is deployed to",
              "type": "string"
            },
            "deployed": {
              "description": "Deployed provides the count of subscriptions that deployed successfully",
              "type": "string"
            },
            "failed": {
              "description": "Failed provides the count of subscriptions that failed to deploy",
              "type": "string"
            },
            "inProgress": {
              "description": "InProgress provides the count of subscriptions that are in the process of being deployed",
              "type": "string"
            },
            "propagationFailed": {
              "description": "PropagationFailed provides the count of subscriptions that failed to propagate to a managed cluster",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReport",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.SubscriptionReportList": {
      "description": "SubscriptionReportList is a list of SubscriptionReport",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of subscriptionreports. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionReport"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionReportList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.SubscriptionStatus": {
      "description": "SubscriptionStatus defines the status of package deployments",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "statuses": {
          "description": "Statuses represents all the resources deployed by the subscription per cluster",
          "type": "object",
          "properties": {
            "packages": {
              "type": "array",
              "items": {
                "description": "SubscriptionUnitStatus defines status of a package deployment.",
                "type": "object",
                "required": [
                  "lastUpdateTime"
                ],
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "lastUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "phase": {
                    "description": "PackagePhase defines the phasing of a Package",
                    "type": "string"
                  }
                }
              }
            },
            "subscription": {
              "type": "object",
              "properties": {
                "lastUpdateTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "message": {
                  "type": "string"
                },
                "phase": {
                  "description": "SubscriptionPhase defines the phase of the overall subscription",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatus",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1alpha1.SubscriptionStatusList": {
      "description": "SubscriptionStatusList is a list of SubscriptionStatus",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of subscriptionstatuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1alpha1.SubscriptionStatus"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "SubscriptionStatusList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1beta1.GitOpsCluster": {
      "description": "GitOpsCluster is the Schema for the gitopsclusters API.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "GitOpsClusterSpec defines the desired state of GitOpsCluster.",
          "type": "object",
          "required": [
            "argoServer",
            "placementRef"
          ],
          "properties": {
            "argoServer": {
              "description": "ArgoServerSpec defines a argo server installed in a managed cluster.",
              "type": "object",
              "required": [
                "argoNamespace"
              ],
              "properties": {
                "argoNamespace": {
                  "type": "string"
                },
                "cluster": {
                  "type": "string"
                }
              }
            },
            "createBlankClusterSecrets": {
              "type": "boolean"
            },
            "createPolicyTemplate": {
              "type": "boolean"
            },
            "managedServiceAccountRef": {
              "description": "ManagedServiceAccountRef defines managed service account in the managed cluster namespace used to create the ArgoCD cluster secret.",
              "type": "string"
            },
            "placementRef": {
              "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. \n Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "GitOpsClusterStatus defines the observed state of GitOpsCluster.",
          "type": "object",
          "properties": {
            "lastUpdateTime": {
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "type": "string"
            },
            "phase": {
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsCluster",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.apps.v1beta1.GitOpsClusterList": {
      "description": "GitOpsClusterList is a list of GitOpsCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of gitopsclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1beta1.GitOpsCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.open-cluster-management.io",
          "kind": "GitOpsClusterList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount": {
      "description": "ManagedServiceAccount is the Schema for the managedserviceaccounts API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ManagedServiceAccountSpec defines the desired state of ManagedServiceAccount",
          "type": "object",
          "required": [
            "rotation"
          ],
          "properties": {
            "rotation": {
              "description": "Rotation is the policy for rotation the credentials.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled prescribes whether the ServiceAccount token will be rotated from the upstream",
                  "type": "boolean"
                },
                "validity": {
                  "description": "Validity is the duration for which the signed ServiceAccount token is valid.",
                  "type": "string"
                }
              }
            },
            "ttlSecondsAfterCreation": {
              "description": "ttlSecondsAfterCreation limits the lifetime of a ManagedServiceAccount. If the ttlSecondsAfterCreation field is set, the ManagedServiceAccount will be automatically deleted regardless of the ManagedServiceAccount's status. When the ManagedServiceAccount is deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the ManagedServiceAccount won't be automatically deleted. If this field is set to zero, the ManagedServiceAccount becomes eligible for deletion immediately after its creation. In order to use ttlSecondsAfterCreation, the EphemeralIdentity feature gate must be enabled.",
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          }
        },
        "status": {
          "description": "ManagedServiceAccountStatus defines the observed state of ManagedServiceAccount",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions is the condition list.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "expirationTimestamp": {
              "description": "ExpirationTimestamp is the time when the token will expire.",
              "type": "string",
              "format": "date-time"
            },
            "tokenSecretRef": {
              "description": "TokenSecretRef is a reference to the corresponding ServiceAccount's Secret, which stores the CA certficate and token from the managed cluster.",
              "type": "object",
              "required": [
                "lastRefreshTimestamp",
                "name"
              ],
              "properties": {
                "lastRefreshTimestamp": {
                  "description": "LastRefreshTimestamp is the timestamp indicating when the token in the Secret is refreshed.",
                  "type": "string",
                  "format": "date-time"
                },
                "name": {
                  "description": "Name is the name of the referenced secret.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccountList": {
      "description": "ManagedServiceAccountList is a list of ManagedServiceAccount",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedserviceaccounts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.authentication.v1alpha1.ManagedServiceAccount"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccountList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount": {
      "description": "ManagedServiceAccount is the Schema for the managedserviceaccounts API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ManagedServiceAccountSpec defines the desired state of ManagedServiceAccount",
          "type": "object",
          "required": [
            "rotation"
          ],
          "properties": {
            "rotation": {
              "description": "Rotation is the policy for rotation the credentials.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled prescribes whether the ServiceAccount token will be rotated from the upstream",
                  "type": "boolean"
                },
                "validity": {
                  "description": "Validity is the duration for which the signed ServiceAccount token is valid.",
                  "type": "string"
                }
              }
            },
            "ttlSecondsAfterCreation": {
              "description": "ttlSecondsAfterCreation limits the lifetime of a ManagedServiceAccount. If the ttlSecondsAfterCreation field is set, the ManagedServiceAccount will be automatically deleted regardless of the ManagedServiceAccount's status. When the ManagedServiceAccount is deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the ManagedServiceAccount won't be automatically deleted. If this field is set to zero, the ManagedServiceAccount becomes eligible for deletion immediately after its creation. In order to use ttlSecondsAfterCreation, the EphemeralIdentity feature gate must be enabled.",
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          }
        },
        "status": {
          "description": "ManagedServiceAccountStatus defines the observed state of ManagedServiceAccount",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions is the condition list.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "expirationTimestamp": {
              "description": "ExpirationTimestamp is the time when the token will expire.",
              "type": "string",
              "format": "date-time"
            },
            "tokenSecretRef": {
              "description": "TokenSecretRef is a reference to the corresponding ServiceAccount's Secret, which stores the CA certficate and token from the managed cluster.",
              "type": "object",
              "required": [
                "lastRefreshTimestamp",
                "name"
              ],
              "properties": {
                "lastRefreshTimestamp": {
                  "description": "LastRefreshTimestamp is the timestamp indicating when the token in the Secret is refreshed.",
                  "type": "string",
                  "format": "date-time"
                },
                "name": {
                  "description": "Name is the name of the referenced secret.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccount",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.authentication.v1beta1.ManagedServiceAccountList": {
      "description": "ManagedServiceAccountList is a list of ManagedServiceAccount",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedserviceaccounts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.authentication.v1beta1.ManagedServiceAccount"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.open-cluster-management.io",
          "kind": "ManagedServiceAccountList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1.ManagedCluster": {
      "description": "ManagedCluster represents the desired state and current status of a managed cluster. ManagedCluster is a cluster-scoped resource. The name is the cluster UID. \n The cluster join process is a double opt-in process. See the following join process steps: \n 1. The agent on the managed cluster creates a CSR on the hub with the cluster UID and agent name. 2. The agent on the managed cluster creates a ManagedCluster on the hub. 3. The cluster admin on the hub cluster approves the CSR for the UID and agent name of the ManagedCluster. 4. The cluster admin sets the spec.acceptClient of the ManagedCluster to true. 5. The cluster admin on the managed cluster creates a credential of the kubeconfig for the hub cluster. \n After the hub cluster creates the cluster namespace, the klusterlet agent on the ManagedCluster pushes the credential to the hub cluster to use against the kube-apiserver of the ManagedCluster.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired configuration for the agent on the managed cluster.",
          "type": "object",
          "properties": {
            "hubAcceptsClient": {
              "description": "hubAcceptsClient represents that hub accepts the joining of Klusterlet agent on the managed cluster with the hub. The default value is false, and can only be set true when the user on hub has an RBAC rule to UPDATE on the virtual subresource of managedclusters/accept. When the value is set true, a namespace whose name is the same as the name of ManagedCluster is created on the hub. This namespace represents the managed cluster, also role/rolebinding is created on the namespace to grant the permision of access from the agent on the managed cluster. When the value is set to false, the namespace representing the managed cluster is deleted.",
              "type": "boolean"
            },
            "leaseDurationSeconds": {
              "description": "LeaseDurationSeconds is used to coordinate the lease update time of Klusterlet agents on the managed cluster. If its value is zero, the Klusterlet agent will update its lease every 60 seconds by default",
              "type": "integer",
              "format": "int32"
            },
            "managedClusterClientConfigs": {
              "description": "ManagedClusterClientConfigs represents a list of the apiserver address of the managed cluster. If it is empty, the managed cluster has no accessible address for the hub to connect with it.",
              "type": "array",
              "items": {
                "description": "ClientConfig represents the apiserver address of the managed cluster. TODO include credential to connect to managed cluster kube-apiserver",
                "type": "object",
                "properties": {
                  "caBundle": {
                    "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
                    "type": "string",
                    "format": "byte"
                  },
                  "url": {
                    "description": "URL is the URL of apiserver endpoint of the managed cluster.",
                    "type": "string"
                  }
                }
              }
            },
            "taints": {
              "description": "Taints is a property of managed cluster that allow the cluster to be repelled when scheduling. Taints, including 'ManagedClusterUnavailable' and 'ManagedClusterUnreachable', can not be added/removed by agent running on the managed cluster; while it's fine to add/remove other taints from either hub cluser or managed cluster.",
              "type": "array",
              "items": {
                "description": "The managed cluster this Taint is attached to has the \"effect\" on any placement that does not tolerate the Taint.",
                "type": "object",
                "required": [
                  "effect",
                  "key"
                ],
                "properties": {
                  "effect": {
                    "description": "Effect indicates the effect of the taint on placements that do not tolerate the taint. Valid effects are NoSelect, PreferNoSelect and NoSelectIfNew.",
                    "type": "string",
                    "enum": [
                      "NoSelect",
                      "PreferNoSelect",
                      "NoSelectIfNew"
                    ]
                  },
                  "key": {
                    "description": "Key is the taint key applied to a cluster. e.g. bar or foo.example.com/bar. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  },
                  "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added.",
                    "format": "date-time"
                  },
                  "value": {
                    "description": "Value is the taint value corresponding to the taint key.",
                    "type": "string",
                    "maxLength": 1024
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represents the current status of joined managed cluster",
          "type": "object",
          "properties": {
            "allocatable": {
              "description": "Allocatable represents the total allocatable resources on the managed cluster.",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "capacity": {
              "description": "Capacity represents the total resource capacity from all nodeStatuses on the managed cluster.",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              }
            },
            "clusterClaims": {
              "description": "ClusterClaims represents cluster information that a managed cluster claims, for example a unique cluster identifier (id.k8s.io) and kubernetes version (kubeversion.open-cluster-management.io). They are written from the managed cluster. The set of claims is not uniform across a fleet, some claims can be vendor or version specific and may not be included from all managed clusters.",
              "type": "array",
              "items": {
                "description": "ManagedClusterClaim represents a ClusterClaim collected from a managed cluster.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name is the name of a ClusterClaim resource on managed cluster. It's a well known or customized name to identify the claim.",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "value": {
                    "description": "Value is a claim-dependent string",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1
                  }
                }
              }
            },
            "conditions": {
              "description": "Conditions contains the different condition statuses for this managed cluster.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "version": {
              "description": "Version represents the kubernetes version of the managed cluster.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes is the kubernetes version of managed cluster.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedCluster",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterList": {
      "description": "ManagedClusterList is a list of ManagedCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore": {
      "description": "AddOnPlacementScore represents a bundle of scores of one managed cluster, which could be used by placement. AddOnPlacementScore is a namespace scoped resource. The namespace of the resource is the cluster namespace.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status represents the status of the AddOnPlacementScore.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contain the different condition statuses for this AddOnPlacementScore.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "type"
              ],
              "x-kubernetes-list-type": "map"
            },
            "scores": {
              "description": "Scores contain a list of score name and value of this managed cluster.",
              "type": "array",
              "items": {
                "description": "AddOnPlacementScoreItem represents the score name and value.",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "Name is the name of the score",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is the value of the score. The score range is from -100 to 100.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "minimum": -100
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "validUntil": {
              "description": "ValidUntil defines the valid time of the scores. After this time, the scores are considered to be invalid by placement. nil means never expire. The controller owning this resource should keep the scores up-to-date.",
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScore",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreList": {
      "description": "AddOnPlacementScoreList is a list of AddOnPlacementScore",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of addonplacementscores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "AddOnPlacementScoreList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1alpha1.ClusterClaim": {
      "description": "ClusterClaim represents cluster information that a managed cluster claims ClusterClaims with well known names include, 1. id.k8s.io, it contains a unique identifier for the cluster. 2. clusterset.k8s.io, it contains an identifier that relates the cluster to the ClusterSet in which it belongs. \n ClusterClaims created on a managed cluster will be collected and saved into the status of the corresponding ManagedCluster on hub.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of the ClusterClaim.",
          "type": "object",
          "properties": {
            "value": {
              "description": "Value is a claim-dependent string",
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaim",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1alpha1.ClusterClaimList": {
      "description": "ClusterClaimList is a list of ClusterClaim",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of clusterclaims. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterClaimList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.BackupSchedule": {
      "description": "BackupSchedule is the Schema for the backup schedules API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "BackupScheduleSpec defines the desired state of BackupSchedule",
          "type": "object",
          "required": [
            "veleroSchedule"
          ],
          "properties": {
            "managedServiceAccountTTL": {
              "description": "Used in combination with the UseManagedServiceAccount property When UseManagedServiceAccount is set to true, defines the TTL for the generated token If not defined and UseManagedServiceAccount is set to true, it defaults to a value using veleroTTL",
              "type": "string"
            },
            "noBackupOnStart": {
              "description": "If not defined, the value is set to false. Set this to true if you don't want to have backups created immediately after the velero schedules are created Keep in mind that if you choose not to create ACM backups immediately after the schedules are generated the validation policy will show a violation until backups are generated as defined by the cron job. Also, if backups are not generated immediately, the BackupSchedule will always get into a BackupCollision state during reconcile, if another hub had generated backups to the same storage location. Reconcile will find the ACM backups with newer timestamp and generated by another hub so it will assume another hub currently writes data to the same storage location.",
              "type": "boolean"
            },
            "useManagedServiceAccount": {
              "description": "Set this to true if you want to use the ManagedServiceAccount token to auto connect imported clusters on the restored hub. For this option to work, the user must first enable the managedserviceaccount component on the MultiClusterHub If not defined, the value is set to false. If this option is set to true, the backup controller will create ManagedServiceAccount for each managed cluster connected on the primary hub using the import cluster option see https://github.com/stolostron/managed-serviceaccount#what-is-managed-service-account The token generated by the ManagedServiceAccount will have a TTL defaulted using the backup veleroTTL option When set to false, all ManagedServiceAccounts created by the backup controller are being removed",
              "type": "boolean"
            },
            "veleroSchedule": {
              "description": "Schedule is a Cron expression defining when to run the Velero Backup",
              "type": "string"
            },
            "veleroTtl": {
              "description": "TTL is a time.Duration-parseable string describing how long the Velero Backup should be retained for. If not specified the maximum default value set by velero is used - 720h",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "BackupScheduleStatus defines the observed state of BackupSchedule",
          "type": "object",
          "properties": {
            "lastMessage": {
              "description": "Message on the last operation",
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current phase of the schedule",
              "type": "string"
            },
            "veleroScheduleCredentials": {
              "description": "Velero Schedule for backing up credentials",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "spec": {
                  "description": "ScheduleSpec defines the specification for a Velero schedule",
                  "type": "object",
                  "required": [
                    "schedule",
                    "template"
                  ],
                  "properties": {
                    "schedule": {
                      "description": "Schedule is a Cron expression defining when to run the Backup.",
                      "type": "string"
                    },
                    "template": {
                      "description": "Template is the definition of the Backup to be run on the provided schedule",
                      "type": "object",
                      "properties": {
                        "defaultVolumesToRestic": {
                          "description": "DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.",
                          "type": "boolean"
                        },
                        "excludedNamespaces": {
                          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup."
                        },
                        "excludedResources": {
                          "description": "ExcludedResources is a slice of resource names that are not included in the backup."
                        },
                        "hooks": {
                          "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
                          "type": "object",
                          "properties": {
                            "resources": {
                              "description": "Resources are hooks that should be executed when backing up individual instances of a resource."
                            }
                          }
                        },
                        "includeClusterResources": {
                          "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup."
                        },
                        "includedNamespaces": {
                          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included."
                        },
                        "includedResources": {
                          "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included."
                        },
                        "labelSelector": {
                          "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional."
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "orLabelSelectors": {
                          "description": "OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used."
                        },
                        "orderedResources": {
                          "description": "OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format \"namespace/resourcename\".  For cluster resources, simply use \"resourcename\".",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "snapshotVolumes": {
                          "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup."
                        },
                        "storageLocation": {
                          "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
                          "type": "string"
                        },
                        "ttl": {
                          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
                          "type": "string"
                        },
                        "volumeSnapshotLocations": {
                          "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "useOwnerReferencesInBackup": {
                      "description": "UseOwnerReferencesBackup specifies whether to use OwnerReferences on backups created by this Schedule."
                    }
                  }
                },
                "status": {
                  "description": "ScheduleStatus captures the current state of a Velero schedule",
                  "type": "object",
                  "properties": {
                    "lastBackup": {
                      "description": "LastBackup is the last time a Backup was run for this Schedule schedule",
                      "format": "date-time"
                    },
                    "phase": {
                      "description": "Phase is the current phase of the Schedule",
                      "type": "string",
                      "enum": [
                        "New",
                        "Enabled",
                        "FailedValidation"
                      ]
                    },
                    "validationErrors": {
                      "description": "ValidationErrors is a slice of all validation errors (if applicable)",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "veleroScheduleManagedClusters": {
              "description": "Velero Schedule for backing up remote clusters",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "spec": {
                  "description": "ScheduleSpec defines the specification for a Velero schedule",
                  "type": "object",
                  "required": [
                    "schedule",
                    "template"
                  ],
                  "properties": {
                    "schedule": {
                      "description": "Schedule is a Cron expression defining when to run the Backup.",
                      "type": "string"
                    },
                    "template": {
                      "description": "Template is the definition of the Backup to be run on the provided schedule",
                      "type": "object",
                      "properties": {
                        "defaultVolumesToRestic": {
                          "description": "DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.",
                          "type": "boolean"
                        },
                        "excludedNamespaces": {
                          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup."
                        },
                        "excludedResources": {
                          "description": "ExcludedResources is a slice of resource names that are not included in the backup."
                        },
                        "hooks": {
                          "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
                          "type": "object",
                          "properties": {
                            "resources": {
                              "description": "Resources are hooks that should be executed when backing up individual instances of a resource."
                            }
                          }
                        },
                        "includeClusterResources": {
                          "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup."
                        },
                        "includedNamespaces": {
                          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included."
                        },
                        "includedResources": {
                          "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included."
                        },
                        "labelSelector": {
                          "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional."
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "orLabelSelectors": {
                          "description": "OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used."
                        },
                        "orderedResources": {
                          "description": "OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format \"namespace/resourcename\".  For cluster resources, simply use \"resourcename\".",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "snapshotVolumes": {
                          "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup."
                        },
                        "storageLocation": {
                          "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
                          "type": "string"
                        },
                        "ttl": {
                          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
                          "type": "string"
                        },
                        "volumeSnapshotLocations": {
                          "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "useOwnerReferencesInBackup": {
                      "description": "UseOwnerReferencesBackup specifies whether to use OwnerReferences on backups created by this Schedule."
                    }
                  }
                },
                "status": {
                  "description": "ScheduleStatus captures the current state of a Velero schedule",
                  "type": "object",
                  "properties": {
                    "lastBackup": {
                      "description": "LastBackup is the last time a Backup was run for this Schedule schedule",
                      "format": "date-time"
                    },
                    "phase": {
                      "description": "Phase is the current phase of the Schedule",
                      "type": "string",
                      "enum": [
                        "New",
                        "Enabled",
                        "FailedValidation"
                      ]
                    },
                    "validationErrors": {
                      "description": "ValidationErrors is a slice of all validation errors (if applicable)",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "veleroScheduleResources": {
              "description": "Velero Schedule for backing up other resources",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "spec": {
                  "description": "ScheduleSpec defines the specification for a Velero schedule",
                  "type": "object",
                  "required": [
                    "schedule",
                    "template"
                  ],
                  "properties": {
                    "schedule": {
                      "description": "Schedule is a Cron expression defining when to run the Backup.",
                      "type": "string"
                    },
                    "template": {
                      "description": "Template is the definition of the Backup to be run on the provided schedule",
                      "type": "object",
                      "properties": {
                        "defaultVolumesToRestic": {
                          "description": "DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.",
                          "type": "boolean"
                        },
                        "excludedNamespaces": {
                          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup."
                        },
                        "excludedResources": {
                          "description": "ExcludedResources is a slice of resource names that are not included in the backup."
                        },
                        "hooks": {
                          "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
                          "type": "object",
                          "properties": {
                            "resources": {
                              "description": "Resources are hooks that should be executed when backing up individual instances of a resource."
                            }
                          }
                        },
                        "includeClusterResources": {
                          "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup."
                        },
                        "includedNamespaces": {
                          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included."
                        },
                        "includedResources": {
                          "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included."
                        },
                        "labelSelector": {
                          "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional."
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "orLabelSelectors": {
                          "description": "OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used."
                        },
                        "orderedResources": {
                          "description": "OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format \"namespace/resourcename\".  For cluster resources, simply use \"resourcename\".",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "snapshotVolumes": {
                          "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup."
                        },
                        "storageLocation": {
                          "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
                          "type": "string"
                        },
                        "ttl": {
                          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
                          "type": "string"
                        },
                        "volumeSnapshotLocations": {
                          "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "useOwnerReferencesInBackup": {
                      "description": "UseOwnerReferencesBackup specifies whether to use OwnerReferences on backups created by this Schedule."
                    }
                  }
                },
                "status": {
                  "description": "ScheduleStatus captures the current state of a Velero schedule",
                  "type": "object",
                  "properties": {
                    "lastBackup": {
                      "description": "LastBackup is the last time a Backup was run for this Schedule schedule",
                      "format": "date-time"
                    },
                    "phase": {
                      "description": "Phase is the current phase of the Schedule",
                      "type": "string",
                      "enum": [
                        "New",
                        "Enabled",
                        "FailedValidation"
                      ]
                    },
                    "validationErrors": {
                      "description": "ValidationErrors is a slice of all validation errors (if applicable)",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupSchedule",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.BackupScheduleList": {
      "description": "BackupScheduleList is a list of BackupSchedule",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of backupschedules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.BackupSchedule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "BackupScheduleList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterCurator": {
      "description": "ClusterCurator is the Schema for the clustercurators API This kind allows for prehook and posthook jobs to be executed prior to Hive provisioning and import of a cluster.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "operation": {
          "description": "Operation contains information about a requested or running operation",
          "type": "object",
          "properties": {
            "retryPosthook": {
              "description": "Option for retrying a failed posthook job",
              "type": "string",
              "enum": [
                "installPosthook",
                "upgradePosthook"
              ]
            }
          }
        },
        "spec": {
          "description": "ClusterCuratorSpec defines the desired state of ClusterCurator",
          "type": "object",
          "properties": {
            "curatorJob": {
              "description": "Kubernetes job resource created for curation of a cluster",
              "type": "string"
            },
            "desiredCuration": {
              "description": "This is the desired curation that will occur",
              "type": "string",
              "enum": [
                "install",
                "scale",
                "upgrade",
                "destroy",
                "delete-cluster-namespace"
              ]
            },
            "destroy": {
              "description": "During an destroy curation run these **Pre hook ONLY**",
              "type": "object",
              "properties": {
                "jobMonitorTimeout": {
                  "description": "JobMonitorTimeout defines the timeout for finding a job, the unit of this is minute. If job is found, the curator controller waits until the job becomes active. By default, it is 5 minutes If its value is less than or equal to zero, the default value will be used.",
                  "type": "integer"
                },
                "overrideJob": {
                  "description": "When provided, this is a Job specification and overrides the default flow",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "posthook": {
                  "description": "Jobs to run after the cluster import",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "prehook": {
                  "description": "Jobs to run before the cluster deployment",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "towerAuthSecret": {
                  "description": "TowerAuthSecret is ansible secret used in template to run in tower",
                  "type": "string"
                }
              }
            },
            "install": {
              "description": "During an install curation run these Pre/Post hooks",
              "type": "object",
              "properties": {
                "jobMonitorTimeout": {
                  "description": "JobMonitorTimeout defines the timeout for finding a job, the unit of this is minute. If job is found, the curator controller waits until the job becomes active. By default, it is 5 minutes If its value is less than or equal to zero, the default value will be used.",
                  "type": "integer"
                },
                "overrideJob": {
                  "description": "When provided, this is a Job specification and overrides the default flow",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "posthook": {
                  "description": "Jobs to run after the cluster import",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "prehook": {
                  "description": "Jobs to run before the cluster deployment",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "towerAuthSecret": {
                  "description": "TowerAuthSecret is ansible secret used in template to run in tower",
                  "type": "string"
                }
              }
            },
            "inventory": {
              "description": "Inventory values are supplied for use with the pre/post jobs.",
              "type": "string"
            },
            "providerCredentialPath": {
              "description": "Points to the Cloud Provider or Ansible Provider secret, format: namespace/secretName",
              "type": "string"
            },
            "scale": {
              "description": "During an scale curation run these Pre/Post hooks",
              "type": "object",
              "properties": {
                "jobMonitorTimeout": {
                  "description": "JobMonitorTimeout defines the timeout for finding a job, the unit of this is minute. If job is found, the curator controller waits until the job becomes active. By default, it is 5 minutes If its value is less than or equal to zero, the default value will be used.",
                  "type": "integer"
                },
                "overrideJob": {
                  "description": "When provided, this is a Job specification and overrides the default flow",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "posthook": {
                  "description": "Jobs to run after the cluster import",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "prehook": {
                  "description": "Jobs to run before the cluster deployment",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "towerAuthSecret": {
                  "description": "TowerAuthSecret is ansible secret used in template to run in tower",
                  "type": "string"
                }
              }
            },
            "upgrade": {
              "description": "During an upgrade curation run these",
              "type": "object",
              "properties": {
                "channel": {
                  "description": "Channel is an identifier for explicitly requesting that a non-default set of updates be applied to this cluster. The default channel will be contain stable updates that are appropriate for production clusters.",
                  "type": "string"
                },
                "desiredUpdate": {
                  "description": "DesiredUpdate indicates the desired value of the cluster version. Setting this value will trigger an upgrade (if the current version does not match the desired version).",
                  "type": "string"
                },
                "monitorTimeout": {
                  "description": "MonitorTimeout defines the monitor process timeout, the unit of this is minute. By default, it is 120 minutes If its value is less than or equal to zero, the default value will be used.",
                  "type": "integer"
                },
                "overrideJob": {
                  "description": "When provided, this is a Job specification and overrides the default flow",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "posthook": {
                  "description": "Jobs to run after the cluster upgrade",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "prehook": {
                  "description": "Jobs to run before the cluster upgrade",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "extra_vars": {
                        "description": "Ansible job extra_vars is passed to the Ansible job at execution time and is a known Ansible entity.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "job_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should be run.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the Ansible Template to run in Tower as a job",
                        "type": "string"
                      },
                      "skip_tags": {
                        "description": "A comma-separated list of tags to specify which sets of ansible tasks in a job should not be run.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the Hook. For Job type, Ansible job template will be used. For Workflow type, Ansible workflow template will be used. If omitted, default to Job type.",
                        "type": "string",
                        "enum": [
                          "Job",
                          "Workflow"
                        ]
                      }
                    }
                  }
                },
                "towerAuthSecret": {
                  "description": "TowerAuthSecret is ansible secret used in template to run in tower",
                  "type": "string"
                },
                "upstream": {
                  "description": "Upstream may be used to specify the preferred update server. By default it will use the appropriate update server for the cluster and region.",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "ClusterCuratorStatus defines the observed state of ClusterCurator work",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Track the conditions for each step in the desired curation that is being executed as a job",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCurator",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterCuratorList": {
      "description": "ClusterCuratorList is a list of ClusterCurator",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of clustercurators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterCurator"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ClusterCuratorList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.Placement": {
      "description": "Placement defines a rule to select a set of ManagedClusters from the ManagedClusterSets bound to the placement namespace. \n Here is how the placement policy combines with other selection methods to determine a matching list of ManagedClusters: 1. Kubernetes clusters are registered with hub as cluster-scoped ManagedClusters; 2. ManagedClusters are organized into cluster-scoped ManagedClusterSets; 3. ManagedClusterSets are bound to workload namespaces; 4. Namespace-scoped Placements specify a slice of ManagedClusterSets which select a working set of potential ManagedClusters; 5. Then Placements subselect from that working set using label/claim selection. \n A ManagedCluster will not be selected if no ManagedClusterSet is bound to the placement namespace. A user is able to bind a ManagedClusterSet to a namespace by creating a ManagedClusterSetBinding in that namespace if they have an RBAC rule to CREATE on the virtual subresource of `managedclustersets/bind`. \n A slice of PlacementDecisions with the label cluster.open-cluster-management.io/placement={placement name} will be created to represent the ManagedClusters selected by this placement. \n If a ManagedCluster is selected and added into the PlacementDecisions, other components may apply workload on it; once it is removed from the PlacementDecisions, the workload applied on this ManagedCluster should be evicted accordingly.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of Placement.",
          "type": "object",
          "properties": {
            "clusterSets": {
              "description": "ClusterSets represent the ManagedClusterSets from which the ManagedClusters are selected. If the slice is empty, ManagedClusters will be selected from the ManagedClusterSets bound to the placement namespace, otherwise ManagedClusters will be selected from the intersection of this slice and the ManagedClusterSets bound to the placement namespace.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "decisionStrategy": {
              "description": "DecisionStrategy divide the created placement decision to groups and define number of clusters per decision group.",
              "type": "object",
              "properties": {
                "groupStrategy": {
                  "description": "GroupStrategy define strategies to divide selected clusters to decision groups.",
                  "type": "object",
                  "properties": {
                    "clustersPerDecisionGroup": {
                      "description": "ClustersPerDecisionGroup is a specific number or percentage of the total selected clusters. The specific number will divide the placementDecisions to decisionGroups each group has max number of clusters equal to that specific number. The percentage will divide the placementDecisions to decisionGroups each group has max number of clusters based on the total num of selected clusters and percentage. ex; for a total 100 clusters selected, ClustersPerDecisionGroup equal to 20% will divide the placement decision to 5 groups each group should have 20 clusters. Default is having all clusters in a single group. \n The predefined decisionGroups is expected to be a subset of the selected clusters and the number of items in each group SHOULD be less than ClustersPerDecisionGroup. Once the number of items exceeds the ClustersPerDecisionGroup, the decisionGroups will also be be divided into multiple decisionGroups with same GroupName but different GroupIndex.",
                      "pattern": "^((100|[1-9][0-9]{0,1})%|[1-9][0-9]*)$",
                      "x-kubernetes-int-or-string": true
                    },
                    "decisionGroups": {
                      "description": "DecisionGroups represents a list of predefined groups to put decision results. Decision groups will be constructed based on the DecisionGroups field at first. The clusters not included in the DecisionGroups will be divided to other decision groups afterwards. Each decision group should not have the number of clusters larger than the ClustersPerDecisionGroup.",
                      "type": "array",
                      "items": {
                        "description": "DecisionGroup define a subset of clusters that will be added to placementDecisions with groupName label.",
                        "type": "object",
                        "required": [
                          "groupClusterSelector",
                          "groupName"
                        ],
                        "properties": {
                          "groupClusterSelector": {
                            "description": "LabelSelector to select clusters subset by label.",
                            "type": "object",
                            "properties": {
                              "claimSelector": {
                                "description": "ClaimSelector represents a selector of ManagedClusters by clusterClaims in status",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of cluster claim selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "labelSelector": {
                                "description": "LabelSelector represents a selector of ManagedClusters by label",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          },
                          "groupName": {
                            "description": "Group name to be added as label value to the created placement Decisions labels with label key cluster.open-cluster-management.io/decision-group-name",
                            "type": "string",
                            "pattern": "^[a-zA-Z0-9][-A-Za-z0-9_.]{0,61}[a-zA-Z0-9]$"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "numberOfClusters": {
              "description": "NumberOfClusters represents the desired number of ManagedClusters to be selected which meet the placement requirements. 1) If not specified, all ManagedClusters which meet the placement requirements (including ClusterSets, and Predicates) will be selected; 2) Otherwise if the nubmer of ManagedClusters meet the placement requirements is larger than NumberOfClusters, a random subset with desired number of ManagedClusters will be selected; 3) If the nubmer of ManagedClusters meet the placement requirements is equal to NumberOfClusters, all of them will be selected; 4) If the nubmer of ManagedClusters meet the placement requirements is less than NumberOfClusters, all of them will be selected, and the status of condition `PlacementConditionSatisfied` will be set to false;",
              "type": "integer",
              "format": "int32"
            },
            "predicates": {
              "description": "Predicates represent a slice of predicates to select ManagedClusters. The predicates are ORed.",
              "type": "array",
              "items": {
                "description": "ClusterPredicate represents a predicate to select ManagedClusters.",
                "type": "object",
                "properties": {
                  "requiredClusterSelector": {
                    "description": "RequiredClusterSelector represents a selector of ManagedClusters by label and claim. If specified, 1) Any ManagedCluster, which does not match the selector, should not be selected by this ClusterPredicate; 2) If a selected ManagedCluster (of this ClusterPredicate) ceases to match the selector (e.g. due to an update) of any ClusterPredicate, it will be eventually removed from the placement decisions; 3) If a ManagedCluster (not selected previously) starts to match the selector, it will either be selected or at least has a chance to be selected (when NumberOfClusters is specified);",
                    "type": "object",
                    "properties": {
                      "claimSelector": {
                        "description": "ClaimSelector represents a selector of ManagedClusters by clusterClaims in status",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of cluster claim selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "labelSelector": {
                        "description": "LabelSelector represents a selector of ManagedClusters by label",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  }
                }
              }
            },
            "prioritizerPolicy": {
              "description": "PrioritizerPolicy defines the policy of the prioritizers. If this field is unset, then default prioritizer mode and configurations are used. Referring to PrioritizerPolicy to see more description about Mode and Configurations.",
              "type": "object",
              "properties": {
                "configurations": {
                  "type": "array",
                  "items": {
                    "description": "PrioritizerConfig represents the configuration of prioritizer",
                    "type": "object",
                    "required": [
                      "scoreCoordinate"
                    ],
                    "properties": {
                      "scoreCoordinate": {
                        "description": "ScoreCoordinate represents the configuration of the prioritizer and score source.",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "addOn": {
                            "description": "When type is \"AddOn\", AddOn defines the resource name and score name.",
                            "type": "object",
                            "required": [
                              "resourceName",
                              "scoreName"
                            ],
                            "properties": {
                              "resourceName": {
                                "description": "ResourceName defines the resource name of the AddOnPlacementScore. The placement prioritizer selects AddOnPlacementScore CR by this name.",
                                "type": "string"
                              },
                              "scoreName": {
                                "description": "ScoreName defines the score name inside AddOnPlacementScore. AddOnPlacementScore contains a list of score name and score value, ScoreName specify the score to be used by the prioritizer.",
                                "type": "string"
                              }
                            }
                          },
                          "builtIn": {
                            "description": "BuiltIn defines the name of a BuiltIn prioritizer. Below are the valid BuiltIn prioritizer names. 1) Balance: balance the decisions among the clusters. 2) Steady: ensure the existing decision is stabilized. 3) ResourceAllocatableCPU & ResourceAllocatableMemory: sort clusters based on the allocatable. 4) Spread: spread the workload evenly to topologies.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type defines the type of the prioritizer score. Type is either \"BuiltIn\", \"AddOn\" or \"\", where \"\" is \"BuiltIn\" by default. When the type is \"BuiltIn\", need to specify a BuiltIn prioritizer name in BuiltIn. When the type is \"AddOn\", need to configure the score source in AddOn.",
                            "type": "string",
                            "enum": [
                              "BuiltIn",
                              "AddOn"
                            ]
                          }
                        }
                      },
                      "weight": {
                        "description": "Weight defines the weight of the prioritizer score. The value must be ranged in [-10,10]. Each prioritizer will calculate an integer score of a cluster in the range of [-100, 100]. The final score of a cluster will be sum(weight * prioritizer_score). A higher weight indicates that the prioritizer weights more in the cluster selection, while 0 weight indicates that the prioritizer is disabled. A negative weight indicates wants to select the last ones.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 10,
                        "minimum": -10
                      }
                    }
                  }
                },
                "mode": {
                  "description": "Mode is either Exact, Additive, \"\" where \"\" is Additive by default. In Additive mode, any prioritizer not explicitly enumerated is enabled in its default Configurations, in which Steady and Balance prioritizers have the weight of 1 while other prioritizers have the weight of 0. Additive doesn't require configuring all prioritizers. The default Configurations may change in the future, and additional prioritization will happen. In Exact mode, any prioritizer not explicitly enumerated is weighted as zero. Exact requires knowing the full set of prioritizers you want, but avoids behavior changes between releases.",
                  "type": "string"
                }
              }
            },
            "spreadPolicy": {
              "description": "SpreadPolicy defines how placement decisions should be distributed among a set of ManagedClusters.",
              "type": "object",
              "properties": {
                "spreadConstraints": {
                  "description": "SpreadConstraints defines how the placement decision should be distributed among a set of ManagedClusters. The importance of the SpreadConstraintsTerms follows the natural order of their index in the slice. The scheduler first consider SpreadConstraintsTerms with smaller index then those with larger index to distribute the placement decision.",
                  "type": "array",
                  "maxItems": 8,
                  "items": {
                    "description": "SpreadConstraintsTerm defines a terminology to spread placement decisions.",
                    "type": "object",
                    "required": [
                      "topologyKey",
                      "topologyKeyType"
                    ],
                    "properties": {
                      "maxSkew": {
                        "description": "MaxSkew represents the degree to which the workload may be unevenly distributed. Skew is the maximum difference between the number of selected ManagedClusters in a topology and the global minimum. The global minimum is the minimum number of selected ManagedClusters for the topologies within the same TopologyKey. The minimum possible value of MaxSkew is 1, and the default value is 1.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                      },
                      "topologyKey": {
                        "description": "TopologyKey is either a label key or a cluster claim name of ManagedClusters.",
                        "type": "string",
                        "maxLength": 316,
                        "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$"
                      },
                      "topologyKeyType": {
                        "description": "TopologyKeyType indicates the type of TopologyKey. It could be Label or Claim.",
                        "type": "string",
                        "enum": [
                          "Label",
                          "Claim"
                        ]
                      },
                      "whenUnsatisfiable": {
                        "description": "WhenUnsatisfiable represents the action of the scheduler when MaxSkew cannot be satisfied. It could be DoNotSchedule or ScheduleAnyway. The default value is ScheduleAnyway. DoNotSchedule instructs the scheduler not to schedule more ManagedClusters when MaxSkew is not satisfied. ScheduleAnyway instructs the scheduler to keep scheduling even if MaxSkew is not satisfied.",
                        "type": "string",
                        "enum": [
                          "DoNotSchedule",
                          "ScheduleAnyway"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "tolerations": {
              "description": "Tolerations are applied to placements, and allow (but do not require) the managed clusters with certain taints to be selected by placements with matching tolerations.",
              "type": "array",
              "items": {
                "description": "Toleration represents the toleration object that can be attached to a placement. The placement this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSelect, PreferNoSelect and NoSelectIfNew.",
                    "type": "string",
                    "enum": [
                      "NoSelect",
                      "PreferNoSelect",
                      "NoSelectIfNew"
                    ]
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a placement can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoSelect/PreferNoSelect, otherwise this field is ignored) tolerates the taint. The default value is nil, which indicates it tolerates the taint forever. The start time of counting the TolerationSeconds should be the TimeAdded in Taint, not the cluster scheduled time or TolerationSeconds added time.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string",
                    "maxLength": 1024
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represents the current status of the Placement",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition status for this Placement.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "decisionGroups": {
              "description": "List of decision groups determined by the placement and DecisionStrategy.",
              "type": "array",
              "items": {
                "description": "Present decision groups status based on the DecisionStrategy definition.",
                "type": "object",
                "properties": {
                  "clusterCount": {
                    "description": "Total number of clusters in the decision group. Clusters count is equal or less than the clusterPerDecisionGroups defined in the decision strategy.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "decisionGroupIndex": {
                    "description": "Present the decision group index. If there is no decision strategy defined all placement decisions will be in group index 0",
                    "type": "integer",
                    "format": "int32"
                  },
                  "decisionGroupName": {
                    "description": "Decision group name that is defined in the DecisionStrategy's DecisionGroup.",
                    "type": "string"
                  },
                  "decisions": {
                    "description": "List of placement decisions names associated with the decision group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "numberOfSelectedClusters": {
              "description": "NumberOfSelectedClusters represents the number of selected ManagedClusters",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "Placement",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementDecision": {
      "description": "PlacementDecision indicates a decision from a placement. PlacementDecision must have a cluster.open-cluster-management.io/placement={placement name} label to reference a certain placement. \n If a placement has spec.numberOfClusters specified, the total number of decisions contained in the status.decisions of PlacementDecisions must be the same as NumberOfClusters. Otherwise, the total number of decisions must equal the number of ManagedClusters that match the placement requirements. \n Some of the decisions might be empty when there are not enough ManagedClusters to meet the placement requirements.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status represents the current status of the PlacementDecision",
          "type": "object",
          "required": [
            "decisions"
          ],
          "properties": {
            "decisions": {
              "description": "Decisions is a slice of decisions according to a placement The number of decisions should not be larger than 100",
              "type": "array",
              "items": {
                "description": "ClusterDecision represents a decision from a placement An empty ClusterDecision indicates it is not scheduled yet.",
                "type": "object",
                "required": [
                  "clusterName",
                  "reason"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the ManagedCluster. If it is not empty, its value should be unique cross all placement decisions for the Placement.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason represents the reason why the ManagedCluster is selected.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecision",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementDecisionList": {
      "description": "PlacementDecisionList is a list of PlacementDecision",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of placementdecisions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementDecisionList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementList": {
      "description": "PlacementList is a list of Placement",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of placements. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "PlacementList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.Restore": {
      "description": "Restore is the Schema for the restores API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "RestoreSpec defines the desired state of Restore",
          "type": "object",
          "required": [
            "cleanupBeforeRestore",
            "veleroCredentialsBackupName",
            "veleroManagedClustersBackupName",
            "veleroResourcesBackupName"
          ],
          "properties": {
            "cleanupBeforeRestore": {
              "description": "1. Use CleanupRestored if you want to delete all resources created by a previous restore operation, before restoring the new data 2. Use None if you don't want to clean up any resources before restoring the new data.",
              "type": "string"
            },
            "excludedNamespaces": {
              "description": "ExcludedNamespaces contains a list of namespaces that are not included in the restore."
            },
            "excludedResources": {
              "description": "ExcludedResources is a slice of resource names that are not included in the restore."
            },
            "hooks": {
              "description": "velero option -  Hooks represent custom behaviors that should be executed during or post restore.",
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "description": "RestoreResourceHookSpec defines one or more RestoreResrouceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "excludedNamespaces": {
                        "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply."
                      },
                      "excludedResources": {
                        "description": "ExcludedResources specifies the resources to which this hook spec does not apply."
                      },
                      "includedNamespaces": {
                        "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces."
                      },
                      "includedResources": {
                        "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources."
                      },
                      "labelSelector": {
                        "description": "LabelSelector, if specified, filters the resources to which this hook spec applies."
                      },
                      "name": {
                        "description": "Name is the name of this hook.",
                        "type": "string"
                      },
                      "postHooks": {
                        "description": "PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.",
                        "type": "array",
                        "items": {
                          "description": "RestoreResourceHook defines a restore hook for a resource.",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec defines an exec restore hook.",
                              "type": "object",
                              "required": [
                                "command"
                              ],
                              "properties": {
                                "command": {
                                  "description": "Command is the command and arguments to execute from within a container after a pod has been restored.",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "container": {
                                  "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                  "type": "string"
                                },
                                "execTimeout": {
                                  "description": "ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                  "type": "string"
                                },
                                "onError": {
                                  "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                  "type": "string",
                                  "enum": [
                                    "Continue",
                                    "Fail"
                                  ]
                                },
                                "waitTimeout": {
                                  "description": "WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready before attempting to run the command.",
                                  "type": "string"
                                }
                              }
                            },
                            "init": {
                              "description": "Init defines an init restore hook.",
                              "type": "object",
                              "properties": {
                                "initContainers": {
                                  "description": "InitContainers is list of init containers to be added to a pod during its restore.",
                                  "type": "array",
                                  "items": {
                                    "description": "A single application container that you want to run within a pod.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "args": {
                                        "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "command": {
                                        "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "env": {
                                        "description": "List of environment variables to set in the container. Cannot be updated.",
                                        "type": "array",
                                        "items": {
                                          "description": "EnvVar represents an environment variable present in a Container.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "name": {
                                              "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                              "type": "string"
                                            },
                                            "value": {
                                              "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                              "type": "string"
                                            },
                                            "valueFrom": {
                                              "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                              "type": "object",
                                              "properties": {
                                                "configMapKeyRef": {
                                                  "description": "Selects a key of a ConfigMap.",
                                                  "type": "object",
                                                  "required": [
                                                    "key"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The key to select.",
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    },
                                                    "optional": {
                                                      "description": "Specify whether the ConfigMap or its key must be defined",
                                                      "type": "boolean"
                                                    }
                                                  }
                                                },
                                                "fieldRef": {
                                                  "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                                  "type": "object",
                                                  "required": [
                                                    "fieldPath"
                                                  ],
                                                  "properties": {
                                                    "apiVersion": {
                                                      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                      "type": "string"
                                                    },
                                                    "fieldPath": {
                                                      "description": "Path of the field to select in the specified API version.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "resourceFieldRef": {
                                                  "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                                  "type": "object",
                                                  "required": [
                                                    "resource"
                                                  ],
                                                  "properties": {
                                                    "containerName": {
                                                      "description": "Container name: required for volumes, optional for env vars",
                                                      "type": "string"
                                                    },
                                                    "divisor": {
                                                      "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "resource": {
                                                      "description": "Required: resource to select",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "secretKeyRef": {
                                                  "description": "Selects a key of a secret in the pod's namespace",
                                                  "type": "object",
                                                  "required": [
                                                    "key"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    },
                                                    "optional": {
                                                      "description": "Specify whether the Secret or its key must be defined",
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "envFrom": {
                                        "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                        "type": "array",
                                        "items": {
                                          "description": "EnvFromSource represents the source of a set of ConfigMaps",
                                          "type": "object",
                                          "properties": {
                                            "configMapRef": {
                                              "description": "The ConfigMap to select from",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                  "type": "string"
                                                },
                                                "optional": {
                                                  "description": "Specify whether the ConfigMap must be defined",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "prefix": {
                                              "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                              "type": "string"
                                            },
                                            "secretRef": {
                                              "description": "The Secret to select from",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                  "type": "string"
                                                },
                                                "optional": {
                                                  "description": "Specify whether the Secret must be defined",
                                                  "type": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "image": {
                                        "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                                        "type": "string"
                                      },
                                      "imagePullPolicy": {
                                        "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                        "type": "string"
                                      },
                                      "lifecycle": {
                                        "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                                        "type": "object",
                                        "properties": {
                                          "postStart": {
                                            "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                            "type": "object",
                                            "properties": {
                                              "exec": {
                                                "description": "Exec specifies the action to take.",
                                                "type": "object",
                                                "properties": {
                                                  "command": {
                                                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "httpGet": {
                                                "description": "HTTPGet specifies the http request to perform.",
                                                "type": "object",
                                                "required": [
                                                  "port"
                                                ],
                                                "properties": {
                                                  "host": {
                                                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                    "type": "string"
                                                  },
                                                  "httpHeaders": {
                                                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                      "type": "object",
                                                      "required": [
                                                        "name",
                                                        "value"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "description": "The header field name",
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "The header field value",
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "path": {
                                                    "description": "Path to access on the HTTP server.",
                                                    "type": "string"
                                                  },
                                                  "port": {
                                                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                    "x-kubernetes-int-or-string": true
                                                  },
                                                  "scheme": {
                                                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "tcpSocket": {
                                                "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                                "type": "object",
                                                "required": [
                                                  "port"
                                                ],
                                                "properties": {
                                                  "host": {
                                                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                    "type": "string"
                                                  },
                                                  "port": {
                                                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "preStop": {
                                            "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                            "type": "object",
                                            "properties": {
                                              "exec": {
                                                "description": "Exec specifies the action to take.",
                                                "type": "object",
                                                "properties": {
                                                  "command": {
                                                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "httpGet": {
                                                "description": "HTTPGet specifies the http request to perform.",
                                                "type": "object",
                                                "required": [
                                                  "port"
                                                ],
                                                "properties": {
                                                  "host": {
                                                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                    "type": "string"
                                                  },
                                                  "httpHeaders": {
                                                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                      "type": "object",
                                                      "required": [
                                                        "name",
                                                        "value"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "description": "The header field name",
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "The header field value",
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "path": {
                                                    "description": "Path to access on the HTTP server.",
                                                    "type": "string"
                                                  },
                                                  "port": {
                                                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                    "x-kubernetes-int-or-string": true
                                                  },
                                                  "scheme": {
                                                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "tcpSocket": {
                                                "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                                "type": "object",
                                                "required": [
                                                  "port"
                                                ],
                                                "properties": {
                                                  "host": {
                                                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                    "type": "string"
                                                  },
                                                  "port": {
                                                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "livenessProbe": {
                                        "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                        "type": "object",
                                        "properties": {
                                          "exec": {
                                            "description": "Exec specifies the action to take.",
                                            "type": "object",
                                            "properties": {
                                              "command": {
                                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "failureThreshold": {
                                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "grpc": {
                                            "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "port": {
                                                "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "service": {
                                                "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "httpGet": {
                                            "description": "HTTPGet specifies the http request to perform.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                "type": "string"
                                              },
                                              "httpHeaders": {
                                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                "type": "array",
                                                "items": {
                                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                  "type": "object",
                                                  "required": [
                                                    "name",
                                                    "value"
                                                  ],
                                                  "properties": {
                                                    "name": {
                                                      "description": "The header field name",
                                                      "type": "string"
                                                    },
                                                    "value": {
                                                      "description": "The header field value",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "Path to access on the HTTP server.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "scheme": {
                                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "initialDelaySeconds": {
                                            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "periodSeconds": {
                                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "successThreshold": {
                                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "tcpSocket": {
                                            "description": "TCPSocket specifies an action involving a TCP port.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          },
                                          "terminationGracePeriodSeconds": {
                                            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "timeoutSeconds": {
                                            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      },
                                      "name": {
                                        "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                                        "type": "string"
                                      },
                                      "ports": {
                                        "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                                        "type": "array",
                                        "items": {
                                          "description": "ContainerPort represents a network port in a single container.",
                                          "type": "object",
                                          "required": [
                                            "containerPort"
                                          ],
                                          "properties": {
                                            "containerPort": {
                                              "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "hostIP": {
                                              "description": "What host IP to bind the external port to.",
                                              "type": "string"
                                            },
                                            "hostPort": {
                                              "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "name": {
                                              "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                              "type": "string"
                                            },
                                            "protocol": {
                                              "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-list-map-keys": [
                                          "containerPort",
                                          "protocol"
                                        ],
                                        "x-kubernetes-list-type": "map"
                                      },
                                      "readinessProbe": {
                                        "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                        "type": "object",
                                        "properties": {
                                          "exec": {
                                            "description": "Exec specifies the action to take.",
                                            "type": "object",
                                            "properties": {
                                              "command": {
                                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "failureThreshold": {
                                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "grpc": {
                                            "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "port": {
                                                "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "service": {
                                                "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "httpGet": {
                                            "description": "HTTPGet specifies the http request to perform.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                "type": "string"
                                              },
                                              "httpHeaders": {
                                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                "type": "array",
                                                "items": {
                                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                  "type": "object",
                                                  "required": [
                                                    "name",
                                                    "value"
                                                  ],
                                                  "properties": {
                                                    "name": {
                                                      "description": "The header field name",
                                                      "type": "string"
                                                    },
                                                    "value": {
                                                      "description": "The header field value",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "Path to access on the HTTP server.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "scheme": {
                                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "initialDelaySeconds": {
                                            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "periodSeconds": {
                                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "successThreshold": {
                                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "tcpSocket": {
                                            "description": "TCPSocket specifies an action involving a TCP port.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          },
                                          "terminationGracePeriodSeconds": {
                                            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "timeoutSeconds": {
                                            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      },
                                      "resources": {
                                        "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object",
                                        "properties": {
                                          "claims": {
                                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                                            "type": "array",
                                            "items": {
                                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                              "type": "object",
                                              "required": [
                                                "name"
                                              ],
                                              "properties": {
                                                "name": {
                                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-list-map-keys": [
                                              "name"
                                            ],
                                            "x-kubernetes-list-type": "map"
                                          },
                                          "limits": {
                                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                            "type": "object",
                                            "additionalProperties": {
                                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                              "x-kubernetes-int-or-string": true
                                            }
                                          },
                                          "requests": {
                                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                            "type": "object",
                                            "additionalProperties": {
                                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                              "x-kubernetes-int-or-string": true
                                            }
                                          }
                                        }
                                      },
                                      "securityContext": {
                                        "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                        "type": "object",
                                        "properties": {
                                          "allowPrivilegeEscalation": {
                                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                          },
                                          "capabilities": {
                                            "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "object",
                                            "properties": {
                                              "add": {
                                                "description": "Added capabilities",
                                                "type": "array",
                                                "items": {
                                                  "description": "Capability represent POSIX capabilities type",
                                                  "type": "string"
                                                }
                                              },
                                              "drop": {
                                                "description": "Removed capabilities",
                                                "type": "array",
                                                "items": {
                                                  "description": "Capability represent POSIX capabilities type",
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "privileged": {
                                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                          },
                                          "procMount": {
                                            "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "string"
                                          },
                                          "readOnlyRootFilesystem": {
                                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                          },
                                          "runAsGroup": {
                                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "runAsNonRoot": {
                                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "boolean"
                                          },
                                          "runAsUser": {
                                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "seLinuxOptions": {
                                            "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "object",
                                            "properties": {
                                              "level": {
                                                "description": "Level is SELinux level label that applies to the container.",
                                                "type": "string"
                                              },
                                              "role": {
                                                "description": "Role is a SELinux role label that applies to the container.",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "Type is a SELinux type label that applies to the container.",
                                                "type": "string"
                                              },
                                              "user": {
                                                "description": "User is a SELinux user label that applies to the container.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "seccompProfile": {
                                            "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "object",
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "localhostProfile": {
                                                "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "windowsOptions": {
                                            "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
                                            "type": "object",
                                            "properties": {
                                              "gmsaCredentialSpec": {
                                                "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                "type": "string"
                                              },
                                              "gmsaCredentialSpecName": {
                                                "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                "type": "string"
                                              },
                                              "hostProcess": {
                                                "description": "HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                                "type": "boolean"
                                              },
                                              "runAsUserName": {
                                                "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "startupProbe": {
                                        "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                        "type": "object",
                                        "properties": {
                                          "exec": {
                                            "description": "Exec specifies the action to take.",
                                            "type": "object",
                                            "properties": {
                                              "command": {
                                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "failureThreshold": {
                                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "grpc": {
                                            "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "port": {
                                                "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "service": {
                                                "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "httpGet": {
                                            "description": "HTTPGet specifies the http request to perform.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                "type": "string"
                                              },
                                              "httpHeaders": {
                                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                "type": "array",
                                                "items": {
                                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                  "type": "object",
                                                  "required": [
                                                    "name",
                                                    "value"
                                                  ],
                                                  "properties": {
                                                    "name": {
                                                      "description": "The header field name",
                                                      "type": "string"
                                                    },
                                                    "value": {
                                                      "description": "The header field value",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "Path to access on the HTTP server.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "scheme": {
                                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "initialDelaySeconds": {
                                            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "periodSeconds": {
                                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "successThreshold": {
                                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "tcpSocket": {
                                            "description": "TCPSocket specifies an action involving a TCP port.",
                                            "type": "object",
                                            "required": [
                                              "port"
                                            ],
                                            "properties": {
                                              "host": {
                                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                "type": "string"
                                              },
                                              "port": {
                                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          },
                                          "terminationGracePeriodSeconds": {
                                            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "timeoutSeconds": {
                                            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      },
                                      "stdin": {
                                        "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                                        "type": "boolean"
                                      },
                                      "stdinOnce": {
                                        "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                        "type": "boolean"
                                      },
                                      "terminationMessagePath": {
                                        "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                        "type": "string"
                                      },
                                      "terminationMessagePolicy": {
                                        "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                        "type": "string"
                                      },
                                      "tty": {
                                        "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                        "type": "boolean"
                                      },
                                      "volumeDevices": {
                                        "description": "volumeDevices is the list of block devices to be used by the container.",
                                        "type": "array",
                                        "items": {
                                          "description": "volumeDevice describes a mapping of a raw block device within a container.",
                                          "type": "object",
                                          "required": [
                                            "devicePath",
                                            "name"
                                          ],
                                          "properties": {
                                            "devicePath": {
                                              "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                              "type": "string"
                                            },
                                            "name": {
                                              "description": "name must match the name of a persistentVolumeClaim in the pod",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "volumeMounts": {
                                        "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                        "type": "array",
                                        "items": {
                                          "description": "VolumeMount describes a mounting of a Volume within a container.",
                                          "type": "object",
                                          "required": [
                                            "mountPath",
                                            "name"
                                          ],
                                          "properties": {
                                            "mountPath": {
                                              "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                              "type": "string"
                                            },
                                            "mountPropagation": {
                                              "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                              "type": "string"
                                            },
                                            "name": {
                                              "description": "This must match the Name of a Volume.",
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                              "type": "boolean"
                                            },
                                            "subPath": {
                                              "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                              "type": "string"
                                            },
                                            "subPathExpr": {
                                              "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "workingDir": {
                                        "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "timeout": {
                                  "description": "Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "preserveNodePorts": {
              "description": "velero option - PreserveNodePorts specifies whether to restore old nodePorts from backup."
            },
            "restorePVs": {
              "description": "velero option -  RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider)."
            },
            "restoreStatus": {
              "description": "velero option -  RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional."
            },
            "restoreSyncInterval": {
              "description": "Used in combination with the SyncRestoreWithNewBackups property When SyncRestoreWithNewBackups is set to true, defines the duration for checking on new backups If not defined and SyncRestoreWithNewBackups is set to true, it defaults to 30minutes",
              "type": "string"
            },
            "syncRestoreWithNewBackups": {
              "description": "Set this to true if you want to keep checking for new backups and restore if updates are available. If not defined, the value is set to false. For this option to work, you need to set VeleroResourcesBackupName and VeleroCredentialsBackupName to latest and VeleroManagedClustersBackupName to skip",
              "type": "boolean"
            },
            "veleroCredentialsBackupName": {
              "description": "VeleroCredentialsBackupName is the name of the velero back-up used to restore credentials. Is required, valid values are latest, skip or backup_name If value is set to latest, the latest backup is used, skip will not restore this type of backup backup_name points to the name of the backup to be restored",
              "type": "string"
            },
            "veleroManagedClustersBackupName": {
              "description": "VeleroManagedClustersBackupName is the name of the velero back-up used to restore managed clusters. Is required, valid values are latest, skip or backup_name If value is set to latest, the latest backup is used, skip will not restore this type of backup backup_name points to the name of the backup to be restored",
              "type": "string"
            },
            "veleroResourcesBackupName": {
              "description": "VeleroResourcesBackupName is the name of the velero back-up used to restore resources. Is required, valid values are latest, skip or backup_name If value is set to latest, the latest backup is used, skip will not restore this type of backup backup_name points to the name of the backup to be restored",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "RestoreStatus defines the observed state of Restore",
          "type": "object",
          "properties": {
            "lastMessage": {
              "description": "Message on the last operation",
              "type": "string"
            },
            "messages": {
              "description": "Messages contains any messages that were encountered during the restore process."
            },
            "phase": {
              "description": "Phase is the current phase of the restore",
              "type": "string"
            },
            "veleroCredentialsRestoreName": {
              "type": "string"
            },
            "veleroGenericResourcesRestoreName": {
              "type": "string"
            },
            "veleroManagedClustersRestoreName": {
              "type": "string"
            },
            "veleroResourcesRestoreName": {
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "Restore",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta1.RestoreList": {
      "description": "RestoreList is a list of Restore",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of restores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Restore"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "RestoreList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSet": {
      "description": "ManagedClusterSet defines a group of ManagedClusters that you can run workloads on. You can define a workload to be deployed on a ManagedClusterSet. See the following options  for the workload: - The workload can run on any ManagedCluster in the ManagedClusterSet - The workload cannot run on any ManagedCluster outside the ManagedClusterSet - The service exposed by the workload can be shared in any ManagedCluster in the ManagedClusterSet \n To assign a ManagedCluster to a certain ManagedClusterSet, add a label with the name cluster.open-cluster-management.io/clusterset on the ManagedCluster to refer to the ManagedClusterSet. You are not allowed to add or remove this label on a ManagedCluster unless you have an RBAC rule to CREATE on a virtual subresource of managedclustersets/join. To update this label, you must have the permission on both the old and new ManagedClusterSet.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of the ManagedClusterSet",
          "type": "object",
          "properties": {
            "clusterSelector": {
              "description": "ClusterSelector represents a selector of ManagedClusters",
              "type": "object",
              "properties": {
                "labelSelector": {
                  "description": "LabelSelector define the general labelSelector which clusterset will use to select target managedClusters",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "selectorType": {
                  "description": "SelectorType could only be \"ExclusiveClusterSetLabel\" or \"LabelSelector\" \"ExclusiveClusterSetLabel\" means to use label \"cluster.open-cluster-management.io/clusterset:<ManagedClusterSet Name>\"\" to select target clusters. \"LabelSelector\" means use labelSelector to select target managedClusters",
                  "type": "string",
                  "enum": [
                    "ExclusiveClusterSetLabel",
                    "LabelSelector"
                  ]
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represents the current status of the ManagedClusterSet",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition statuses for this ManagedClusterSet.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSet",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding": {
      "description": "ManagedClusterSetBinding projects a ManagedClusterSet into a certain namespace. You can create a ManagedClusterSetBinding in a namespace and bind it to a ManagedClusterSet if both have a RBAC rules to CREATE on the virtual subresource of managedclustersets/bind. Workloads that you create in the same namespace can only be distributed to ManagedClusters in ManagedClusterSets that are bound in this namespace by higher-level controllers.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of ManagedClusterSetBinding.",
          "type": "object",
          "properties": {
            "clusterSet": {
              "description": "ClusterSet is the name of the ManagedClusterSet to bind. It must match the instance name of the ManagedClusterSetBinding and cannot change once created. User is allowed to set this field if they have an RBAC rule to CREATE on the virtual subresource of managedclustersets/bind.",
              "type": "string",
              "minLength": 1
            }
          }
        },
        "status": {
          "description": "Status represents the current status of the ManagedClusterSetBinding",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition statuses for this ManagedClusterSetBinding.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBinding",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingList": {
      "description": "ManagedClusterSetBindingList is a list of ManagedClusterSetBinding",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclustersetbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetBindingList",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetList": {
      "description": "ManagedClusterSetList is a list of ManagedClusterSet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclustersets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.open-cluster-management.io",
          "kind": "ManagedClusterSetList",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.config.v1alpha1.KlusterletConfig": {
      "description": "KlusterletConfig contains the configuration of a klusterlet including the upgrade strategy, config overrides, proxy configurations etc.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of KlusterletConfig",
          "type": "object",
          "properties": {
            "hubKubeAPIServerCABundle": {
              "description": "HubKubeAPIServerCABundle is the CA bundle to verify the server certificate of the hub kube API against. If not present, CA bundle will be determined with the logic below: 1). Use the certificate of the named certificate configured in APIServer/cluster if FQDN matches; 2). Otherwise use the CA certificates from kube-root-ca.crt ConfigMap in the cluster namespace;",
              "type": "string",
              "format": "byte"
            },
            "hubKubeAPIServerProxyConfig": {
              "description": "HubKubeAPIServerProxyConfig holds proxy settings for connections between klusterlet/add-on agents on the managed cluster and the kube-apiserver on the hub cluster. Empty means no proxy settings is available.",
              "type": "object",
              "properties": {
                "caBundle": {
                  "description": "CABundle is a CA certificate bundle to verify the proxy server. It will be ignored if only HTTPProxy is set; And it is required when HTTPSProxy is set and self signed CA certificate is used by the proxy server.",
                  "type": "string",
                  "format": "byte"
                },
                "httpProxy": {
                  "description": "HTTPProxy is the URL of the proxy for HTTP requests",
                  "type": "string"
                },
                "httpsProxy": {
                  "description": "HTTPSProxy is the URL of the proxy for HTTPS requests HTTPSProxy will be chosen if both HTTPProxy and HTTPSProxy are set.",
                  "type": "string"
                }
              }
            },
            "hubKubeAPIServerURL": {
              "description": "HubKubeAPIServerURL is the URL of the hub Kube API server. If not present, the .status.apiServerURL of Infrastructure/cluster will be used as the default value. e.g. `oc get infrastructure cluster -o jsonpath='{.status.apiServerURL}'`",
              "type": "string"
            },
            "nodePlacement": {
              "description": "NodePlacement enables explicit control over the scheduling of the agent components. If the placement is nil, the placement is not specified, it will be omitted. If the placement is an empty object, the placement will match all nodes and tolerate nothing.",
              "type": "object",
              "properties": {
                "nodeSelector": {
                  "description": "NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tolerations": {
                  "description": "Tolerations is attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "pullSecret": {
              "description": "PullSecret is the name of image pull secret.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "registries": {
              "description": "Registries includes the mirror and source registries. The source registry will be replaced by the Mirror.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "mirror"
                ],
                "properties": {
                  "mirror": {
                    "description": "Mirror is the mirrored registry of the Source. Will be ignored if Mirror is empty.",
                    "type": "string"
                  },
                  "source": {
                    "description": "Source is the source registry. All image registries will be replaced by Mirror if Source is empty.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Status defines the observed state of KlusterletConfig",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfig",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.config.v1alpha1.KlusterletConfigList": {
      "description": "KlusterletConfigList is a list of KlusterletConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of klusterletconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.config.v1alpha1.KlusterletConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.open-cluster-management.io",
          "kind": "KlusterletConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.console.v1.UserPreference": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "savedSearches": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "searchText": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreference",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.console.v1.UserPreferenceList": {
      "description": "UserPreferenceList is a list of UserPreference",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of userpreferences. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.console.v1.UserPreference"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.open-cluster-management.io",
          "kind": "UserPreferenceList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1.DiscoveredCluster": {
      "description": "DiscoveredCluster is the Schema for the discoveredclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "DiscoveredClusterSpec defines the desired state of DiscoveredCluster",
          "type": "object",
          "required": [
            "apiUrl",
            "displayName",
            "isManagedCluster",
            "name",
            "type"
          ],
          "properties": {
            "activityTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "apiUrl": {
              "type": "string"
            },
            "cloudProvider": {
              "type": "string"
            },
            "console": {
              "type": "string"
            },
            "creationTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "credential": {
              "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "displayName": {
              "type": "string"
            },
            "isManagedCluster": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "ocpClusterId": {
              "type": "string"
            },
            "openshiftVersion": {
              "type": "string"
            },
            "rhocmClusterId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "status": {
          "description": "DiscoveredClusterStatus defines the observed state of DiscoveredCluster",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1.DiscoveredClusterList": {
      "description": "DiscoveredClusterList is a list of DiscoveredCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of discoveredclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredClusterList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfig": {
      "description": "DiscoveryConfig is the Schema for the discoveryconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "DiscoveryConfigSpec defines the desired state of DiscoveryConfig",
          "type": "object",
          "required": [
            "credential"
          ],
          "properties": {
            "credential": {
              "description": "Credential is the secret containing credentials to connect to the OCM api on behalf of a user",
              "type": "string"
            },
            "filters": {
              "description": "Sets restrictions on what kind of clusters to discover",
              "type": "object",
              "properties": {
                "lastActive": {
                  "description": "LastActive is the last active in days of clusters to discover, determined by activity timestamp",
                  "type": "integer"
                },
                "openShiftVersions": {
                  "description": "OpenShiftVersions is the list of release versions of OpenShift of the form \"<Major>.<Minor>\"",
                  "type": "array",
                  "items": {
                    "description": "Semver represents a partial semver string with the major and minor version in the form \"<Major>.<Minor>\". For example: \"4.5\"",
                    "type": "string",
                    "pattern": "^(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)$"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "DiscoveryConfigStatus defines the observed state of DiscoveryConfig",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfigList": {
      "description": "DiscoveryConfigList is a list of DiscoveryConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of discoveryconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfigList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster": {
      "description": "DiscoveredCluster is the Schema for the discoveredclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "DiscoveredClusterSpec defines the desired state of DiscoveredCluster",
          "type": "object",
          "required": [
            "apiUrl",
            "displayName",
            "isManagedCluster",
            "name",
            "type"
          ],
          "properties": {
            "activityTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "apiUrl": {
              "type": "string"
            },
            "cloudProvider": {
              "type": "string"
            },
            "console": {
              "type": "string"
            },
            "creationTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "credential": {
              "description": "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "displayName": {
              "type": "string"
            },
            "isManagedCluster": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "openshiftVersion": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "status": {
          "description": "DiscoveredClusterStatus defines the observed state of DiscoveredCluster",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredCluster",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterList": {
      "description": "DiscoveredClusterList is a list of DiscoveredCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of discoveredclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveredClusterList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig": {
      "description": "DiscoveryConfig is the Schema for the discoveryconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "DiscoveryConfigSpec defines the desired state of DiscoveryConfig",
          "type": "object",
          "required": [
            "credential"
          ],
          "properties": {
            "credential": {
              "description": "Credential is the secret containing credentials to connect to the OCM api on behalf of a user",
              "type": "string"
            },
            "filters": {
              "description": "Sets restrictions on what kind of clusters to discover",
              "type": "object",
              "properties": {
                "lastActive": {
                  "description": "LastActive is the last active in days of clusters to discover, determined by activity timestamp",
                  "type": "integer"
                },
                "openShiftVersions": {
                  "description": "OpenShiftVersions is the list of release versions of OpenShift of the form \"<Major>.<Minor>\"",
                  "type": "array",
                  "items": {
                    "description": "Semver represents a partial semver string with the major and minor version in the form \"<Major>.<Minor>\". For example: \"4.5\"",
                    "type": "string",
                    "pattern": "^(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)$"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "DiscoveryConfigStatus defines the observed state of DiscoveryConfig",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfig",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigList": {
      "description": "DiscoveryConfigList is a list of DiscoveryConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of discoveryconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.open-cluster-management.io",
          "kind": "DiscoveryConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry": {
      "description": "ManagedClusterImageRegistry represents the image overridden configuration information.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the information of the ManagedClusterImageRegistry.",
          "type": "object",
          "required": [
            "placementRef",
            "pullSecret"
          ],
          "properties": {
            "placementRef": {
              "description": "PlacementRef is the referred Placement name.",
              "type": "object",
              "required": [
                "group",
                "name",
                "resource"
              ],
              "properties": {
                "group": {
                  "description": "Group is the api group of the placement. Current group is cluster.open-cluster-management.io.",
                  "type": "string",
                  "enum": [
                    "cluster.open-cluster-management.io"
                  ]
                },
                "name": {
                  "description": "Name is the name of the Placement.",
                  "type": "string"
                },
                "resource": {
                  "description": "Resource is the resource type of the Placement. Current resource is placement or placements.",
                  "type": "string",
                  "enum": [
                    "placement",
                    "placements"
                  ]
                }
              }
            },
            "pullSecret": {
              "description": "PullSecret is the name of image pull secret which should be in the same namespace with the managedClusterImageRegistry.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              }
            },
            "registries": {
              "description": "Registries includes the mirror and source registries. The source registry will be replaced by the Mirror. The larger index will work if the Sources are the same.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "mirror"
                ],
                "properties": {
                  "mirror": {
                    "description": "Mirror is the mirrored registry of the Source. Will be ignored if Mirror is empty.",
                    "type": "string"
                  },
                  "source": {
                    "description": "Source is the source registry. All image registries will be replaced by Mirror if Source is empty.",
                    "type": "string"
                  }
                }
              }
            },
            "registry": {
              "description": "Registry is the Mirror registry which will replace all images registries. will be ignored if Registries is not empty.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Status represents the desired status of the managedClusterImageRegistry.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains condition information for a managedClusterImageRegistry",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistry",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistryList": {
      "description": "ManagedClusterImageRegistryList is a list of ManagedClusterImageRegistry",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusterimageregistries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.imageregistry.v1alpha1.ManagedClusterImageRegistry"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.open-cluster-management.io",
          "kind": "ManagedClusterImageRegistryList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.internal.v1beta1.ManagedClusterInfo": {
      "description": "ManagedClusterInfo represents the information of managed cluster that acm hub needs to know",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the information of the Cluster.",
          "type": "object",
          "properties": {
            "loggingCA": {
              "description": "LoggingCA is the ca data for logging server to authorize apiserver",
              "type": "string",
              "format": "byte"
            },
            "masterEndpoint": {
              "description": "MasterEndpoint shows the apiserver endpoint of managed cluster",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Status represents the desired status of the Cluster",
          "type": "object",
          "properties": {
            "cloudVendor": {
              "description": "CloudVendor describes the cloud provider for the managed cluster. Deprecated in release 2.3 and will be removed in the future. Use clusterClaim product.open-cluster-management.io instead.",
              "type": "string"
            },
            "clusterID": {
              "description": "ClusterID is the identifier of managed cluster. Deprecated in release 2.3 and will be removed in the future. Use clusterClaim id.openshift.io instead.",
              "type": "string"
            },
            "conditions": {
              "description": "Conditions contains condition information for a managed cluster",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "consoleURL": {
              "description": "ConsoleURL shows the url of console in managed cluster. Deprecated in release 2.3 and will be removed in the future. Use clusterClaim consoleurl.cluster.open-cluster-management.io instead.",
              "type": "string"
            },
            "distributionInfo": {
              "description": "DistributionInfo is the information about distribution of managed cluster",
              "type": "object",
              "properties": {
                "ocp": {
                  "description": "OCP is the distribution information of OCP managed cluster, is matched when the Type is OCP.",
                  "type": "object",
                  "properties": {
                    "availableUpdates": {
                      "description": "AvailableUpdates contains the list of update versions that are appropriate for the manage cluster. Deprecated in release 2.3 and will be removed in the future. Use VersionAvailableUpdates instead.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "channel": {
                      "description": "Channel is an identifier for explicitly requesting that a non-default set of updates be applied to this cluster. The default channel will be contain stable updates that are appropriate for production clusters.",
                      "type": "string"
                    },
                    "desired": {
                      "description": "desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.",
                      "type": "object",
                      "properties": {
                        "channels": {
                          "description": "channels is the set of Cincinnati channels to which the release currently belongs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "image": {
                          "description": "image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.",
                          "type": "string"
                        },
                        "url": {
                          "description": "url contains information about this release. This URL is set by the 'url' metadata property on a release or the metadata returned by the update API and should be displayed as a link in user interfaces. The URL field may not be set for test or nightly releases.",
                          "type": "string"
                        },
                        "version": {
                          "description": "version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.",
                          "type": "string"
                        }
                      }
                    },
                    "desiredVersion": {
                      "description": "DesiredVersion is the version that the cluster is reconciling towards. Deprecated in release 2.3 and will be removed in the future. User Desired instead.",
                      "type": "string"
                    },
                    "lastAppliedAPIServerURL": {
                      "description": "LastAppliedAPIServerURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443). it can be used by components like the web console to tell users where to find the Kubernetes API. This is the api server url that has been applied to the managedcluster resource successfully",
                      "type": "string"
                    },
                    "managedClusterClientConfig": {
                      "description": "Controller will sync this field to managedcluster's ManagedClusterClientConfigs",
                      "type": "object",
                      "properties": {
                        "caBundle": {
                          "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
                          "type": "string",
                          "format": "byte"
                        },
                        "url": {
                          "description": "URL is the URL of apiserver endpoint of the managed cluster.",
                          "type": "string"
                        }
                      }
                    },
                    "upgradeFailed": {
                      "description": "UpgradeFailed indicates whether upgrade of the manage cluster is failed. This is true if the status of Failing condition is True and the version is different with desiredVersion in clusterVersion",
                      "type": "boolean"
                    },
                    "version": {
                      "description": "Version is the current version of the OCP cluster. Deprecated in release 2.3 and will be removed in the future. Use clusterClaim version.openshift.io instead.",
                      "type": "string"
                    },
                    "versionAvailableUpdates": {
                      "description": "VersionAvailableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified.",
                      "type": "array",
                      "items": {
                        "description": "OCPVersionRelease represents an OpenShift release image and associated metadata. The original definition is from https://github.com/openshift/api/blob/master/config/v1/types_cluster_version.go",
                        "type": "object",
                        "properties": {
                          "channels": {
                            "description": "channels is the set of Cincinnati channels to which the release currently belongs.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "image": {
                            "description": "image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.",
                            "type": "string"
                          },
                          "url": {
                            "description": "url contains information about this release. This URL is set by the 'url' metadata property on a release or the metadata returned by the update API and should be displayed as a link in user interfaces. The URL field may not be set for test or nightly releases.",
                            "type": "string"
                          },
                          "version": {
                            "description": "version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "versionHistory": {
                      "description": "VersionHistory contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.",
                      "type": "array",
                      "items": {
                        "description": "OCPVersionUpdateHistory is a single attempted update to the cluster. the original definition is from https://github.com/openshift/api/blob/master/config/v1/types_cluster_version.go",
                        "type": "object",
                        "properties": {
                          "image": {
                            "description": "image is a container image location that contains the update. This value is always populated.",
                            "type": "string"
                          },
                          "state": {
                            "description": "state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).",
                            "type": "string"
                          },
                          "verified": {
                            "description": "verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.",
                            "type": "boolean"
                          },
                          "version": {
                            "description": "version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "type": {
                  "description": "Type is the distribution type of managed cluster, is OCP currently",
                  "type": "string"
                }
              }
            },
            "kubeVendor": {
              "description": "KubeVendor describes the kubernetes provider of the managed cluster. Deprecated in release 2.3 and will be removed in the future. Use clusterClaim platform.open-cluster-management.io instead.",
              "type": "string"
            },
            "loggingEndpoint": {
              "description": "LoggingEndpoint shows the endpoint to connect to logging server of managed cluster",
              "type": "object",
              "required": [
                "ip"
              ],
              "properties": {
                "hostname": {
                  "description": "The Hostname of this endpoint",
                  "type": "string"
                },
                "ip": {
                  "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready. TODO: This should allow hostname or IP, See #4447.",
                  "type": "string"
                },
                "nodeName": {
                  "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
                  "type": "string"
                },
                "targetRef": {
                  "description": "Reference to object providing the endpoint.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "fieldPath": {
                      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "loggingPort": {
              "description": "LoggingPort shows the port to connect to logging server of managed cluster",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "appProtocol": {
                  "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.",
                  "type": "string"
                },
                "port": {
                  "description": "The port number of the endpoint.",
                  "type": "integer",
                  "format": "int32"
                },
                "protocol": {
                  "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
                  "type": "string"
                }
              }
            },
            "nodeList": {
              "description": "NodeList shows a list of the status of nodes",
              "type": "array",
              "items": {
                "description": "NodeStatus presents the name, labels and conditions of node",
                "type": "object",
                "properties": {
                  "capacity": {
                    "description": "Capacity represents the total resources of a node. only includes CPU and memory.",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "conditions": {
                    "description": "Conditions is an array of current node conditions. only includes NodeReady.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of node condition.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "labels": {
                    "description": "Labels of node.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Name of node",
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "Version is the kube version of managed cluster.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfo",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.internal.v1beta1.ManagedClusterInfoList": {
      "description": "ManagedClusterInfoList is a list of ManagedClusterInfo",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusterinfos. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.internal.v1beta1.ManagedClusterInfo"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "internal.open-cluster-management.io",
          "kind": "ManagedClusterInfoList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservability": {
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservabilityList": {
      "description": "MultiClusterObservabilityList is a list of MultiClusterObservability",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of multiclusterobservabilities. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservabilityList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta1.ObservabilityAddon": {
      "description": "ObservabilityAddon is the Schema for the observabilityaddon API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ObservabilityAddonSpec is the spec of observability addon.",
          "type": "object",
          "properties": {
            "enableMetrics": {
              "description": "EnableMetrics indicates the observability addon push metrics to hub server.",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval for the observability addon push metrics to hub server.",
              "type": "integer",
              "format": "int32",
              "maximum": 3600,
              "minimum": 15
            },
            "resources": {
              "description": "Resource requirement for metrics-collector",
              "type": "object",
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                  "type": "array",
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ObservabilityAddonStatus defines the observed state of ObservabilityAddon",
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "description": "StatusCondition contains condition information for an observability addon",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddon",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta1.ObservabilityAddonList": {
      "description": "ObservabilityAddonList is a list of ObservabilityAddon",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of observabilityaddons. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "ObservabilityAddonList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservability": {
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservability",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservabilityList": {
      "description": "MultiClusterObservabilityList is a list of MultiClusterObservability",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of multiclusterobservabilities. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "observability.open-cluster-management.io",
          "kind": "MultiClusterObservabilityList",
          "version": "v1beta2"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.ClusterManager": {
      "description": "ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. In Default mode, ClusterManager will only be deployed in open-cluster-management-hub namespace. In Hosted mode, ClusterManager will be deployed in the namespace with the same name as cluster manager.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.",
          "type": "object",
          "properties": {
            "addOnManagerConfiguration": {
              "description": "AddOnManagerConfiguration contains the configuration of addon manager",
              "type": "object",
              "properties": {
                "featureGates": {
                  "description": "FeatureGates represents the list of feature gates for addon manager If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "feature"
                    ],
                    "properties": {
                      "feature": {
                        "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
                        "type": "string",
                        "enum": [
                          "Enable",
                          "Disable"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "addOnManagerImagePullSpec": {
              "description": "AddOnManagerImagePullSpec represents the desired image configuration of addon manager controller/webhook installed on hub.",
              "type": "string"
            },
            "deployOption": {
              "description": "DeployOption contains the options of deploying a cluster-manager Default mode is used if DeployOption is not set.",
              "type": "object",
              "required": [
                "mode"
              ],
              "properties": {
                "hosted": {
                  "description": "Hosted includes configurations we need for clustermanager in the Hosted mode.",
                  "type": "object",
                  "properties": {
                    "registrationWebhookConfiguration": {
                      "description": "RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.",
                      "type": "object",
                      "required": [
                        "address"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address represents the address of a webhook-server. It could be in IP format or fqdn format. The Address must be reachable by apiserver of the hub cluster.",
                          "type": "string",
                          "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                        },
                        "port": {
                          "description": "Port represents the port of a webhook-server. The default value of Port is 443.",
                          "type": "integer",
                          "format": "int32",
                          "maximum": 65535
                        }
                      }
                    },
                    "workWebhookConfiguration": {
                      "description": "WorkWebhookConfiguration represents the customized webhook-server configuration of work.",
                      "type": "object",
                      "required": [
                        "address"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address represents the address of a webhook-server. It could be in IP format or fqdn format. The Address must be reachable by apiserver of the hub cluster.",
                          "type": "string",
                          "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                        },
                        "port": {
                          "description": "Port represents the port of a webhook-server. The default value of Port is 443.",
                          "type": "integer",
                          "format": "int32",
                          "maximum": 65535
                        }
                      }
                    }
                  }
                },
                "mode": {
                  "description": "Mode can be Default or Hosted. In Default mode, the Hub is installed as a whole and all parts of Hub are deployed in the same cluster. In Hosted mode, only crd and configurations are installed on one cluster(defined as hub-cluster). Controllers run in another cluster (defined as management-cluster) and connect to the hub with the kubeconfig in secret of \"external-hub-kubeconfig\"(a kubeconfig of hub-cluster with cluster-admin permission). Note: Do not modify the Mode field once it's applied.",
                  "type": "string",
                  "enum": [
                    "Default",
                    "Hosted"
                  ]
                }
              }
            },
            "nodePlacement": {
              "description": "NodePlacement enables explicit control over the scheduling of the deployed pods.",
              "type": "object",
              "properties": {
                "nodeSelector": {
                  "description": "NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tolerations": {
                  "description": "Tolerations are attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "placementImagePullSpec": {
              "description": "PlacementImagePullSpec represents the desired image configuration of placement controller/webhook installed on hub.",
              "type": "string"
            },
            "registrationConfiguration": {
              "description": "RegistrationConfiguration contains the configuration of registration",
              "type": "object",
              "properties": {
                "autoApproveUsers": {
                  "description": "AutoApproveUser represents a list of users that can auto approve CSR and accept client. If the credential of the bootstrap-hub-kubeconfig matches to the users, the cluster created by the bootstrap-hub-kubeconfig will be auto-registered into the hub cluster. This takes effect only when ManagedClusterAutoApproval feature gate is enabled.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "featureGates": {
                  "description": "FeatureGates represents the list of feature gates for registration If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "feature"
                    ],
                    "properties": {
                      "feature": {
                        "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
                        "type": "string",
                        "enum": [
                          "Enable",
                          "Disable"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "registrationImagePullSpec": {
              "description": "RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.",
              "type": "string"
            },
            "resourceRequirement": {
              "description": "ResourceRequirement specify QoS classes of deployments managed by clustermanager. It applies to all the containers in the deployments.",
              "type": "object",
              "properties": {
                "resourceRequirements": {
                  "description": "ResourceRequirements defines resource requests and limits when Type is ResourceQosClassResourceRequirement",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Default",
                    "BestEffort",
                    "ResourceRequirement"
                  ]
                }
              }
            },
            "workConfiguration": {
              "description": "WorkConfiguration contains the configuration of work",
              "type": "object",
              "properties": {
                "featureGates": {
                  "description": "FeatureGates represents the list of feature gates for work If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "feature"
                    ],
                    "properties": {
                      "feature": {
                        "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
                        "type": "string",
                        "enum": [
                          "Enable",
                          "Disable"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "workImagePullSpec": {
              "description": "WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Status represents the current status of controllers that govern the lifecycle of managed clusters.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: Components in hub are applied. Available: Components in hub are available and ready to serve. Progressing: Components in hub are in a transitioning state. Degraded: Components in hub do not match the desired configuration and only provide degraded service.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "generations": {
              "description": "Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the resource that you're tracking",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the resource that controller applies",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the resource that you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the resource that you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the resource that you're tracking",
                    "type": "string"
                  },
                  "version": {
                    "description": "version is the version of the resource that you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "relatedResources": {
              "description": "RelatedResources are used to track the resources that are related to this ClusterManager.",
              "type": "array",
              "items": {
                "description": "RelatedResourceMeta represents the resource that is managed by an operator",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the resource that you're tracking",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is the name of the resource that you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the resource that you're tracking",
                    "type": "string"
                  },
                  "version": {
                    "description": "version is the version of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManager",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.ClusterManagerList": {
      "description": "ClusterManagerList is a list of ClusterManager",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of clustermanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "ClusterManagerList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.Klusterlet": {
      "description": "Klusterlet represents controllers to install the resources for a managed cluster. When configured, the Klusterlet requires a secret named bootstrap-hub-kubeconfig in the agent namespace to allow API requests to the hub for the registration protocol. In Hosted mode, the Klusterlet requires an additional secret named external-managed-kubeconfig in the agent namespace to allow API requests to the managed cluster for resources installation.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired deployment configuration of Klusterlet agent.",
          "type": "object",
          "properties": {
            "clusterName": {
              "description": "ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on OpenShift.",
              "type": "string",
              "maxLength": 63,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "deployOption": {
              "description": "DeployOption contains the options of deploying a klusterlet",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "Mode can be Default, Hosted, Singleton or SingletonHosted. It is Default mode if not specified In Default mode, all klusterlet related resources are deployed on the managed cluster. In Hosted mode, only crd and configurations are installed on the spoke/managed cluster. Controllers run in another cluster (defined as management-cluster) and connect to the mangaged cluster with the kubeconfig in secret of \"external-managed-kubeconfig\"(a kubeconfig of managed-cluster with cluster-admin permission). In Singleton mode, registration/work agent is started as a single deployment. In SingletonHosted mode, agent is started as a single deployment in hosted mode. Note: Do not modify the Mode field once it's applied.",
                  "type": "string"
                }
              }
            },
            "externalServerURLs": {
              "description": "ExternalServerURLs represents a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.",
              "type": "array",
              "items": {
                "description": "ServerURL represents the apiserver url and ca bundle that is accessible externally",
                "type": "object",
                "properties": {
                  "caBundle": {
                    "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
                    "type": "string",
                    "format": "byte"
                  },
                  "url": {
                    "description": "URL is the url of apiserver endpoint of the managed cluster.",
                    "type": "string"
                  }
                }
              }
            },
            "hubApiServerHostAlias": {
              "description": "HubApiServerHostAlias contains the host alias for hub api server. registration-agent and work-agent will use it to communicate with hub api server.",
              "type": "object",
              "required": [
                "hostname",
                "ip"
              ],
              "properties": {
                "hostname": {
                  "description": "Hostname for the above IP address.",
                  "type": "string",
                  "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                },
                "ip": {
                  "description": "IP address of the host file entry.",
                  "type": "string",
                  "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
                }
              }
            },
            "imagePullSpec": {
              "description": "ImagePullSpec represents the desired image configuration of agent, it takes effect only when singleton mode is set. quay.io/open-cluster-management.io/registration-operator:latest will be used if unspecified",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace is the namespace to deploy the agent on the managed cluster. The namespace must have a prefix of \"open-cluster-management-\", and if it is not set, the namespace of \"open-cluster-management-agent\" is used to deploy agent. In addition, the add-ons are deployed to the namespace of \"{Namespace}-addon\". In the Hosted mode, this namespace still exists on the managed cluster to contain necessary resources, like service accounts, roles and rolebindings, while the agent is deployed to the namespace with the same name as klusterlet on the management cluster.",
              "type": "string",
              "maxLength": 63,
              "pattern": "^open-cluster-management-[-a-z0-9]*[a-z0-9]$"
            },
            "nodePlacement": {
              "description": "NodePlacement enables explicit control over the scheduling of the deployed pods.",
              "type": "object",
              "properties": {
                "nodeSelector": {
                  "description": "NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tolerations": {
                  "description": "Tolerations are attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "priorityClassName": {
              "description": "PriorityClassName is the name of the PriorityClass that will be used by the deployed klusterlet agent. It will be ignored when the PriorityClass/v1 API is not available on the managed cluster.",
              "type": "string"
            },
            "registrationConfiguration": {
              "description": "RegistrationConfiguration contains the configuration of registration",
              "type": "object",
              "properties": {
                "clientCertExpirationSeconds": {
                  "description": "clientCertExpirationSeconds represents the seconds of a client certificate to expire. If it is not set or 0, the default duration seconds will be set by the hub cluster. If the value is larger than the max signing duration seconds set on the hub cluster, the max signing duration seconds will be set.",
                  "type": "integer",
                  "format": "int32"
                },
                "clusterAnnotations": {
                  "description": "ClusterAnnotations is annotations with the reserve prefix \"agent.open-cluster-management.io\" set on ManagedCluster when creating only, other actors can update it afterwards.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "featureGates": {
                  "description": "FeatureGates represents the list of feature gates for registration If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "feature"
                    ],
                    "properties": {
                      "feature": {
                        "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
                        "type": "string",
                        "enum": [
                          "Enable",
                          "Disable"
                        ]
                      }
                    }
                  }
                },
                "kubeAPIBurst": {
                  "description": "KubeAPIBurst indicates the maximum burst of the throttle while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 100",
                  "type": "integer",
                  "format": "int32"
                },
                "kubeAPIQPS": {
                  "description": "KubeAPIQPS indicates the maximum QPS while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 50",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "registrationImagePullSpec": {
              "description": "RegistrationImagePullSpec represents the desired image configuration of registration agent. quay.io/open-cluster-management.io/registration:latest will be used if unspecified.",
              "type": "string"
            },
            "resourceRequirement": {
              "description": "ResourceRequirement specify QoS classes of deployments managed by klusterlet. It applies to all the containers in the deployments.",
              "type": "object",
              "properties": {
                "resourceRequirements": {
                  "description": "ResourceRequirements defines resource requests and limits when Type is ResourceQosClassResourceRequirement",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Default",
                    "BestEffort",
                    "ResourceRequirement"
                  ]
                }
              }
            },
            "workConfiguration": {
              "description": "WorkConfiguration contains the configuration of work",
              "type": "object",
              "properties": {
                "featureGates": {
                  "description": "FeatureGates represents the list of feature gates for work If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "feature"
                    ],
                    "properties": {
                      "feature": {
                        "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
                        "type": "string",
                        "enum": [
                          "Enable",
                          "Disable"
                        ]
                      }
                    }
                  }
                },
                "kubeAPIBurst": {
                  "description": "KubeAPIBurst indicates the maximum burst of the throttle while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 100",
                  "type": "integer",
                  "format": "int32"
                },
                "kubeAPIQPS": {
                  "description": "KubeAPIQPS indicates the maximum QPS while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 50",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "workImagePullSpec": {
              "description": "WorkImagePullSpec represents the desired image configuration of work agent. quay.io/open-cluster-management.io/work:latest will be used if unspecified.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Status represents the current status of Klusterlet agent.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: Components have been applied in the managed cluster. Available: Components in the managed cluster are available and ready to serve. Progressing: Components in the managed cluster are in a transitioning state. Degraded: Components in the managed cluster do not match the desired configuration and only provide degraded service.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "generations": {
              "description": "Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the resource that you're tracking",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the resource that controller applies",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the resource that you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the resource that you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the resource that you're tracking",
                    "type": "string"
                  },
                  "version": {
                    "description": "version is the version of the resource that you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "ObservedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "relatedResources": {
              "description": "RelatedResources are used to track the resources that are related to this Klusterlet.",
              "type": "array",
              "items": {
                "description": "RelatedResourceMeta represents the resource that is managed by an operator",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the resource that you're tracking",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is the name of the resource that you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the resource that you're tracking",
                    "type": "string"
                  },
                  "version": {
                    "description": "version is the version of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "Klusterlet",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.KlusterletList": {
      "description": "KlusterletList is a list of Klusterlet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of klusterlets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "KlusterletList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.MultiClusterHub": {
      "description": "MultiClusterHub defines the configuration for an instance of the MultiCluster Hub",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "MultiClusterHubSpec defines the desired state of MultiClusterHub",
          "type": "object",
          "properties": {
            "availabilityConfig": {
              "description": "Specifies deployment replication for improved availability. Options are: Basic and High (default)",
              "type": "string"
            },
            "customCAConfigmap": {
              "description": "(Deprecated) Provide the customized OpenShift default ingress CA certificate to RHACM",
              "type": "string"
            },
            "disableHubSelfManagement": {
              "description": "Disable automatic import of the hub cluster as a managed cluster",
              "type": "boolean"
            },
            "disableUpdateClusterImageSets": {
              "description": "Disable automatic update of ClusterImageSets",
              "type": "boolean"
            },
            "enableClusterBackup": {
              "description": "(Deprecated) Enable cluster backup",
              "type": "boolean"
            },
            "enableClusterProxyAddon": {
              "description": "(Deprecated) Enable cluster proxy addon",
              "type": "boolean"
            },
            "hive": {
              "description": "(Deprecated) Overrides for the default HiveConfig spec",
              "type": "object",
              "required": [
                "failedProvisionConfig"
              ],
              "properties": {
                "additionalCertificateAuthorities": {
                  "description": "(Deprecated) AdditionalCertificateAuthorities is a list of references to secrets in the 'hive' namespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.",
                  "type": "array",
                  "items": {
                    "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "backup": {
                  "description": "(Deprecated) Backup specifies configuration for backup integration. If absent, backup integration will be disabled.",
                  "type": "object",
                  "properties": {
                    "minBackupPeriodSeconds": {
                      "description": "(Deprecated) MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.",
                      "type": "integer"
                    },
                    "velero": {
                      "description": "(Deprecated) Velero specifies configuration for the Velero backup integration.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "description": "(Deprecated) Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "externalDNS": {
                  "description": "(Deprecated) ExternalDNS specifies configuration for external-dns if it is to be deployed by Hive. If absent, external-dns will not be deployed.",
                  "type": "object",
                  "properties": {
                    "aws": {
                      "description": "(Deprecated) AWS contains AWS-specific settings for external DNS",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "(Deprecated) Credentials references a secret that will be used to authenticate with AWS Route53. It will need permission to manage entries in each of the managed domains for this cluster. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      }
                    },
                    "gcp": {
                      "description": "(Deprecated) GCP contains GCP-specific settings for external DNS",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "(Deprecated) Credentials references a secret that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. Secret should have a key names 'osServiceAccount.json'. The credentials must specify the project to use.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      }
                    }
                  }
                },
                "failedProvisionConfig": {
                  "description": "(Deprecated) FailedProvisionConfig is used to configure settings related to handling provision failures.",
                  "type": "object",
                  "properties": {
                    "skipGatherLogs": {
                      "description": "(Deprecated) SkipGatherLogs disables functionality that attempts to gather full logs from the cluster if an installation fails for any reason. The logs will be stored in a persistent volume for up to 7 days.",
                      "type": "boolean"
                    }
                  }
                },
                "globalPullSecret": {
                  "description": "(Deprecated) GlobalPullSecret is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "maintenanceMode": {
                  "description": "(Deprecated) MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.",
                  "type": "boolean"
                }
              }
            },
            "imagePullSecret": {
              "description": "Override pull secret for accessing MultiClusterHub operand and endpoint images",
              "type": "string"
            },
            "ingress": {
              "description": "(Deprecated) Configuration options for ingress management",
              "type": "object",
              "properties": {
                "sslCiphers": {
                  "description": "List of SSL ciphers enabled for management ingress. Defaults to full list of supported ciphers",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "nodeSelector": {
              "description": "Set the nodeselectors",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "overrides": {
              "description": "Developer Overrides",
              "type": "object",
              "properties": {
                "components": {
                  "description": "Provides optional configuration for components",
                  "type": "array",
                  "items": {
                    "description": "ComponentConfig provides optional configuration items for individual components",
                    "type": "object",
                    "required": [
                      "enabled",
                      "name"
                    ],
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "imagePullPolicy": {
                  "description": "Pull policy of the MultiCluster hub images",
                  "type": "string"
                }
              }
            },
            "separateCertificateManagement": {
              "description": "(Deprecated) Install cert-manager into its own namespace",
              "type": "boolean"
            },
            "tolerations": {
              "description": "Tolerations causes all components to tolerate any taints.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "MultiClusterHubStatus defines the observed state of MultiClusterHub",
          "type": "object",
          "properties": {
            "components": {
              "description": "Components []ComponentCondition `json:\"manifests,omitempty\"`",
              "type": "object",
              "additionalProperties": {
                "description": "StatusCondition contains condition information.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition changed from one status to another.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "Message is a human-readable message indicating details about the last status change.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason is a (brief) reason for the condition's last status change.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the status of the condition. One of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type is the type of the cluster condition.",
                    "type": "string"
                  }
                }
              }
            },
            "conditions": {
              "description": "Conditions contains the different condition statuses for the MultiClusterHub",
              "type": "array",
              "items": {
                "description": "StatusCondition contains condition information.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition changed from one status to another.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "Message is a human-readable message indicating details about the last status change.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason is a (brief) reason for the condition's last status change.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the status of the condition. One of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type is the type of the cluster condition.",
                    "type": "string"
                  }
                }
              }
            },
            "currentVersion": {
              "description": "CurrentVersion indicates the current version",
              "type": "string"
            },
            "desiredVersion": {
              "description": "DesiredVersion indicates the desired version",
              "type": "string"
            },
            "phase": {
              "description": "Represents the running phase of the MultiClusterHub",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHub",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.operator.v1.MultiClusterHubList": {
      "description": "MultiClusterHubList is a list of MultiClusterHub",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of multiclusterhubs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.open-cluster-management.io",
          "kind": "MultiClusterHubList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.CertificatePolicy": {
      "description": "CertificatePolicy is the Schema for the certificatepolicies API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "CertificatePolicySpec defines the desired state of CertificatePolicy",
          "type": "object",
          "properties": {
            "allowedSANPattern": {
              "description": "A pattern that must match any defined SAN entries in the certificate for the certificate to be compliant.  Golang's regexp syntax only.",
              "type": "string",
              "minLength": 1
            },
            "disallowedSANPattern": {
              "description": "A pattern that must not match any defined SAN entries in the certificate for the certificate to be compliant. Golang's regexp syntax only.",
              "type": "string",
              "minLength": 1
            },
            "labelSelector": {
              "description": "Restrict the secrets that will be checked to the ones that contain these labels.",
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "minLength": 1
              }
            },
            "maximumCADuration": {
              "description": "Maximum CA duration for a signing certificate, longer duration is considered non-compliant. Golang's time units only.",
              "type": "string",
              "pattern": "^(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))+$"
            },
            "maximumDuration": {
              "description": "Maximum duration for a certificate, longer duration is considered non-compliant. Golang's time units only.",
              "type": "string",
              "pattern": "^(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))+$"
            },
            "minimumCADuration": {
              "description": "Minimum CA duration before a signing certificate expires that it is considered non-compliant. Golang's time units only.",
              "type": "string",
              "pattern": "^(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))+$"
            },
            "minimumDuration": {
              "description": "Minimum duration before a certificate expires that it is considered non-compliant. Golang's time units only.",
              "type": "string",
              "pattern": "^(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))+$"
            },
            "namespaceSelector": {
              "description": "'namespaceSelector' defines the list of namespaces to include/exclude for objects defined in spec.objectTemplates. All selector rules are ANDed. If 'include' is not provided but 'matchLabels' and/or 'matchExpressions' are, 'include' will behave as if ['*'] were given. If 'matchExpressions' and 'matchLabels' are both not provided, 'include' must be provided to retrieve namespaces.",
              "type": "object",
              "properties": {
                "exclude": {
                  "description": "'exclude' is an array of filepath expressions to exclude objects by name.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "include": {
                  "description": "'include' is an array of filepath expressions to include objects by name.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "matchExpressions": {
                  "description": "'matchExpressions' is an array of label selector requirements matching objects by label.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "'matchLabels' is a map of {key,value} pairs matching objects by label.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "remediationAction": {
              "description": "Only Inform is currently supported. Setting this to Enforce will have the same effect as Inform.",
              "type": "string",
              "enum": [
                "Inform",
                "inform",
                "Enforce",
                "enforce"
              ]
            },
            "severity": {
              "description": "low, medium, high, or critical",
              "type": "string",
              "enum": [
                "low",
                "Low",
                "medium",
                "Medium",
                "high",
                "High",
                "critical",
                "Critical"
              ]
            }
          }
        },
        "status": {
          "description": "CertificatePolicyStatus defines the observed state of CertificatePolicy",
          "type": "object",
          "properties": {
            "compliancyDetails": {
              "description": "map of namespaces to its compliancy details",
              "type": "object",
              "additionalProperties": {
                "description": "CompliancyDetails defines the all the details related to whether or not the policy is compliant",
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "nonCompliantCertificates": {
                    "type": "integer"
                  },
                  "nonCompliantCertificatesList": {
                    "type": "object",
                    "additionalProperties": {
                      "description": "Cert contains its related secret and when it expires",
                      "type": "object",
                      "properties": {
                        "ca": {
                          "type": "boolean"
                        },
                        "duration": {
                          "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "expiration": {
                          "type": "string"
                        },
                        "expiry": {
                          "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "sans": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "secretName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "compliant": {
              "description": "Compliant, NonCompliant, UnknownCompliancy",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicy",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.CertificatePolicyList": {
      "description": "CertificatePolicyList is a list of CertificatePolicy",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of certificatepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.CertificatePolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "CertificatePolicyList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.ConfigurationPolicy": {
      "description": "ConfigurationPolicy is the Schema for the configurationpolicies API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConfigurationPolicySpec defines the desired state of ConfigurationPolicy",
          "type": "object",
          "required": [
            "remediationAction"
          ],
          "properties": {
            "evaluationInterval": {
              "description": "Configures the minimum elapsed time before a ConfigurationPolicy is reevaluated. If the policy spec is changed, or if the list of namespaces selected by the policy changes, the policy may be evaluated regardless of the settings here.",
              "type": "object",
              "properties": {
                "compliant": {
                  "description": "The minimum elapsed time before a ConfigurationPolicy is reevaluated when in the compliant state. Set this to \"never\" to disable reevaluation when in the compliant state.",
                  "type": "string",
                  "pattern": "^(?:(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))|never)+$"
                },
                "noncompliant": {
                  "description": "The minimum elapsed time before a ConfigurationPolicy is reevaluated when in the noncompliant state. Set this to \"never\" to disable reevaluation when in the noncompliant state.",
                  "type": "string",
                  "pattern": "^(?:(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))|never)+$"
                }
              }
            },
            "namespaceSelector": {
              "description": "'namespaceSelector' defines the list of namespaces to include/exclude for objects defined in spec.objectTemplates. All selector rules are ANDed. If 'include' is not provided but 'matchLabels' and/or 'matchExpressions' are, 'include' will behave as if ['*'] were given. If 'matchExpressions' and 'matchLabels' are both not provided, 'include' must be provided to retrieve namespaces.",
              "type": "object",
              "properties": {
                "exclude": {
                  "description": "'exclude' is an array of filepath expressions to exclude objects by name.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "include": {
                  "description": "'include' is an array of filepath expressions to include objects by name.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "matchExpressions": {
                  "description": "'matchExpressions' is an array of label selector requirements matching objects by label.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "'matchLabels' is a map of {key,value} pairs matching objects by label.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "object-templates": {
              "description": "'object-templates' and 'object-templates-raw' are arrays of objects for the configuration policy to check, create, modify, or delete on the cluster. 'object-templates' is an array of objects, while 'object-templates-raw' is a string containing an array of objects in YAML format. Only one of the two object-templates variables can be set in a given configurationPolicy.",
              "type": "array",
              "items": {
                "description": "ObjectTemplate describes how an object should look",
                "type": "object",
                "required": [
                  "complianceType",
                  "objectDefinition"
                ],
                "properties": {
                  "complianceType": {
                    "description": "ComplianceType specifies whether it is: musthave, mustnothave, mustonlyhave",
                    "type": "string",
                    "enum": [
                      "MustHave",
                      "Musthave",
                      "musthave",
                      "MustOnlyHave",
                      "Mustonlyhave",
                      "mustonlyhave",
                      "MustNotHave",
                      "Mustnothave",
                      "mustnothave"
                    ]
                  },
                  "metadataComplianceType": {
                    "description": "MetadataComplianceType describes how to check compliance for the labels/annotations of a given object",
                    "type": "string",
                    "enum": [
                      "MustHave",
                      "Musthave",
                      "musthave",
                      "MustOnlyHave",
                      "Mustonlyhave",
                      "mustonlyhave"
                    ]
                  },
                  "objectDefinition": {
                    "description": "ObjectDefinition defines required fields for the object",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "recordDiff": {
                    "description": "RecordDiff specifies whether (and where) to log the diff between the object on the cluster and the objectDefinition in the policy. Defaults to \"None\".",
                    "type": "string",
                    "enum": [
                      "Log",
                      "None"
                    ]
                  }
                }
              }
            },
            "object-templates-raw": {
              "description": "'object-templates' and 'object-templates-raw' are arrays of objects for the configuration policy to check, create, modify, or delete on the cluster. 'object-templates' is an array of objects, while 'object-templates-raw' is a string containing an array of objects in YAML format. Only one of the two object-templates variables can be set in a given configurationPolicy.",
              "type": "string"
            },
            "pruneObjectBehavior": {
              "description": "PruneObjectBehavior is used to remove objects that are managed by the policy upon policy deletion.",
              "type": "string",
              "enum": [
                "DeleteAll",
                "DeleteIfCreated",
                "None"
              ]
            },
            "remediationAction": {
              "description": "RemediationAction : enforce or inform",
              "type": "string",
              "enum": [
                "Inform",
                "inform",
                "Enforce",
                "enforce"
              ]
            },
            "severity": {
              "description": "Severity : low, medium, high, or critical",
              "type": "string",
              "enum": [
                "low",
                "Low",
                "medium",
                "Medium",
                "high",
                "High",
                "critical",
                "Critical"
              ]
            }
          }
        },
        "status": {
          "description": "ConfigurationPolicyStatus defines the observed state of ConfigurationPolicy",
          "type": "object",
          "properties": {
            "compliancyDetails": {
              "type": "array",
              "items": {
                "description": "TemplateStatus hold the status result",
                "type": "object",
                "properties": {
                  "Compliant": {
                    "description": "ComplianceState shows the state of enforcement",
                    "type": "string"
                  },
                  "Validity": {
                    "description": "Validity describes if it is valid or not",
                    "type": "object",
                    "properties": {
                      "reason": {
                        "type": "string"
                      },
                      "valid": {
                        "type": "boolean"
                      }
                    }
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "description": "Condition is the base struct for representing resource conditions",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "The last time the condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition, e.g Complete or Failed.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "compliant": {
              "description": "ComplianceState shows the state of enforcement",
              "type": "string"
            },
            "lastEvaluated": {
              "description": "An ISO-8601 timestamp of the last time the policy was evaluated",
              "type": "string"
            },
            "lastEvaluatedGeneration": {
              "description": "The generation of the ConfigurationPolicy object when it was last evaluated",
              "type": "integer",
              "format": "int64"
            },
            "relatedObjects": {
              "description": "List of resources processed by the policy",
              "type": "array",
              "items": {
                "description": "RelatedObject is the list of objects matched by this Policy resource.",
                "type": "object",
                "properties": {
                  "compliant": {
                    "type": "string"
                  },
                  "object": {
                    "description": "ObjectResource is an object identified by the policy as a resource that needs to be validated.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Metadata values from the referent.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "createdByPolicy": {
                        "description": "Whether the object was created by the parent policy",
                        "type": "boolean"
                      },
                      "uid": {
                        "description": "Store object UID to help track object ownership for deletion",
                        "type": "string"
                      }
                    }
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicy",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.ConfigurationPolicyList": {
      "description": "ConfigurationPolicyList is a list of ConfigurationPolicy",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of configurationpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.ConfigurationPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "ConfigurationPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.IamPolicy": {
      "description": "IamPolicy is the Schema for the iampolicies API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "IamPolicySpec defines the desired state of IamPolicy",
          "type": "object",
          "properties": {
            "clusterRole": {
              "description": "Name of the cluster role referenced by the cluster role bindings, defaults to \"cluster-admin\" if none specified",
              "type": "string",
              "minLength": 1
            },
            "ignoreClusterRoleBindings": {
              "description": "A list of regex values signifying which cluster role binding names to ignore. By default, all cluster role bindings that have a name which starts with system: will be ignored. It is recommended to set this to a stricter value.",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "labelSelector": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "maxClusterRoleBindingUsers": {
              "description": "Maximum number of cluster role binding users still valid before it is considered non-compliant",
              "type": "integer",
              "minimum": 1
            },
            "namespaceSelector": {
              "description": "Selecting a list of namespaces where the policy applies. This field is obsolete and does not do anything.",
              "type": "object",
              "properties": {
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            },
            "remediationAction": {
              "description": "Only Inform is currently supported. Setting this to Enforce will have the same effect as Inform.",
              "type": "string",
              "enum": [
                "Inform",
                "inform",
                "Enforce",
                "enforce"
              ]
            },
            "severity": {
              "description": "low, medium, high, or critical",
              "type": "string",
              "enum": [
                "low",
                "Low",
                "medium",
                "Medium",
                "high",
                "High",
                "critical",
                "Critical"
              ]
            }
          }
        },
        "status": {
          "description": "IamPolicyStatus defines the observed state of IamPolicy",
          "type": "object",
          "properties": {
            "compliancyDetails": {
              "description": "reason for non-compliancy",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "compliant": {
              "description": "Compliant, NonCompliant, UnknownCompliancy",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicy",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.IamPolicyList": {
      "description": "IamPolicyList is a list of IamPolicy",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of iampolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.IamPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "IamPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.PlacementBinding": {
      "description": "PlacementBinding is the Schema for the placementbindings API",
      "type": "object",
      "required": [
        "placementRef",
        "subjects"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "bindingOverrides": {
          "description": "BindingOverrides defines the overrides to the Subjects",
          "type": "object",
          "properties": {
            "remediationAction": {
              "description": "This field overrides the policy remediationAction on target clusters",
              "type": "string",
              "enum": [
                "Enforce",
                "enforce"
              ]
            }
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "placementRef": {
          "description": "PlacementSubject defines the resource that can be used as PlacementBinding placementRef",
          "type": "object",
          "required": [
            "apiGroup",
            "kind",
            "name"
          ],
          "properties": {
            "apiGroup": {
              "type": "string",
              "minLength": 1,
              "enum": [
                "apps.open-cluster-management.io",
                "cluster.open-cluster-management.io"
              ]
            },
            "kind": {
              "type": "string",
              "minLength": 1,
              "enum": [
                "PlacementRule",
                "Placement"
              ]
            },
            "name": {
              "type": "string",
              "minLength": 1
            }
          }
        },
        "status": {
          "description": "PlacementBindingStatus defines the observed state of PlacementBinding",
          "type": "object"
        },
        "subFilter": {
          "description": "This field provides the ability to select a subset of bound clusters",
          "type": "string",
          "enum": [
            "restricted"
          ]
        },
        "subjects": {
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "Subject defines the resource that can be used as PlacementBinding subject",
            "type": "object",
            "required": [
              "apiGroup",
              "kind",
              "name"
            ],
            "properties": {
              "apiGroup": {
                "type": "string",
                "minLength": 1,
                "enum": [
                  "policy.open-cluster-management.io"
                ]
              },
              "kind": {
                "type": "string",
                "minLength": 1,
                "enum": [
                  "Policy",
                  "PolicySet"
                ]
              },
              "name": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBinding",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.PlacementBindingList": {
      "description": "PlacementBindingList is a list of PlacementBinding",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of placementbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PlacementBindingList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.Policy": {
      "description": "Policy is the Schema for the policies API",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "PolicySpec defines the desired state of Policy",
          "type": "object",
          "required": [
            "disabled",
            "policy-templates"
          ],
          "properties": {
            "copyPolicyMetadata": {
              "description": "If set to true (default), all the policy's labels and annotations will be copied to the replicated policy. If set to false, only the policy framework specific policy labels and annotations will be copied to the replicated policy.",
              "type": "boolean"
            },
            "dependencies": {
              "description": "PolicyDependencies that apply to each template in this Policy",
              "type": "array",
              "items": {
                "description": "Each PolicyDependency defines an object reference which must be in a certain compliance state before the policy should be created.",
                "type": "object",
                "required": [
                  "compliance",
                  "name"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "compliance": {
                    "description": "The ComplianceState (at path .status.compliant) required before the policy should be created",
                    "type": "string",
                    "enum": [
                      "Compliant",
                      "Pending",
                      "NonCompliant"
                    ]
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the object to be checked",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the object to be checked (optional)",
                    "type": "string"
                  }
                }
              }
            },
            "disabled": {
              "description": "This provides the ability to enable and disable your policies.",
              "type": "boolean"
            },
            "policy-templates": {
              "description": "Used to create one or more policies to apply to a managed cluster",
              "type": "array",
              "items": {
                "description": "PolicyTemplate template for custom security policy",
                "type": "object",
                "required": [
                  "objectDefinition"
                ],
                "properties": {
                  "extraDependencies": {
                    "description": "Additional PolicyDependencies that only apply to this template",
                    "type": "array",
                    "items": {
                      "description": "Each PolicyDependency defines an object reference which must be in a certain compliance state before the policy should be created.",
                      "type": "object",
                      "required": [
                        "compliance",
                        "name"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "compliance": {
                          "description": "The ComplianceState (at path .status.compliant) required before the policy should be created",
                          "type": "string",
                          "enum": [
                            "Compliant",
                            "Pending",
                            "NonCompliant"
                          ]
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the object to be checked",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "The namespace of the object to be checked (optional)",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ignorePending": {
                    "description": "Ignore this template's Pending status when calculating the overall Policy status",
                    "type": "boolean"
                  },
                  "objectDefinition": {
                    "description": "A Kubernetes object defining the policy to apply to a managed cluster",
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            },
            "remediationAction": {
              "description": "This value (Enforce or Inform) will override the remediationAction on each template",
              "type": "string",
              "enum": [
                "Inform",
                "inform",
                "Enforce",
                "enforce"
              ]
            }
          }
        },
        "status": {
          "description": "PolicyStatus defines the observed state of Policy",
          "type": "object",
          "properties": {
            "compliant": {
              "description": "ComplianceState shows the state of enforcement",
              "type": "string",
              "enum": [
                "Compliant",
                "Pending",
                "NonCompliant"
              ]
            },
            "details": {
              "type": "array",
              "items": {
                "description": "DetailsPerTemplate defines compliance details and history",
                "type": "object",
                "properties": {
                  "compliant": {
                    "description": "ComplianceState shows the state of enforcement",
                    "type": "string"
                  },
                  "history": {
                    "type": "array",
                    "items": {
                      "description": "ComplianceHistory defines compliance details history",
                      "type": "object",
                      "properties": {
                        "eventName": {
                          "type": "string"
                        },
                        "lastTimestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "templateMeta": {
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            },
            "placement": {
              "type": "array",
              "items": {
                "description": "Placement defines the placement results",
                "type": "object",
                "properties": {
                  "decisions": {
                    "type": "array",
                    "items": {
                      "description": "PlacementDecision defines the decision made by controller",
                      "type": "object",
                      "properties": {
                        "clusterName": {
                          "type": "string"
                        },
                        "clusterNamespace": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "placement": {
                    "type": "string"
                  },
                  "placementBinding": {
                    "type": "string"
                  },
                  "placementRule": {
                    "type": "string"
                  },
                  "policySet": {
                    "type": "string"
                  }
                }
              }
            },
            "status": {
              "type": "array",
              "items": {
                "description": "CompliancePerClusterStatus defines compliance per cluster status",
                "type": "object",
                "properties": {
                  "clustername": {
                    "type": "string"
                  },
                  "clusternamespace": {
                    "type": "string"
                  },
                  "compliant": {
                    "description": "ComplianceState shows the state of enforcement",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "Policy",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1.PolicyList": {
      "description": "PolicyList is a list of Policy",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of policies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.OperatorPolicy": {
      "description": "OperatorPolicy is the Schema for the operatorpolicies API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorPolicySpec defines the desired state of OperatorPolicy",
          "type": "object",
          "required": [
            "complianceType",
            "subscription"
          ],
          "properties": {
            "complianceType": {
              "description": "ComplianceType describes whether we must or must not have a given resource",
              "type": "string",
              "enum": [
                "musthave"
              ]
            },
            "operatorGroup": {
              "description": "Include the name, namespace, and any `spec` fields for the OperatorGroup. For more info, see `kubectl explain operatorgroup.spec` or https://olm.operatorframework.io/docs/concepts/crds/operatorgroup/",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "remediationAction": {
              "description": "RemediationAction : enforce or inform",
              "type": "string",
              "enum": [
                "Inform",
                "inform",
                "Enforce",
                "enforce"
              ]
            },
            "severity": {
              "description": "Severity : low, medium, high, or critical",
              "type": "string",
              "enum": [
                "low",
                "Low",
                "medium",
                "Medium",
                "high",
                "High",
                "critical",
                "Critical"
              ]
            },
            "subscription": {
              "description": "Include the namespace, and any `spec` fields for the Subscription. For more info, see `kubectl explain subscription.spec` or https://olm.operatorframework.io/docs/concepts/crds/subscription/",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "versions": {
              "description": "Versions is a list of nonempty strings that specifies which installed versions are compliant when in 'inform' mode, and which installPlans are approved when in 'enforce' mode",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "status": {
          "description": "OperatorPolicyStatus defines the observed state of OperatorPolicy",
          "type": "object",
          "properties": {
            "compliant": {
              "description": "Most recent compliance state of the policy",
              "type": "string"
            },
            "conditions": {
              "description": "Historic details on the condition of the policy",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "type"
              ],
              "x-kubernetes-list-type": "map"
            },
            "relatedObjects": {
              "description": "List of resources processed by the policy",
              "type": "array",
              "items": {
                "description": "RelatedObject is the list of objects matched by this Policy resource.",
                "type": "object",
                "properties": {
                  "compliant": {
                    "type": "string"
                  },
                  "object": {
                    "description": "ObjectResource is an object identified by the policy as a resource that needs to be validated.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Metadata values from the referent.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "createdByPolicy": {
                        "description": "Whether the object was created by the parent policy",
                        "type": "boolean"
                      },
                      "uid": {
                        "description": "Store object UID to help track object ownership for deletion",
                        "type": "string"
                      }
                    }
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.OperatorPolicyList": {
      "description": "OperatorPolicyList is a list of OperatorPolicy",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of operatorpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.OperatorPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "OperatorPolicyList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomation": {
      "description": "PolicyAutomation is the Schema for the policyautomations API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "PolicyAutomationSpec defines the desired state of PolicyAutomation",
          "type": "object",
          "required": [
            "automationDef",
            "mode",
            "policyRef"
          ],
          "properties": {
            "automationDef": {
              "description": "AutomationDef defines the automation to invoke",
              "type": "object",
              "required": [
                "name",
                "secret"
              ],
              "properties": {
                "extra_vars": {
                  "description": "ExtraVars is passed to the Ansible job at execution time and is a known Ansible entity.",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "jobTtl": {
                  "description": "JobTTL sets the time to live for the Kubernetes AnsibleJob object after the Ansible job run has finished.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the Ansible Template to run in Tower as a job",
                  "type": "string",
                  "minLength": 1
                },
                "policyViolationsLimit": {
                  "description": "The maximum number of violating cluster contexts that will be provided to the Ansible job as extra variables.\nWhen policyViolationsLimit is set to 0, it means no limit.\nThe default value is 1000.",
                  "type": "integer",
                  "minimum": 0
                },
                "secret": {
                  "description": "TowerSecret is the name of the secret that contains the Ansible Automation Platform\ncredential.",
                  "type": "string",
                  "minLength": 1
                },
                "type": {
                  "description": "Type of the automation to invoke",
                  "type": "string"
                }
              }
            },
            "delayAfterRunSeconds": {
              "description": "DelayAfterRunSeconds sets the minimum number of seconds before\nan automation can run again due to a new violation on the same\nmanaged cluster. This only applies to the EveryEvent Mode.  The\ndefault value is 0.",
              "type": "integer",
              "minimum": 0
            },
            "eventHook": {
              "description": "EventHook decides when automation is going to be triggered",
              "type": "string",
              "enum": [
                "noncompliant"
              ]
            },
            "mode": {
              "description": "Mode decides how automation is going to be triggered",
              "type": "string",
              "enum": [
                "once",
                "everyEvent",
                "disabled"
              ]
            },
            "policyRef": {
              "description": "PolicyRef is the name of the policy that this automation resource\nis bound to.",
              "type": "string"
            },
            "rescanAfter": {
              "description": "RescanAfter is reserved for future use.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "PolicyAutomationStatus defines the observed state of PolicyAutomation",
          "type": "object",
          "properties": {
            "clustersWithEvent": {
              "description": "Cluster name as the key of ClustersWithEvent",
              "type": "object",
              "additionalProperties": {
                "description": "PolicyAutomation events on each target cluster",
                "type": "object",
                "required": [
                  "automationStartTime",
                  "eventTime"
                ],
                "properties": {
                  "automationStartTime": {
                    "description": "Policy automation start time for everyEvent mode",
                    "type": "string"
                  },
                  "eventTime": {
                    "description": "The last policy compliance transition event time",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomation",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomationList": {
      "description": "PolicyAutomationList is a list of PolicyAutomation",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of policyautomations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicyAutomationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.PolicySet": {
      "description": "PolicySet is the Schema for the policysets API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "PolicySetSpec describes a group of policies that are related and\ncan be placed on the same managed clusters.",
          "type": "object",
          "required": [
            "policies"
          ],
          "properties": {
            "description": {
              "description": "Description of this PolicySet.",
              "type": "string"
            },
            "policies": {
              "description": "Policies that are grouped together within the PolicySet.",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "status": {
          "description": "PolicySetStatus defines the observed state of PolicySet",
          "type": "object",
          "properties": {
            "compliant": {
              "type": "string"
            },
            "placement": {
              "type": "array",
              "items": {
                "description": "PolicySetStatusPlacement defines a placement object for the status",
                "type": "object",
                "properties": {
                  "placement": {
                    "type": "string"
                  },
                  "placementBinding": {
                    "type": "string"
                  },
                  "placementRule": {
                    "type": "string"
                  }
                }
              }
            },
            "statusMessage": {
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySet",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.policy.v1beta1.PolicySetList": {
      "description": "PolicySetList is a list of PolicySet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of policysets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.open-cluster-management.io",
          "kind": "PolicySetList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration": {
      "description": "ManagedProxyConfiguration is the Schema for the managedproxyconfigurations API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ManagedProxyConfigurationSpec is the prescription of ManagedProxyConfiguration",
          "type": "object",
          "required": [
            "authentication",
            "proxyAgent",
            "proxyServer"
          ],
          "properties": {
            "authentication": {
              "description": "`authentication` defines how the credentials for the authentication between proxy servers and proxy agents are signed and mounted.",
              "type": "object",
              "properties": {
                "dump": {
                  "description": "`dump` is where we store the signed certificates from signers.",
                  "type": "object",
                  "properties": {
                    "secrets": {
                      "description": "`secrets` is the names of the secrets for saving the signed certificates.",
                      "type": "object",
                      "properties": {
                        "signingAgentServerSecretName": {
                          "description": "`signingAgentServerSecretName` is the secret name of the proxy servers to receive tunneling handshakes from proxy agents.",
                          "type": "string"
                        },
                        "signingProxyClientSecretName": {
                          "description": "`signingProxyClientSecretName` is the secret name for requesting/streaming over the proxy server.",
                          "type": "string"
                        },
                        "signingProxyServerSecretName": {
                          "description": "`signingProxyServerSecretName` the secret name of the proxy server's listening certificates for serving proxy requests.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "signer": {
                  "description": "`signer` defines how we sign server and client certificates for the proxy servers and agents.",
                  "type": "object",
                  "properties": {
                    "selfSigned": {
                      "description": "`selfSigned` prescribes the detail of how we self-sign the certificates.",
                      "type": "object",
                      "properties": {
                        "additionalSANs": {
                          "description": "`additionalSANs` adds a few custom hostnames or IPs to the signing certificates.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": {
                      "description": "`type` is the supported type of signer. Currently only \"SelfSign\" supported.",
                      "type": "string",
                      "enum": [
                        "SelfSigned",
                        "Provided",
                        "CertManager"
                      ]
                    }
                  }
                }
              }
            },
            "deploy": {
              "description": "`deploy` is where we override miscellaneous details for deploying either proxy servers or agents.",
              "type": "object",
              "required": [
                "ports"
              ],
              "properties": {
                "ports": {
                  "description": "`ports` is the ports for proxying and tunneling.",
                  "type": "object",
                  "properties": {
                    "adminServer": {
                      "description": "`adminServer` is the port for debugging and operating.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "agentServer": {
                      "description": "`agentServer` is the listening port of proxy server for serving tunneling handshakes.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "healthServer": {
                      "description": "`healthServer` is for probing the healthiness.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "proxyServer": {
                      "description": "`proxyServer` is the listening port of proxy server for serving proxy requests.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            },
            "proxyAgent": {
              "description": "`proxyServer` structurelized the arguments for running proxy agents.",
              "type": "object",
              "required": [
                "image"
              ],
              "properties": {
                "additionalArgs": {
                  "description": "`additionalArgs` defines args used in proxy-agent.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "`image` is the container image of the proxy agent.",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "`imagePullSecrets` defines the imagePullSecrets used by proxy-agent",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "replicas": {
                  "description": "`replicas` is the replicas of the agents.",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "proxyServer": {
              "description": "`proxyServer` structurelized the arguments for running proxy servers.",
              "type": "object",
              "required": [
                "image"
              ],
              "properties": {
                "additionalArgs": {
                  "description": "`additionalArgs` adds arbitrary additional command line args to the proxy-server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "entrypoint": {
                  "description": "`entrypoint` defines how will the proxy agents connecting the servers.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "hostname": {
                      "description": "`hostname` points to a fixed hostname for serving agents' handshakes.",
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "loadBalancerService": {
                      "description": "`loadBalancerService` points to a load-balancer typed service in the hub cluster.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is the annoations of the load-balancer service. This is for allowing customizing service using vendor-specific extended annotations such as: - service.beta.kubernetes.io/alibaba-cloud-loadbalancer-address-type: \"intranet\" - service.beta.kubernetes.io/azure-load-balancer-internal: true",
                          "type": "array",
                          "items": {
                            "description": "AnnotationVar list of annotation variables to set in the LB Service.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "Key is the key of annotation",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value is the value of annotation",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "`name` is the name of the load-balancer service. And the namespace will align to where the proxy-servers are deployed.",
                          "type": "string"
                        }
                      }
                    },
                    "port": {
                      "description": "`port` is the target port to access proxy servers",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "type": {
                      "description": "`type` is the type of the entrypoint of the proxy servers. Currently supports \"Hostname\", \"LoadBalancerService\"",
                      "type": "string",
                      "enum": [
                        "Hostname",
                        "LoadBalancerService",
                        "PortForward"
                      ]
                    }
                  }
                },
                "image": {
                  "description": "`image` is the container image of the proxy servers.",
                  "type": "string"
                },
                "inClusterServiceName": {
                  "description": "`inClusterServiceName` is the name of the in-cluster service for proxying requests inside the hub cluster to the proxy servers.",
                  "type": "string"
                },
                "namespace": {
                  "description": "`namespace` is the namespace where we will deploy the proxy servers and related resources.",
                  "type": "string"
                },
                "nodePlacement": {
                  "description": "NodePlacement defines which Nodes the proxy server are scheduled on. The default is an empty list.",
                  "type": "object",
                  "properties": {
                    "nodeSelector": {
                      "description": "NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "tolerations": {
                      "description": "Tolerations is attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.",
                      "type": "array",
                      "items": {
                        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                        "type": "object",
                        "properties": {
                          "effect": {
                            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                            "type": "string"
                          },
                          "key": {
                            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                            "type": "string"
                          },
                          "tolerationSeconds": {
                            "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "value": {
                            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "replicas": {
                  "description": "`replicas` is the expected replicas of the proxy servers. Note that the replicas will also be reflected in the flag `--server-count` so that agents can discover all the server instances.",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "status": {
          "description": "ManagedProxyConfigurationStatus defines the observed state of ManagedProxyConfiguration",
          "type": "object",
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "lastObservedGeneration": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfigurationList": {
      "description": "ManagedProxyConfigurationList is a list of ManagedProxyConfiguration",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedproxyconfigurations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyConfigurationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver": {
      "description": "ManagedProxyServiceResolver defines a target service that need to expose from a set of managed clusters to the hub. To access a target service on a managed cluster from hub. First, users need to apply a proper ManagedProxyServiceResolver. The managed cluster should match the ManagedClusterSet in the ManagedProxyServiceResolver.Spec. The serviceNamespace and serviceName should also match the target service. A usage example: /examples/access-other-services/main.go",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ManagedProxyServiceResolverSpec defines the desired state of ManagedProxyServiceResolver.",
          "type": "object",
          "required": [
            "managedClusterSelector",
            "serviceSelector"
          ],
          "properties": {
            "managedClusterSelector": {
              "description": "ManagedClusterSelector selects a set of managed clusters.",
              "type": "object",
              "properties": {
                "managedClusterSet": {
                  "description": "ManagedClusterSet defines a set of managed clusters that need to expose the service.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the managed cluster set.",
                      "type": "string"
                    }
                  }
                },
                "type": {
                  "description": "Type represents the type of the selector. Now only ManagedClusterSet is supported.",
                  "type": "string",
                  "enum": [
                    "ManagedClusterSet"
                  ]
                }
              }
            },
            "serviceSelector": {
              "description": "ServiceSelector selects a service.",
              "type": "object",
              "properties": {
                "serviceRef": {
                  "description": "ServiceRef defines a service in a namespace.",
                  "type": "object",
                  "required": [
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name represents the name of the service.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace represents the namespace of the service.",
                      "type": "string"
                    }
                  }
                },
                "type": {
                  "description": "Type represents the type of the selector. Now only ServiceRef type is supported.",
                  "type": "string",
                  "enum": [
                    "ServiceRef"
                  ]
                }
              }
            }
          }
        },
        "status": {
          "description": "ManagedProxyServiceResolverStatus defines the observed state of ManagedProxyServiceResolver.",
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition statuses for this ManagedProxyServiceResolver.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolver",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolverList": {
      "description": "ManagedProxyServiceResolverList is a list of ManagedProxyServiceResolver",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedproxyserviceresolvers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.proxy.v1alpha1.ManagedProxyServiceResolver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "proxy.open-cluster-management.io",
          "kind": "ManagedProxyServiceResolverList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.rbac.v1alpha1.ClusterPermission": {
      "description": "ClusterPermission is the Schema for the clusterpermissions API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ClusterPermissionSpec defines the desired state of ClusterPermission",
          "type": "object",
          "properties": {
            "clusterRole": {
              "description": "ClusterRole represents the ClusterRole that is being created on the managed cluster",
              "type": "object",
              "required": [
                "rules"
              ],
              "properties": {
                "rules": {
                  "description": "Rules holds all the PolicyRules for this ClusterRole",
                  "type": "array",
                  "items": {
                    "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
                    "type": "object",
                    "required": [
                      "verbs"
                    ],
                    "properties": {
                      "apiGroups": {
                        "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "nonResourceURLs": {
                        "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "resourceNames": {
                        "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "resources": {
                        "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "verbs": {
                        "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "clusterRoleBinding": {
              "description": "ClusterRoleBinding represents the ClusterRoleBinding that is being created on the managed cluster",
              "type": "object",
              "required": [
                "subject"
              ],
              "properties": {
                "subject": {
                  "description": "Subject contains a reference to the object or user identities a ClusterPermission binding applies to. Besides the typical subject for a binding, a ManagedServiceAccount can be used as a subject as well.",
                  "type": "object",
                  "required": [
                    "kind",
                    "name"
                  ],
                  "properties": {
                    "apiGroup": {
                      "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the object being referenced.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                }
              }
            },
            "roleBindings": {
              "description": "RoleBindings represents RoleBindings that are being created on the managed cluster",
              "type": "array",
              "items": {
                "description": "RoleBinding represents the RoleBinding that is being created on the managed cluster",
                "type": "object",
                "required": [
                  "roleRef",
                  "subject"
                ],
                "properties": {
                  "namespace": {
                    "description": "Namespace of the Role for that is being created on the managed cluster",
                    "type": "string"
                  },
                  "namespaceSelector": {
                    "description": "NamespaceSelector define the general labelSelector which namespace to apply the rules to Note: the namespace must exists on the hub cluster",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "roleRef": {
                    "description": "RoleRef contains information that points to the role being used",
                    "type": "object",
                    "required": [
                      "kind"
                    ],
                    "properties": {
                      "kind": {
                        "description": "Kind is the type of resource being referenced",
                        "type": "string"
                      }
                    }
                  },
                  "subject": {
                    "description": "Subject contains a reference to the object or user identities a ClusterPermission binding applies to. Besides the typical subject for a binding, a ManagedServiceAccount can be used as a subject as well.",
                    "type": "object",
                    "required": [
                      "kind",
                      "name"
                    ],
                    "properties": {
                      "apiGroup": {
                        "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the object being referenced.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                }
              }
            },
            "roles": {
              "description": "Roles represents roles that are being created on the managed cluster",
              "type": "array",
              "items": {
                "description": "Role represents the Role that is being created on the managed cluster",
                "type": "object",
                "required": [
                  "rules"
                ],
                "properties": {
                  "namespace": {
                    "description": "Namespace of the Role for that is being created on the managed cluster",
                    "type": "string"
                  },
                  "namespaceSelector": {
                    "description": "NamespaceSelector define the general labelSelector which namespace to apply the rules to Note: the namespace must exists on the hub cluster",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "rules": {
                    "description": "Rules holds all the PolicyRules for this Role",
                    "type": "array",
                    "items": {
                      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
                      "type": "object",
                      "required": [
                        "verbs"
                      ],
                      "properties": {
                        "apiGroups": {
                          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "nonResourceURLs": {
                          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resourceNames": {
                          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resources": {
                          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "verbs": {
                          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ClusterPermissionStatus defines the observed state of ClusterPermission",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions is the condition list.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermission",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.rbac.v1alpha1.ClusterPermissionList": {
      "description": "ClusterPermissionList is a list of ClusterPermission",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of clusterpermissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.rbac.v1alpha1.ClusterPermission"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.open-cluster-management.io",
          "kind": "ClusterPermissionList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.search.v1alpha1.Search": {
      "description": "Search is the Schema for the searches API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "SearchSpec defines the desired state of Search",
          "type": "object",
          "properties": {
            "availabilityConfig": {
              "description": "[PLACEHOLDER, NOT IMPLEMENTED] Specifies deployment replication for improved availability. Options are: Basic and High (default)",
              "type": "string"
            },
            "dbConfig": {
              "description": "Configmap name contains parameters to override default db parameters",
              "type": "string"
            },
            "dbStorage": {
              "description": "Storage configuration for the database.",
              "type": "object",
              "properties": {
                "size": {
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "x-kubernetes-int-or-string": true
                },
                "storageClassName": {
                  "description": "name of the storage class",
                  "type": "string"
                }
              }
            },
            "deployments": {
              "description": "Customization for search deployments",
              "type": "object",
              "properties": {
                "collector": {
                  "description": "Configuration for collector Deployment",
                  "type": "object",
                  "properties": {
                    "arguments": {
                      "description": "Container Arguments",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "envVar": {
                      "description": "Container Env variables",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                }
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                }
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "imageOverride": {
                      "description": "Image_override",
                      "type": "string"
                    },
                    "replicaCount": {
                      "description": "Number of pod instances for deployment",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "resources": {
                      "description": "Compute Resources required by deployment",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    }
                  }
                },
                "database": {
                  "description": "Configuration for DB Deployment",
                  "type": "object",
                  "properties": {
                    "arguments": {
                      "description": "Container Arguments",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "envVar": {
                      "description": "Container Env variables",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                }
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                }
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "imageOverride": {
                      "description": "Image_override",
                      "type": "string"
                    },
                    "replicaCount": {
                      "description": "Number of pod instances for deployment",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "resources": {
                      "description": "Compute Resources required by deployment",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    }
                  }
                },
                "indexer": {
                  "description": "Configuration for indexer Deployment",
                  "type": "object",
                  "properties": {
                    "arguments": {
                      "description": "Container Arguments",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "envVar": {
                      "description": "Container Env variables",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                }
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                }
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "imageOverride": {
                      "description": "Image_override",
                      "type": "string"
                    },
                    "replicaCount": {
                      "description": "Number of pod instances for deployment",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "resources": {
                      "description": "Compute Resources required by deployment",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    }
                  }
                },
                "queryapi": {
                  "description": "Configuration for api Deployment",
                  "type": "object",
                  "properties": {
                    "arguments": {
                      "description": "Container Arguments",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "envVar": {
                      "description": "Container Env variables",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                }
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                }
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "imageOverride": {
                      "description": "Image_override",
                      "type": "string"
                    },
                    "replicaCount": {
                      "description": "Number of pod instances for deployment",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "resources": {
                      "description": "Compute Resources required by deployment",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "externalDBInstance": {
              "description": "[PLACEHOLDER, NOT IMPLEMENTED] Kubernetes secret name containing user provided db secret Secret should contain connection parameters [db_host, db_port, db_user, db_password, db_name, ca_cert] Not supported for development preview.",
              "type": "string"
            },
            "imagePullPolicy": {
              "description": "ImagePullPolicy",
              "type": "string"
            },
            "imagePullSecret": {
              "description": "ImagePullSecret",
              "type": "string"
            },
            "nodeSelector": {
              "description": "NodeSelector to schedule on nodes with matching labels",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "tolerations": {
              "description": "Tolerations to schedule pods on nodes with matching taints",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "SearchStatus defines the observed state of Search",
          "type": "object",
          "required": [
            "db",
            "storage"
          ],
          "properties": {
            "conditions": {
              "description": "Conditions",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "db": {
              "description": "Database used by search",
              "type": "string"
            },
            "storage": {
              "description": "Storage used by database",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "search.open-cluster-management.io",
          "kind": "Search",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.search.v1alpha1.SearchList": {
      "description": "SearchList is a list of Search",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of searches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "search.open-cluster-management.io",
          "kind": "SearchList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig": {
      "description": "SubmarinerConfig represents the configuration for Submariner, the submariner-addon will use it to configure the Submariner.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the configuration of the Submariner",
          "type": "object",
          "properties": {
            "Debug": {
              "description": "Debug enables Submariner debugging (in the logs).",
              "type": "boolean"
            },
            "IPSecDebug": {
              "description": "IPSecDebug enables IPSec debugging.",
              "type": "boolean"
            },
            "IPSecIKEPort": {
              "description": "IPSecIKEPort represents IPsec IKE port (default 500).",
              "type": "integer"
            },
            "IPSecNATTPort": {
              "description": "IPSecNATTPort represents IPsec NAT-T port (default 4500).",
              "type": "integer"
            },
            "NATTDiscoveryPort": {
              "description": "NATTDiscoveryPort specifies the port used for NAT-T Discovery (default UDP/4900).",
              "type": "integer"
            },
            "NATTEnable": {
              "description": "NATTEnable represents IPsec NAT-T enabled (default true).",
              "type": "boolean"
            },
            "airGappedDeployment": {
              "description": "AirGappedDeployment specifies that the cluster is in an air-gapped environment without access to external servers.",
              "type": "boolean"
            },
            "cableDriver": {
              "description": "CableDriver represents the submariner cable driver implementation. Available options are libreswan (default) strongswan, wireguard, and vxlan.",
              "type": "string"
            },
            "credentialsSecret": {
              "description": "CredentialsSecret is a reference to the secret with a certain cloud platform credentials, the supported platform includes AWS, GCP, Azure, ROKS and OSD. The submariner-addon will use these credentials to prepare Submariner cluster environment. If the submariner cluster environment requires submariner-addon preparation, this field should be specified.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              }
            },
            "gatewayConfig": {
              "description": "GatewayConfig represents the gateways configuration of the Submariner.",
              "type": "object",
              "properties": {
                "aws": {
                  "description": "AWS represents the configuration for Amazon Web Services. If the platform of managed cluster is not Amazon Web Services, this field will be ignored.",
                  "type": "object",
                  "properties": {
                    "instanceType": {
                      "description": "InstanceType represents the Amazon Web Services EC2 instance type of the gateway node that will be created on the managed cluster. The default value is `m5n.large`.",
                      "type": "string"
                    }
                  }
                },
                "azure": {
                  "description": "Azure represents the configuration for Azure Cloud Platform. If the platform of managed cluster is not Azure Cloud Platform, this field will be ignored.",
                  "type": "object",
                  "properties": {
                    "instanceType": {
                      "description": "InstanceType represents the Azure Cloud Platform instance type of the gateway node that will be created on the managed cluster. The default value is `Standard_F4s_v2`.",
                      "type": "string"
                    }
                  }
                },
                "gateways": {
                  "description": "Gateways represents the count of worker nodes that will be used to deploy the Submariner gateway component on the managed cluster. The default value is 1, if the value is greater than 1, the Submariner gateway HA will be enabled automatically.",
                  "type": "integer"
                },
                "gcp": {
                  "description": "GCP represents the configuration for Google Cloud Platform. If the platform of managed cluster is not Google Cloud Platform, this field will be ignored.",
                  "type": "object",
                  "properties": {
                    "instanceType": {
                      "description": "InstanceType represents the Google Cloud Platform instance type of the gateway node that will be created on the managed cluster. The default value is `n1-standard-4`.",
                      "type": "string"
                    }
                  }
                },
                "rhos": {
                  "description": "RHOS represents the configuration for Redhat Openstack Platform. If the platform of managed cluster is not Redhat Openstack Platform, this field will be ignored.",
                  "type": "object",
                  "properties": {
                    "instanceType": {
                      "description": "InstanceType represents the Redhat Openstack instance type of the gateway node that will be created on the managed cluster. The default value is `PnTAE.CPU_4_Memory_8192_Disk_50`.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "globalCIDR": {
              "description": "GlobalCIDR specifies the global CIDR used by the cluster.",
              "type": "string"
            },
            "haltOnCertificateError": {
              "description": "HaltOnCertificateError halts pods on certificate errors (so they are restarted).",
              "type": "boolean"
            },
            "imagePullSpecs": {
              "description": "ImagePullSpecs represents the desired images of submariner components installed on the managed cluster. If not specified, the default submariner images that was defined by submariner operator will be used.",
              "type": "object",
              "properties": {
                "lighthouseAgentImagePullSpec": {
                  "description": "LighthouseAgentImagePullSpec represents the desired image of the lighthouse agent.",
                  "type": "string"
                },
                "lighthouseCoreDNSImagePullSpec": {
                  "description": "LighthouseCoreDNSImagePullSpec represents the desired image of lighthouse coredns.",
                  "type": "string"
                },
                "metricsProxyImagePullSpec": {
                  "description": "MetricsProxyImagePullSpec represents the desired image of the metrics proxy.",
                  "type": "string"
                },
                "nettestImagePullSpec": {
                  "description": "NettestImagePullSpec represents the desired image of nettest.",
                  "type": "string"
                },
                "submarinerGlobalnetImagePullSpec": {
                  "description": "SubmarinerGlobalnetImagePullSpec represents the desired image of the submariner globalnet.",
                  "type": "string"
                },
                "submarinerImagePullSpec": {
                  "description": "SubmarinerImagePullSpec represents the desired image of submariner.",
                  "type": "string"
                },
                "submarinerNetworkPluginSyncerImagePullSpec": {
                  "description": "SubmarinerNetworkPluginSyncerImagePullSpec represents the desired image of the submariner networkplugin syncer. Deprecated: The networkplugin syncer was removed in v0.16.0.",
                  "type": "string"
                },
                "submarinerRouteAgentImagePullSpec": {
                  "description": "SubmarinerRouteAgentImagePullSpec represents the desired image of the submariner route agent.",
                  "type": "string"
                }
              }
            },
            "insecureBrokerConnection": {
              "description": "InsecureBrokerConnection disables certificate validation when contacting the broker. This is useful for scenarios where the certificate chain isn't the same everywhere, e.g. with self-signed certificates with a different trust chain in each cluster.",
              "type": "boolean"
            },
            "loadBalancerEnable": {
              "description": "LoadBalancerEnable enables or disables load balancer mode. When enabled, a LoadBalancer is created in the submariner-operator namespace (default false).",
              "type": "boolean"
            },
            "subscriptionConfig": {
              "description": "SubscriptionConfig represents a Submariner subscription. SubscriptionConfig can be used to customize the Submariner subscription.",
              "type": "object",
              "properties": {
                "channel": {
                  "description": "Channel represents the channel of a submariner subscription.",
                  "type": "string"
                },
                "installPlanApproval": {
                  "description": "InstallPlanApproval determines whether subscription installation plans are applied automatically.",
                  "type": "string"
                },
                "source": {
                  "description": "Source represents the catalog source of a submariner subscription. The default value is redhat-operators",
                  "type": "string"
                },
                "sourceNamespace": {
                  "description": "SourceNamespace represents the catalog source namespace of a submariner subscription. The default value is openshift-marketplace",
                  "type": "string"
                },
                "startingCSV": {
                  "description": "StartingCSV represents the startingCSV of a submariner subscription.",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represents the current status of submariner configuration",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contain the different condition statuses for this configuration.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "managedClusterInfo": {
              "description": "ManagedClusterInfo represents the information of a managed cluster.",
              "type": "object",
              "properties": {
                "clusterName": {
                  "description": "ClusterName represents the name of the managed cluster.",
                  "type": "string"
                },
                "infraId": {
                  "description": "InfraId represents the infrastructure id of the managed cluster.",
                  "type": "string"
                },
                "networkType": {
                  "description": "NetworkType represents the network type (cni) of the managed cluster.",
                  "type": "string"
                },
                "platform": {
                  "description": "Platform represents the cloud provider of the managed cluster.",
                  "type": "string"
                },
                "region": {
                  "description": "Region represents the cloud region of the managed cluster.",
                  "type": "string"
                },
                "vendor": {
                  "description": "Vendor represents the kubernetes vendor of the managed cluster.",
                  "type": "string"
                },
                "vendorVersion": {
                  "description": "VendorVersion represents k8s vendor version of the managed cluster.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfig",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfigList": {
      "description": "SubmarinerConfigList is a list of SubmarinerConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of submarinerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig": {
      "description": "SubmarinerDiagnoseConfig represents the configuration to run SubmarinerDiagnose Job.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the configuration of the Submariner",
          "type": "object",
          "properties": {
            "CNI": {
              "type": "boolean"
            },
            "all": {
              "type": "boolean"
            },
            "connections": {
              "type": "boolean"
            },
            "deployment": {
              "type": "boolean"
            },
            "firewall": {
              "type": "boolean"
            },
            "firewallOptions": {
              "type": "object",
              "properties": {
                "interCluster": {
                  "type": "boolean"
                },
                "intraCluster": {
                  "type": "boolean"
                },
                "metrics": {
                  "type": "boolean"
                },
                "remoteCluster": {
                  "type": "string"
                },
                "remoteK8sAPIServer": {
                  "type": "string"
                },
                "remoteK8sAPIServerToken": {
                  "type": "string"
                },
                "remoteK8sCA": {
                  "type": "string"
                },
                "remoteK8sRemoteNamespace": {
                  "type": "string"
                },
                "remoteK8sSecret": {
                  "type": "string"
                }
              }
            },
            "gatherLogs": {
              "type": "boolean"
            },
            "k8sVersion": {
              "type": "boolean"
            },
            "kubeProxyMode": {
              "type": "boolean"
            }
          }
        },
        "status": {
          "description": "Status represents the current status of SubmarinerDiagnose",
          "type": "object",
          "properties": {
            "cniType": {
              "type": "string"
            },
            "conditions": {
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "firewallStatus": {
              "type": "object",
              "properties": {
                "IPSecTunnel": {
                  "type": "string"
                },
                "metricsStatus": {
                  "type": "string"
                },
                "vxlanTunnel": {
                  "type": "string"
                }
              }
            },
            "k8sVersion": {
              "type": "string"
            },
            "kubeProxyMode": {
              "type": "boolean"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfig",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfigList": {
      "description": "SubmarinerDiagnoseConfigList is a list of SubmarinerDiagnoseConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of submarinerdiagnoseconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.submarineraddon.v1alpha1.SubmarinerDiagnoseConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "submarineraddon.open-cluster-management.io",
          "kind": "SubmarinerDiagnoseConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.view.v1beta1.ManagedClusterView": {
      "description": "ManagedClusterView is the view of resources on a managed cluster",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired configuration of a view",
          "type": "object",
          "properties": {
            "scope": {
              "description": "Scope is the scope of the view on a cluster",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "description": "Group is the api group of the resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the kind of the subject",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the subject",
                  "type": "string"
                },
                "namespace": {
                  "description": "Name is the name of the subject",
                  "type": "string"
                },
                "resource": {
                  "description": "Resource is the resource type of the subject",
                  "type": "string"
                },
                "updateIntervalSeconds": {
                  "description": "UpdateIntervalSeconds is the interval to update view",
                  "type": "integer",
                  "format": "int32"
                },
                "version": {
                  "description": "Version is the version of the subject",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "Status describes current status of a view",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions represents the conditions of this resource on managed cluster",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "result": {
              "description": "Result references the related result of the view",
              "x-kubernetes-embedded-resource": true,
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterView",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.view.v1beta1.ManagedClusterViewList": {
      "description": "ManagedClusterViewList is a list of ManagedClusterView",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of managedclusterviews. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.view.v1beta1.ManagedClusterView"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "view.open-cluster-management.io",
          "kind": "ManagedClusterViewList",
          "version": "v1beta1"
        }
      ]
    },
    "io.open-cluster-management.work.v1.AppliedManifestWork": {
      "description": "AppliedManifestWork represents an applied manifestwork on managed cluster that is placed on a managed cluster. An AppliedManifestWork links to a manifestwork on a hub recording resources deployed in the managed cluster. When the agent is removed from managed cluster, cluster-admin on managed cluster can delete appliedmanifestwork to remove resources deployed by the agent. The name of the appliedmanifestwork must be in the format of {hash of hub's first kube-apiserver url}-{manifestwork name}",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired configuration of AppliedManifestWork.",
          "type": "object",
          "properties": {
            "agentID": {
              "description": "AgentID represents the ID of the work agent who is to handle this AppliedManifestWork.",
              "type": "string"
            },
            "hubHash": {
              "description": "HubHash represents the hash of the first hub kube apiserver to identify which hub this AppliedManifestWork links to.",
              "type": "string"
            },
            "manifestWorkName": {
              "description": "ManifestWorkName represents the name of the related manifestwork on the hub.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "Status represents the current status of AppliedManifestWork.",
          "type": "object",
          "properties": {
            "appliedResources": {
              "description": "AppliedResources represents a list of resources defined within the manifestwork that are applied. Only resources with valid GroupVersionResource, namespace, and name are suitable. An item in this slice is deleted when there is no mapped manifest in manifestwork.Spec or by finalizer. The resource relating to the item will also be removed from managed cluster. The deleted resource may still be present until the finalizers for that resource are finished. However, the resource will not be undeleted, so it can be removed from this list and eventual consistency is preserved.",
              "type": "array",
              "items": {
                "description": "AppliedManifestResourceMeta represents the group, version, resource, name and namespace of a resource. Since these resources have been created, they must have valid group, version, resource, namespace, and name.",
                "type": "object",
                "required": [
                  "name",
                  "resource",
                  "version"
                ],
                "properties": {
                  "group": {
                    "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes resource.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "Resource is the resource name of the Kubernetes resource.",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID is set on successful deletion of the Kubernetes resource by controller. The resource might be still visible on the managed cluster after this field is set. It is not directly settable by a client.",
                    "type": "string"
                  },
                  "version": {
                    "description": "Version is the version of the Kubernetes resource.",
                    "type": "string"
                  }
                }
              }
            },
            "evictionStartTime": {
              "description": "EvictionStartTime represents the current appliedmanifestwork will be evicted after a grace period. An appliedmanifestwork will be evicted from the managed cluster in the following two scenarios: - the manifestwork of the current appliedmanifestwork is missing on the hub, or - the appliedmanifestwork hub hash does not match the current hub hash of the work agent.",
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWork",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.work.v1.AppliedManifestWorkList": {
      "description": "AppliedManifestWorkList is a list of AppliedManifestWork",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of appliedmanifestworks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.work.v1.AppliedManifestWork"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "AppliedManifestWorkList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.work.v1.ManifestWork": {
      "description": "ManifestWork represents a manifests workload that hub wants to deploy on the managed cluster. A manifest workload is defined as a set of Kubernetes resources. ManifestWork must be created in the cluster namespace on the hub, so that agent on the corresponding managed cluster can access this resource and deploy on the managed cluster.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired configuration of work to be deployed on the managed cluster.",
          "type": "object",
          "properties": {
            "deleteOption": {
              "description": "DeleteOption represents deletion strategy when the manifestwork is deleted. Foreground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
              "type": "object",
              "properties": {
                "propagationPolicy": {
                  "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan SelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering ownership from one ManifestWork to another or another management unit. Setting this value will allow a flow like 1. create manifestwork/2 to manage foo 2. update manifestwork/1 to selectively orphan foo 3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                  "type": "string",
                  "enum": [
                    "Foreground",
                    "Orphan",
                    "SelectivelyOrphan"
                  ]
                },
                "selectivelyOrphans": {
                  "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                  "type": "object",
                  "properties": {
                    "orphaningRules": {
                      "description": "orphaningRules defines a slice of orphaningrule. Each orphaningrule identifies a single resource included in this manifestwork",
                      "type": "array",
                      "items": {
                        "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                        "type": "object",
                        "required": [
                          "name",
                          "resource"
                        ],
                        "properties": {
                          "group": {
                            "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the Kubernetes resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource is the resource name of the Kubernetes resource.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "executor": {
              "description": "Executor is the configuration that makes the work agent to perform some pre-request processing/checking. e.g. the executor identity tells the work agent to check the executor has sufficient permission to write the workloads to the local managed cluster. Note that nil executor is still supported for backward-compatibility which indicates that the work agent will not perform any additional actions before applying resources.",
              "type": "object",
              "properties": {
                "subject": {
                  "description": "Subject is the subject identity which the work agent uses to talk to the local cluster when applying the resources.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "serviceAccount": {
                      "description": "ServiceAccount is for identifying which service account to use by the work agent. Only required if the type is \"ServiceAccount\".",
                      "type": "object",
                      "required": [
                        "name",
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name is the name of the service account.",
                          "type": "string",
                          "maxLength": 253,
                          "minLength": 1,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                        },
                        "namespace": {
                          "description": "Namespace is the namespace of the service account.",
                          "type": "string",
                          "maxLength": 253,
                          "minLength": 1,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                        }
                      }
                    },
                    "type": {
                      "description": "Type is the type of the subject identity. Supported types are: \"ServiceAccount\".",
                      "type": "string",
                      "enum": [
                        "ServiceAccount"
                      ]
                    }
                  }
                }
              }
            },
            "manifestConfigs": {
              "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
              "type": "array",
              "items": {
                "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                "type": "object",
                "required": [
                  "resourceIdentifier"
                ],
                "properties": {
                  "feedbackRules": {
                    "description": "FeedbackRules defines what resource status field should be returned. If it is not set or empty, no feedback rules will be honored.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "jsonPaths": {
                          "description": "JsonPaths defines the json path under status field to be synced.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "path"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name represents the alias name for this field",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path represents the json path of the field under status. The path must point to a field with single value in the type of integer, bool or string. If the path points to a non-existing field, no value will be returned. If the path points to a structure, map or slice, no value will be returned and the status conddition of StatusFeedBackSynced will be set as false. Ref to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                "type": "string"
                              },
                              "version": {
                                "description": "Version is the version of the Kubernetes resource. If it is not specified, the resource with the semantically latest version is used to resolve the path.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "Type defines the option of how status can be returned. It can be jsonPaths or wellKnownStatus. If the type is JSONPaths, user should specify the jsonPaths field If the type is WellKnownStatus, certain common fields of status defined by a rule only for types in in k8s.io/api and open-cluster-management/api will be reported, If these status fields do not exist, no values will be reported.",
                          "type": "string",
                          "enum": [
                            "WellKnownStatus",
                            "JSONPaths"
                          ]
                        }
                      }
                    }
                  },
                  "resourceIdentifier": {
                    "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure. iff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                    "type": "object",
                    "required": [
                      "name",
                      "resource"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of the Kubernetes resource.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                        "type": "string"
                      },
                      "resource": {
                        "description": "Resource is the resource name of the Kubernetes resource.",
                        "type": "string"
                      }
                    }
                  },
                  "updateStrategy": {
                    "description": "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update if it is not set.",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "serverSideApply": {
                        "description": "serverSideApply defines the configuration for server side apply. It is honored only when type of updateStrategy is ServerSideApply",
                        "type": "object",
                        "properties": {
                          "fieldManager": {
                            "description": "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent as the prefix.",
                            "type": "string",
                            "pattern": "^work-agent"
                          },
                          "force": {
                            "description": "Force represents to force apply the manifest.",
                            "type": "boolean"
                          }
                        }
                      },
                      "type": {
                        "description": "type defines the strategy to update this manifest, default value is Update. Update type means to update resource by an update call. CreateOnly type means do not update resource based on current manifest. ServerSideApply type means to update resource using server side apply with work-controller as the field manager. If there is conflict, the related Applied condition of manifest will be in the status of False with the reason of ApplyConflict.",
                        "type": "string",
                        "enum": [
                          "Update",
                          "CreateOnly",
                          "ServerSideApply"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "workload": {
              "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
              "type": "object",
              "properties": {
                "manifests": {
                  "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                  "type": "array",
                  "items": {
                    "description": "Manifest represents a resource to be deployed on managed cluster.",
                    "x-kubernetes-embedded-resource": true,
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represents the current status of work.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition statuses for this work. Valid condition types are: 1. Applied represents workload in ManifestWork is applied successfully on managed cluster. 2. Progressing represents workload in ManifestWork is being applied on managed cluster. 3. Available represents workload in ManifestWork exists on the managed cluster. 4. Degraded represents the current state of workload does not match the desired state for a certain period.",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "resourceStatus": {
              "description": "ResourceStatus represents the status of each resource in manifestwork deployed on a managed cluster. The Klusterlet agent on managed cluster syncs the condition from the managed cluster to the hub.",
              "type": "object",
              "properties": {
                "manifests": {
                  "description": "Manifests represents the condition of manifests deployed on managed cluster. Valid condition types are: 1. Progressing represents the resource is being applied on managed cluster. 2. Applied represents the resource is applied successfully on managed cluster. 3. Available represents the resource exists on the managed cluster. 4. Degraded represents the current state of resource does not match the desired state for a certain period.",
                  "type": "array",
                  "items": {
                    "description": "ManifestCondition represents the conditions of the resources deployed on a managed cluster.",
                    "type": "object",
                    "properties": {
                      "conditions": {
                        "description": "Conditions represents the conditions of this resource on a managed cluster.",
                        "type": "array",
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                          "type": "object",
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                              "type": "string",
                              "maxLength": 32768
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                              "type": "integer",
                              "format": "int64",
                              "minimum": 0
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                              "type": "string",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "type": "string",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ]
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                              "type": "string",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                            }
                          }
                        }
                      },
                      "resourceMeta": {
                        "description": "ResourceMeta represents the group, version, kind, name and namespace of a resoure.",
                        "type": "object",
                        "properties": {
                          "group": {
                            "description": "Group is the API Group of the Kubernetes resource.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the kind of the Kubernetes resource.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the Kubernetes resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Name is the namespace of the Kubernetes resource.",
                            "type": "string"
                          },
                          "ordinal": {
                            "description": "Ordinal represents the index of the manifest on spec.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "resource": {
                            "description": "Resource is the resource name of the Kubernetes resource.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version is the version of the Kubernetes resource.",
                            "type": "string"
                          }
                        }
                      },
                      "statusFeedback": {
                        "description": "StatusFeedback represents the values of the feild synced back defined in statusFeedbacks",
                        "type": "object",
                        "properties": {
                          "values": {
                            "description": "Values represents the synced value of the interested field.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "fieldValue",
                                "name"
                              ],
                              "properties": {
                                "fieldValue": {
                                  "description": "Value is the value of the status field. The value of the status field can only be integer, string or boolean.",
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "boolean": {
                                      "description": "Boolean is bool value when type is boolean.",
                                      "type": "boolean"
                                    },
                                    "integer": {
                                      "description": "Integer is the integer value when type is integer.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "jsonRaw": {
                                      "description": "JsonRaw is a json string when type is a list or object",
                                      "type": "string",
                                      "maxLength": 1024
                                    },
                                    "string": {
                                      "description": "String is the string value when type is string.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type represents the type of the value, it can be integer, string or boolean.",
                                      "type": "string",
                                      "enum": [
                                        "Integer",
                                        "String",
                                        "Boolean",
                                        "JsonRaw"
                                      ]
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name represents the alias name for this field. It is the same as what is specified in StatuFeedbackRule in the spec.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWork",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.work.v1.ManifestWorkList": {
      "description": "ManifestWorkList is a list of ManifestWork",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of manifestworks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.work.v1.ManifestWork"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkList",
          "version": "v1"
        }
      ]
    },
    "io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet": {
      "description": "ManifestWorkReplicaSet is the Schema for the ManifestWorkReplicaSet API. This custom resource is able to apply ManifestWork using Placement for 0..n ManagedCluster(in their namespaces). It will also remove the ManifestWork custom resources when deleted. Lastly the specific ManifestWork custom resources created per ManagedCluster namespace will be adjusted based on PlacementDecision changes.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec reperesents the desired ManifestWork payload and Placement reference to be reconciled",
          "type": "object",
          "required": [
            "placementRefs"
          ],
          "properties": {
            "manifestWorkTemplate": {
              "description": "ManifestWorkTemplate is the ManifestWorkSpec that will be used to generate a per-cluster ManifestWork",
              "type": "object",
              "properties": {
                "deleteOption": {
                  "description": "DeleteOption represents deletion strategy when the manifestwork is deleted. Foreground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
                  "type": "object",
                  "properties": {
                    "propagationPolicy": {
                      "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan SelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering ownership from one ManifestWork to another or another management unit. Setting this value will allow a flow like 1. create manifestwork/2 to manage foo 2. update manifestwork/1 to selectively orphan foo 3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                      "type": "string",
                      "enum": [
                        "Foreground",
                        "Orphan",
                        "SelectivelyOrphan"
                      ]
                    },
                    "selectivelyOrphans": {
                      "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                      "type": "object",
                      "properties": {
                        "orphaningRules": {
                          "description": "orphaningRules defines a slice of orphaningrule. Each orphaningrule identifies a single resource included in this manifestwork",
                          "type": "array",
                          "items": {
                            "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                            "type": "object",
                            "required": [
                              "name",
                              "resource"
                            ],
                            "properties": {
                              "group": {
                                "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the Kubernetes resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                                "type": "string"
                              },
                              "resource": {
                                "description": "Resource is the resource name of the Kubernetes resource.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "executor": {
                  "description": "Executor is the configuration that makes the work agent to perform some pre-request processing/checking. e.g. the executor identity tells the work agent to check the executor has sufficient permission to write the workloads to the local managed cluster. Note that nil executor is still supported for backward-compatibility which indicates that the work agent will not perform any additional actions before applying resources.",
                  "type": "object",
                  "properties": {
                    "subject": {
                      "description": "Subject is the subject identity which the work agent uses to talk to the local cluster when applying the resources.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "serviceAccount": {
                          "description": "ServiceAccount is for identifying which service account to use by the work agent. Only required if the type is \"ServiceAccount\".",
                          "type": "object",
                          "required": [
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name is the name of the service account.",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                            },
                            "namespace": {
                              "description": "Namespace is the namespace of the service account.",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                            }
                          }
                        },
                        "type": {
                          "description": "Type is the type of the subject identity. Supported types are: \"ServiceAccount\".",
                          "type": "string",
                          "enum": [
                            "ServiceAccount"
                          ]
                        }
                      }
                    }
                  }
                },
                "manifestConfigs": {
                  "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
                  "type": "array",
                  "items": {
                    "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                    "type": "object",
                    "required": [
                      "resourceIdentifier"
                    ],
                    "properties": {
                      "feedbackRules": {
                        "description": "FeedbackRules defines what resource status field should be returned. If it is not set or empty, no feedback rules will be honored.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "jsonPaths": {
                              "description": "JsonPaths defines the json path under status field to be synced.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "path"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name represents the alias name for this field",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path represents the json path of the field under status. The path must point to a field with single value in the type of integer, bool or string. If the path points to a non-existing field, no value will be returned. If the path points to a structure, map or slice, no value will be returned and the status conddition of StatusFeedBackSynced will be set as false. Ref to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                    "type": "string"
                                  },
                                  "version": {
                                    "description": "Version is the version of the Kubernetes resource. If it is not specified, the resource with the semantically latest version is used to resolve the path.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "type": {
                              "description": "Type defines the option of how status can be returned. It can be jsonPaths or wellKnownStatus. If the type is JSONPaths, user should specify the jsonPaths field If the type is WellKnownStatus, certain common fields of status defined by a rule only for types in in k8s.io/api and open-cluster-management/api will be reported, If these status fields do not exist, no values will be reported.",
                              "type": "string",
                              "enum": [
                                "WellKnownStatus",
                                "JSONPaths"
                              ]
                            }
                          }
                        }
                      },
                      "resourceIdentifier": {
                        "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure. iff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                        "type": "object",
                        "required": [
                          "name",
                          "resource"
                        ],
                        "properties": {
                          "group": {
                            "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the Kubernetes resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource is the resource name of the Kubernetes resource.",
                            "type": "string"
                          }
                        }
                      },
                      "updateStrategy": {
                        "description": "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update if it is not set.",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "serverSideApply": {
                            "description": "serverSideApply defines the configuration for server side apply. It is honored only when type of updateStrategy is ServerSideApply",
                            "type": "object",
                            "properties": {
                              "fieldManager": {
                                "description": "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent as the prefix.",
                                "type": "string",
                                "pattern": "^work-agent"
                              },
                              "force": {
                                "description": "Force represents to force apply the manifest.",
                                "type": "boolean"
                              }
                            }
                          },
                          "type": {
                            "description": "type defines the strategy to update this manifest, default value is Update. Update type means to update resource by an update call. CreateOnly type means do not update resource based on current manifest. ServerSideApply type means to update resource using server side apply with work-controller as the field manager. If there is conflict, the related Applied condition of manifest will be in the status of False with the reason of ApplyConflict.",
                            "type": "string",
                            "enum": [
                              "Update",
                              "CreateOnly",
                              "ServerSideApply"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "workload": {
                  "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                      "type": "array",
                      "items": {
                        "description": "Manifest represents a resource to be deployed on managed cluster.",
                        "x-kubernetes-embedded-resource": true,
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                }
              }
            },
            "placementRefs": {
              "description": "PacementRefs is a list of the names of the Placement resource, from which a PlacementDecision will be found and used to distribute the ManifestWork.",
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "localPlacementReference is the name of a Placement resource in current namespace",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the Placement resource in the current namespace",
                    "type": "string",
                    "minLength": 1
                  },
                  "rolloutStrategy": {
                    "description": "Rollout strategy to apply workload to the selected clusters by Placement and DecisionStrategy.",
                    "type": "object",
                    "properties": {
                      "all": {
                        "description": "All defines required fields for RolloutStrategy type All",
                        "type": "object",
                        "properties": {
                          "maxFailures": {
                            "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                            "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                            "x-kubernetes-int-or-string": true
                          },
                          "minSuccessTime": {
                            "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string"
                          },
                          "progressDeadline": {
                            "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string",
                            "pattern": "^(([0-9])+[h|m|s])|None$"
                          }
                        }
                      },
                      "progressive": {
                        "description": "Progressive defines required fields for RolloutStrategy type Progressive",
                        "type": "object",
                        "properties": {
                          "mandatoryDecisionGroups": {
                            "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
                            "type": "array",
                            "items": {
                              "description": "MandatoryDecisionGroup set the decision group name or group index. GroupName is considered first to select the decisionGroups then GroupIndex.",
                              "type": "object",
                              "properties": {
                                "groupIndex": {
                                  "description": "GroupIndex of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-index",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "groupName": {
                                  "description": "GroupName of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-name",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "maxConcurrency": {
                            "description": "MaxConcurrency is the max number of clusters to deploy workload concurrently. The default value for MaxConcurrency is determined from the clustersPerDecisionGroup defined in the placement->DecisionStrategy.",
                            "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxFailures": {
                            "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                            "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                            "x-kubernetes-int-or-string": true
                          },
                          "minSuccessTime": {
                            "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string"
                          },
                          "progressDeadline": {
                            "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string",
                            "pattern": "^(([0-9])+[h|m|s])|None$"
                          }
                        }
                      },
                      "progressivePerGroup": {
                        "description": "ProgressivePerGroup defines required fields for RolloutStrategy type ProgressivePerGroup",
                        "type": "object",
                        "properties": {
                          "mandatoryDecisionGroups": {
                            "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
                            "type": "array",
                            "items": {
                              "description": "MandatoryDecisionGroup set the decision group name or group index. GroupName is considered first to select the decisionGroups then GroupIndex.",
                              "type": "object",
                              "properties": {
                                "groupIndex": {
                                  "description": "GroupIndex of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-index",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "groupName": {
                                  "description": "GroupName of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-name",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "maxFailures": {
                            "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
                            "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                            "x-kubernetes-int-or-string": true
                          },
                          "minSuccessTime": {
                            "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string"
                          },
                          "progressDeadline": {
                            "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                            "type": "string",
                            "pattern": "^(([0-9])+[h|m|s])|None$"
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "All",
                          "Progressive",
                          "ProgressivePerGroup"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Status represent the current status of Placing ManifestWork resources",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions contains the different condition statuses for distrbution of ManifestWork resources Valid condition types are: 1. AppliedManifestWorks represents ManifestWorks have been distributed as per placement All, Partial, None, Problem 2. PlacementRefValid",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            },
            "placementSummary": {
              "description": "PlacementRef Summary",
              "type": "array",
              "items": {
                "description": "PlacementSummary provides info regards number of clusters and clusterGroups selected by the placement refs.",
                "type": "object",
                "properties": {
                  "availableDecisionGroups": {
                    "description": "availableDecisionGroups shows number of decisionGroups that have all clusters manifestWorks in available state regards total number of decisionGroups. ex; 2/4 (2 out of 4)",
                    "type": "string"
                  },
                  "name": {
                    "description": "PlacementRef Name",
                    "type": "string"
                  },
                  "summary": {
                    "description": "Summary totals of resulting ManifestWorks for the placement",
                    "type": "object",
                    "properties": {
                      "Applied": {
                        "description": "Applied is the number of ManifestWorks with condition Applied: true",
                        "type": "integer"
                      },
                      "available": {
                        "description": "Available is the number of ManifestWorks with condition Available: true",
                        "type": "integer"
                      },
                      "degraded": {
                        "description": "TODO: Degraded is the number of ManifestWorks with condition Degraded: true",
                        "type": "integer"
                      },
                      "progressing": {
                        "description": "TODO: Progressing is the number of ManifestWorks with condition Progressing: true",
                        "type": "integer"
                      },
                      "total": {
                        "description": "Total number of ManifestWorks managed by the ManifestWorkReplicaSet",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            "summary": {
              "description": "Summary totals of resulting ManifestWorks for all placements",
              "type": "object",
              "properties": {
                "Applied": {
                  "description": "Applied is the number of ManifestWorks with condition Applied: true",
                  "type": "integer"
                },
                "available": {
                  "description": "Available is the number of ManifestWorks with condition Available: true",
                  "type": "integer"
                },
                "degraded": {
                  "description": "TODO: Degraded is the number of ManifestWorks with condition Degraded: true",
                  "type": "integer"
                },
                "progressing": {
                  "description": "TODO: Progressing is the number of ManifestWorks with condition Progressing: true",
                  "type": "integer"
                },
                "total": {
                  "description": "Total number of ManifestWorks managed by the ManifestWorkReplicaSet",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSet",
          "version": "v1alpha1"
        }
      ]
    },
    "io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSetList": {
      "description": "ManifestWorkReplicaSetList is a list of ManifestWorkReplicaSet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of manifestworkreplicasets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.work.v1alpha1.ManifestWorkReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.open-cluster-management.io",
          "kind": "ManifestWorkReplicaSetList",
          "version": "v1alpha1"
        }
      ]
    }
  },
  "parameters": {
    "allowWatchBookmarks-HC2hJt-J": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
      "name": "allowWatchBookmarks",
      "in": "query"
    },
    "asFile-OcRrrLDo": {
      "uniqueItems": true,
      "type": "string",
      "description": "asFile determines if the binary should be created as a file within the source rather than extracted as an archive",
      "name": "asFile",
      "in": "query"
    },
    "body-2Y1dVQaQ": {
      "name": "body",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      }
    },
    "body-78PwaGsr": {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      }
    },
    "command-Py3eQybp": {
      "uniqueItems": true,
      "type": "string",
      "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
      "name": "command",
      "in": "query"
    },
    "container-1GeXxFDC": {
      "uniqueItems": true,
      "type": "string",
      "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
      "name": "container",
      "in": "query"
    },
    "container-Rl7l_oz7": {
      "uniqueItems": true,
      "type": "string",
      "description": "cointainer for which to stream logs. Defaults to only container if there is one container in the pod.",
      "name": "container",
      "in": "query"
    },
    "container-_Q-EJ3nR": {
      "uniqueItems": true,
      "type": "string",
      "description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
      "name": "container",
      "in": "query"
    },
    "container-i5dOmRiM": {
      "uniqueItems": true,
      "type": "string",
      "description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
      "name": "container",
      "in": "query"
    },
    "continue-QfD61s0i": {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
    },
    "fieldManager-7c6nTn1T": {
      "uniqueItems": true,
      "type": "string",
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
      "name": "fieldManager",
      "in": "query"
    },
    "fieldManager-Qy4HdaTW": {
      "uniqueItems": true,
      "type": "string",
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
      "name": "fieldManager",
      "in": "query"
    },
    "fieldSelector-xIcQKXFG": {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
    },
    "follow-9OIXh_2R": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Follow the log stream of the pod. Defaults to false.",
      "name": "follow",
      "in": "query"
    },
    "follow-ryc9nKX-": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "follow if true indicates that the build log should be streamed until the build terminates.",
      "name": "follow",
      "in": "query"
    },
    "follow-uBbRJU1P": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Follow if true indicates that the build log should be streamed until the build terminates.",
      "name": "follow",
      "in": "query"
    },
    "force-tOGGb0Yi": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
      "name": "force",
      "in": "query"
    },
    "gracePeriodSeconds--K5HaBOS": {
      "uniqueItems": true,
      "type": "integer",
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
      "name": "gracePeriodSeconds",
      "in": "query"
    },
    "insecureSkipTLSVerifyBackend-gM00jVbe": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).",
      "name": "insecureSkipTLSVerifyBackend",
      "in": "query"
    },
    "labelSelector-5Zw57w4C": {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
    },
    "limit-1NfNmdNH": {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
    },
    "limitBytes-_hnOr0V4": {
      "uniqueItems": true,
      "type": "integer",
      "description": "limitBytes, If set, is the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
      "name": "limitBytes",
      "in": "query"
    },
    "limitBytes-zwd1RXuc": {
      "uniqueItems": true,
      "type": "integer",
      "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
      "name": "limitBytes",
      "in": "query"
    },
    "namespace-vgWSWtn3": {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
    },
    "nowait-4e5T_PV3": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "noWait if true causes the call to return immediately even if the build is not available yet. Otherwise the server will wait until the build has started.",
      "name": "nowait",
      "in": "query"
    },
    "nowait-fRDq2lTB": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "NoWait if true causes the call to return immediately even if the deployment is not available yet. Otherwise the server will wait until the deployment has started.",
      "name": "nowait",
      "in": "query"
    },
    "orphanDependents-uRB25kX5": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
      "name": "orphanDependents",
      "in": "query"
    },
    "path-QCf0eosM": {
      "uniqueItems": true,
      "type": "string",
      "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
      "name": "path",
      "in": "query"
    },
    "path-RHIocHeS": {
      "uniqueItems": true,
      "type": "string",
      "name": "path",
      "in": "query"
    },
    "path-oPbzgLUj": {
      "uniqueItems": true,
      "type": "string",
      "description": "Path is the URL path to use for the current proxy request to pod.",
      "name": "path",
      "in": "query"
    },
    "path-rFDtV0x9": {
      "uniqueItems": true,
      "type": "string",
      "description": "Path is the URL path to use for the current proxy request to node.",
      "name": "path",
      "in": "query"
    },
    "path-z6Ciiujn": {
      "uniqueItems": true,
      "type": "string",
      "description": "path to the resource",
      "name": "path",
      "in": "path",
      "required": true
    },
    "ports-91KROJmm": {
      "uniqueItems": true,
      "type": "integer",
      "description": "List of ports to forward Required when using WebSockets",
      "name": "ports",
      "in": "query"
    },
    "pretty-nN7o5FEq": {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
    },
    "previous-1jxDPu3y": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Return previous terminated container logs. Defaults to false.",
      "name": "previous",
      "in": "query"
    },
    "previous-VzhNnb31": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Return previous deployment logs. Defaults to false.",
      "name": "previous",
      "in": "query"
    },
    "previous-pXJ3IzH4": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "previous returns previous build logs. Defaults to false.",
      "name": "previous",
      "in": "query"
    },
    "propagationPolicy-6jk3prlO": {
      "uniqueItems": true,
      "type": "string",
      "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      "name": "propagationPolicy",
      "in": "query"
    },
    "resourceVersion-5WAnf1kx": {
      "uniqueItems": true,
      "type": "string",
      "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "name": "resourceVersion",
      "in": "query"
    },
    "resourceVersionMatch-t8XhRHeC": {
      "uniqueItems": true,
      "type": "string",
      "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "name": "resourceVersionMatch",
      "in": "query"
    },
    "revision.authorEmail-AGO6Wd6i": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.authorEmail of the source control user",
      "name": "revision.authorEmail",
      "in": "query"
    },
    "revision.authorName-2Gfs6bIw": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.authorName of the source control user",
      "name": "revision.authorName",
      "in": "query"
    },
    "revision.commit-fuCVC6aw": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.commit is the value identifying a specific commit",
      "name": "revision.commit",
      "in": "query"
    },
    "revision.committerEmail-5mz1H_nc": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.committerEmail of the source control user",
      "name": "revision.committerEmail",
      "in": "query"
    },
    "revision.committerName-Pr6tr88U": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.committerName of the source control user",
      "name": "revision.committerName",
      "in": "query"
    },
    "revision.message-cz6CLAnc": {
      "uniqueItems": true,
      "type": "string",
      "description": "revision.message is the description of a specific commit",
      "name": "revision.message",
      "in": "query"
    },
    "sendInitialEvents-rLXlEK_k": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
      "name": "sendInitialEvents",
      "in": "query"
    },
    "sinceSeconds-Sf7lFlCh": {
      "uniqueItems": true,
      "type": "integer",
      "description": "sinceSeconds is a relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
      "name": "sinceSeconds",
      "in": "query"
    },
    "sinceSeconds-vE2NLdnP": {
      "uniqueItems": true,
      "type": "integer",
      "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
      "name": "sinceSeconds",
      "in": "query"
    },
    "stderr-26jJhFUR": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
      "name": "stderr",
      "in": "query"
    },
    "stderr-W_1TNlWc": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Redirect the standard error stream of the pod for this call.",
      "name": "stderr",
      "in": "query"
    },
    "stdin-PSzNhyUC": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
      "name": "stdin",
      "in": "query"
    },
    "stdin-sEFnN3IS": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
      "name": "stdin",
      "in": "query"
    },
    "stdout--EZLRwV1": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Redirect the standard output stream of the pod for this call.",
      "name": "stdout",
      "in": "query"
    },
    "stdout-005YMKE6": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
      "name": "stdout",
      "in": "query"
    },
    "tailLines-2fRTNzbP": {
      "uniqueItems": true,
      "type": "integer",
      "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
      "name": "tailLines",
      "in": "query"
    },
    "tailLines-c-mA2NFh": {
      "uniqueItems": true,
      "type": "integer",
      "description": "tailLines, If set, is the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
      "name": "tailLines",
      "in": "query"
    },
    "timeoutSeconds-yvYezaOC": {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
      "name": "timeoutSeconds",
      "in": "query"
    },
    "timestamps-c17fW1w_": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
      "name": "timestamps",
      "in": "query"
    },
    "timestamps-rluwd6z0": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "timestamps, If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
      "name": "timestamps",
      "in": "query"
    },
    "tty-g7MlET_l": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
      "name": "tty",
      "in": "query"
    },
    "tty-s0flW37O": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
      "name": "tty",
      "in": "query"
    },
    "version-Co11t97x": {
      "uniqueItems": true,
      "type": "integer",
      "description": "Version of the deployment for which to view logs.",
      "name": "version",
      "in": "query"
    },
    "version-enodSG5q": {
      "uniqueItems": true,
      "type": "integer",
      "description": "version of the build for which to view logs.",
      "name": "version",
      "in": "query"
    },
    "watch-XNNPZGbK": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ]
}
